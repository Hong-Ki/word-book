{"version":3,"sources":["style/word.module.scss","style/layout.module.scss","style/button.module.scss","style/modal.module.scss","components/Header.js","modules/words.js","modules/test.js","modules/modal.js","modules/base.js","components/Word.js","components/TestForm.js","components/Means.js","components/Button.js","components/Result.js","components/WordBox.js","components/WordBoxList.js","class/Word.js","containers/WordBoxListContainer.js","components/Input.js","components/Mean.js","components/MeanList.js","components/Modal.js","containers/WordModalContainer.js","containers/FooterContainer.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["module","exports","container","show","overflowText","text-move","check","word","mean","result","header","wrapper","body","footer","wordContainerButton","button","inputWrapper","innerButton-right","title","box","contents","meansList","text","submit","add","cancel","cx","classNames","bind","styles","Header","react_default","a","createElement","className","create","createAction","update","remove","loadWords","initialState","List","Map","means","id","isComplete","handleActions","_handleActions","Object","defineProperty","state","action","index","findIndex","get","payload","push","window","confirm","_ret","getIn","toJS","editMeans","_loop","key","idx","replace","splice","v","setIn","concat","delete","alert","isEqual","toImmutable","mergeIn","filter","fromJS","change","answers","answer","set","split","map","toUpperCase","trim","sort","hide","toggleMeanMode","addMean","removeMean","changeMean","visible","mode","wrongCounter","modal_handleActions","input","current","_action$payload","isEditMode","search","setMode","keyword","base_handleActions","Word","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ref","React","createRef","prevProps","prevState","snapshot","offsetWidth","parentElement","Component","TestForm","handleChange","e","onChange","target","value","_this$props","onTest","placeholder","onClick","Means","onEdit","components_TestForm","i","size","Button","_ref","children","rest","objectWithoutProperties","wordStyle","Result","buttonStyle","handleSound","stopPropagation","msg","SpeechSynthesisUtterance","lang","volume","rate","pitch","speechSynthesis","speak","onSound","handleRemove","components_Button","index_esm","WordBox","handleCheck","handleEdit","_this$props2","onRemove","type","htmlFor","fi_index_esm","components_Word","components_Means","components_Result","WordBoxList","onSearch","words","wordList","indexOf","components_WordBox","defaultWord","toString","fromModal","toModal","shortid","generate","isEditMod","WordBoxListContainer","ModalActions","WordsActions","handleSearch","BaseActions","localStorage","setItem","JSON","stringify","components_WordBoxList","connect","base","dispatch","bindActionCreators","wordsActions","modalActions","baseActions","TestActions","testActions","InputWithButton","forwardRef","defaultValue","onKeyDown","onBlur","buttonClassName","Mean","handleMode","toggleMode","_this$props3","focus","element","md_index_esm","MeanList","handleBlur","onChangeMean","handleKeyPress","keyCode","blur","onRemoveMean","closest","getAttribute","nextProps","nextState","meanList","components_Mean","Modal","onAddMean","handleKeyDown","preventDefault","modal","onAdd","onCancel","modeString","required","components_MeanList","WordModalContainer","handleMean","item","meanObj","otherMeans","_this$props4","handleWord","_this$props5","validate","isEmpty","_this$props6","handleCancel","_this$props7","components_Modal","FooterContainer","handleShow","idList","document","querySelectorAll","layout","App","getItem","parse","handleClick","components_Header","containers_WordBoxListContainer","containers_FooterContainer","containers_WordModalContainer","Boolean","location","hostname","match","combineReducers","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","getElementById"],"mappings":"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","file":"static/js/main.94b64dcb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"word_container__14hbr\",\"show\":\"word_show___CGe3\",\"overflowText\":\"word_overflowText__3NjVX\",\"text-move\":\"word_text-move__2Eupz\",\"check\":\"word_check__2I7jF\",\"word\":\"word_word__1oIdx\",\"mean\":\"word_mean__hZYdF\",\"result\":\"word_result__Zdcg-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"layout_header__1sSBx\",\"wrapper\":\"layout_wrapper__Gh19r\",\"body\":\"layout_body__3pUNW\",\"footer\":\"layout_footer__1ZPi4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wordContainerButton\":\"button_wordContainerButton__2uaGW\",\"button\":\"button_button__1jN1g\",\"inputWrapper\":\"button_inputWrapper__2bo6T\",\"innerButton-right\":\"button_innerButton-right__37eJd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"modal_wrapper__MFLJt\",\"title\":\"modal_title__2czFJ\",\"box\":\"modal_box__45WXb\",\"contents\":\"modal_contents__2KNUX\",\"meansList\":\"modal_meansList__C5E-v\",\"mean\":\"modal_mean__EMkld\",\"button\":\"modal_button__Z3JfN\",\"text\":\"modal_text__1Vovw\",\"submit\":\"modal_submit__1yWPU\",\"add\":\"modal_add__2ltqx\",\"cancel\":\"modal_cancel__1yLS0\"};","import React from 'react';\n\nimport classNames from 'classnames/bind';\n\nimport * as styles from '../style/layout.module.scss'\n\nconst cx = classNames.bind(styles);\n\n\nconst Header = () => (\n    <div className={cx('header')}> Word Book </div>\n);\n\nexport default Header;","import {Map, List, fromJS} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CREATE = 'word/CREATE';\r\nconst UPDATE = 'word/UPDATE';\r\nconst REMOVE = 'word/REMOVE';\r\nconst LOAD_WORDS = 'word/LOAD_WORDS';\r\n\r\nexport const create = createAction(CREATE); // Map{id, word, List[means], isComplete, wrongCount }\r\nexport const update = createAction(UPDATE); // id, word{ word, List[means], isComplete, wrongCount } \r\nexport const remove = createAction(REMOVE); // List[id]\r\nexport const loadWords = createAction(LOAD_WORDS); \r\n\r\nconst initialState = List([\r\n    Map({\r\n        means : List([\"이곳을 클릭하면 수정이 가능해요!\"]),\r\n        word : \"단어가 없네요!\",\r\n        id : 'Default',\r\n        isComplete : false\r\n    })\r\n]);\r\n\r\nexport default handleActions({\r\n    [CREATE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('word') === action.payload.get('word') );\r\ndebugger;\r\n        if ( index < 0) {\r\n            return state.push( action.payload );\r\n        }\r\n\r\n        if ( window.confirm('Do you want Merge?') ) {\r\n            let means = state.getIn([index, 'means']).toJS();\r\n            const editMeans = action.payload.get('means').toJS();\r\n\r\n            for (let key in means) {                \r\n                let idx = editMeans.findIndex( mean => mean.replace(/ /g,'') === means[key].replace(/ /g,'') );\r\n                if (idx > -1) {\r\n                    means[key] = editMeans[idx];\r\n                    editMeans.splice(idx, 1);\r\n                }\r\n            }\r\n\r\n            return state.setIn([index,'means'], List(means.concat(editMeans)));\r\n\r\n        }\r\n\r\n        return state;\r\n    },\r\n    [UPDATE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload.id );\r\n        const isExist = state.delete(index).findIndex( word => word.get('word') === action.payload.word ) > -1;\r\n        \r\n        if ( isExist ) {\r\n            alert('it is dupplicate');\r\n            return state;\r\n        }\r\n\r\n        if ( !action.payload.isEqual( state.get(index).toJS() ) ) {\r\n            const word = action.payload.toImmutable();\r\n            return state.mergeIn([index],  word);\r\n        }\r\n\r\n    },\r\n    [REMOVE] : (state, action) => {\r\n        const result = state.filter (\r\n            word => action.payload.findIndex( id => word.get('id') === id ) <0\r\n        );\r\n\r\n        return result;\r\n\r\n    },\r\n    [LOAD_WORDS] : (state, action) => {\r\n        return fromJS(action.payload);\r\n    }\r\n}, initialState);","import {Map, List, fromJS} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CHANGE = 'test/CHANGE';\r\n\r\nexport const change = createAction(CHANGE); // answer\r\n\r\nconst initialState = Map ({\r\n    answers : List([])\r\n})\r\n\r\nexport default handleActions({\r\n    [CHANGE]: (state, action) => {\r\n        const {answer} = action.payload;\r\n\r\n        return state.set('answers', List( answer.split(',')\r\n                                                .map(mean => mean.toUpperCase().trim())\r\n                                                .sort()\r\n                                        )\r\n                        )\r\n    }\r\n}, initialState);","import {Map,List} from  'immutable';\r\nimport {createAction, handleActions} from  'redux-actions';\r\n\r\nconst SHOW = 'modal/SHOW';\r\nconst HIDE = 'modal/HIDE';\r\nconst CHANGE = 'modal/CHANGE';\r\nconst TOGGLE_MEAN_MODE = 'modal/TOOGLE_MEAN_MODE';\r\nconst ADD_MEAN = 'modal/ADD_MEAN';\r\nconst REMOVE_MEAN = 'modal/REMOVE_MEAN';\r\nconst CHANGE_MEAN = 'modal/CHANGE_MEAN';\r\n\r\nexport const show = createAction(SHOW);\r\nexport const hide = createAction(HIDE);\r\nexport const change = createAction(CHANGE); // {word, mean}\r\nexport const toggleMeanMode = createAction(TOGGLE_MEAN_MODE); // index;\r\nexport const addMean = createAction(ADD_MEAN); // Map{ mean:string, id:string, isEditMode:boolean }\r\nexport const removeMean = createAction(REMOVE_MEAN); // index\r\nexport const changeMean = createAction(CHANGE_MEAN); // input{ index, mean}\r\n\r\n\r\nconst initialState = Map ( {\r\n    visible:false,\r\n    mode:'',\r\n    word: Map ( {\r\n        id : null,\r\n        word : '',\r\n        means: List([]), // means : [{id:string, mean:string, isEidtMode:boolean}]\r\n        wrongCounter : -1\r\n    })\r\n});\r\n\r\nexport default handleActions ({\r\n    [SHOW]: (state, action) => {\r\n        let word = initialState.get('word'), mode = 'add';\r\n        if ( typeof (action.payload) !== 'undefined') {\r\n            word = action.payload;\r\n            mode = 'change';\r\n        }\r\n\r\n        return state.set('visible',true).set('word', word).set('mode',mode);\r\n    },\r\n    [HIDE]: (state, action) => {\r\n        return state.set('visible', false).set('word', Map ( {\r\n            id : '',\r\n            word : '',\r\n            means: List([]), // means : [{mean:string, isEidtMode:boolean}]\r\n            wrongCounter : -1\r\n        })); \r\n    },\r\n    [CHANGE]: (state, action) => {\r\n        const word = state.getIn(['word']);\r\n        const input = action.payload;\r\n\r\n        if ( word.get('word') !== input.word ) {\r\n            return state.setIn(['word', 'word'], input.word ); \r\n        }\r\n\r\n    },\r\n    [TOGGLE_MEAN_MODE] : (state, action) => {\r\n        const index = action.payload;\r\n        const current = state.getIn(['word','means', index, 'isEditMode']);\r\n\r\n        return state.setIn(['word', 'means', index, 'isEditMode'], !current );\r\n    },\r\n    [ADD_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n\r\n        return state.setIn(['word','means'], means.push(action.payload));\r\n    },\r\n    [REMOVE_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n        const index = action.payload;\r\n    \r\n        return state.setIn(['word','means'], means.delete(index));\r\n    },\r\n    [CHANGE_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n        const {index, mean} = action.payload;\r\n        \r\n        return state.mergeIn(['word', 'means', index], Map ({isEditMode:false, mean:mean}) );\r\n\r\n    }\r\n}, initialState);","import {Map} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst SEARCH = 'base/SEARCH';\r\nconst SET_MODE = 'base/SET_MODE';\r\n\r\nexport const search = createAction(SEARCH); //keyword\r\nexport const setMode = createAction(SET_MODE); //mode\r\n\r\nconst initialState = Map({\r\n    keyword:'',\r\n    mode:''\r\n});\r\n\r\nexport default handleActions ({\r\n    [SEARCH] : (state, action) => \r\n        state.set('keyword', action.payload)\r\n    ,\r\n    [SET_MODE] : (state, action) => \r\n        state.set('mode', action.payload)\r\n}, initialState);","import React, {Component} from 'react';\r\nimport {Map} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Word extends Component {\r\n    static propTypes = {\r\n        word : PropTypes.string\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidMount(prevProps, prevState, snapshot) {\r\n        const current = this.ref.current;\r\n        \r\n        if (current.offsetWidth > current.parentElement.offsetWidth ) {\r\n            current.className = cx('overflowText');\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { word } = this.props;\r\n\r\n        return (\r\n            <div\r\n                className={cx('word')}\r\n            >\r\n                <span\r\n                    ref={this.ref}\r\n                >\r\n                    {word}\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Word;","import React, {Component} from 'react';\r\nimport {List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//Component\r\n//import Input from './Input';\r\n\r\nclass TestForm extends Component {\r\n\r\n    handleChange = (e) => {\r\n        const { onChange } = this.props;\r\n        onChange({\r\n            answer : e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { keyword, means, onTest } = this.props;\r\n\r\n        const {handleChange} = this;\r\n\r\n        return (\r\n\r\n            <div>\r\n                <form>\r\n                    <input \r\n                        value={keyword} \r\n                        placeholder=\"단어의 뜻을 입력하세요.\" \r\n                        onChange={handleChange}\r\n                    />\r\n                </form>\r\n                <button\r\n                    onClick={onTest}\r\n                >\r\n                CHECK\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TestForm;","import React, {Component} from 'react';\r\nimport {Map} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\n//Component\r\nimport TestForm from './TestForm';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Means extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidMount(prevProps, prevState, snapshot) {\r\n        const current = this.ref.current;\r\n        \r\n        if (current.offsetWidth > current.parentElement.offsetWidth ) {\r\n            current.className = cx('overflowText');\r\n        }\r\n\r\n    }\r\n\r\n    static propTypes = {\r\n        means : ImmutablePropTypes.listOf(\r\n            PropTypes.string\r\n        ),\r\n        mode : PropTypes.string,\r\n        onChange : PropTypes.func,\r\n        onTest : PropTypes.func\r\n    }\r\n\r\n    render() {\r\n        const { means, mode, onChange, onTest, onEdit } = this.props;\r\n        let contents;\r\n\r\n        if ( mode === 'test' ) {\r\n            contents = (\r\n                <TestForm\r\n                    means={means}\r\n                    onChange={onChange}\r\n                    onTest={onTest}\r\n                />\r\n            )\r\n        } else {\r\n            contents = means.toJS()[0];\r\n            for ( let i=1; i<means.size; i++ ) {\r\n                contents += (\", \"+means.toJS()[i]);\r\n            }\r\n        }\r\n        \r\n        return (\r\n            <div\r\n                onClick={onEdit}\r\n                className={cx('mean')}\r\n            >\r\n                <span\r\n                    ref={this.ref}\r\n                >\r\n                    {contents}\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Means;","import React, {Component} from 'react';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport * as styles from '../style/button.module.scss';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst Button = ({children, ...rest}) => {\r\n\r\n    return (\r\n        <div \r\n            className={cx(rest.className)}\r\n            onClick={rest.onClick}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, {Component} from 'react';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport buttonStyle from '../style/button.module.scss';\r\nimport wordStyle from '../style/word.module.scss';\r\n\r\nimport Button from './Button';\r\n\r\n//icons\r\nimport {IoMdVolumeHigh} from 'react-icons/io';\r\nimport {MdDelete} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(wordStyle);\r\nconst cx2 = classNames.bind(buttonStyle);\r\n\r\nclass Result extends Component {\r\n    handleSound = (e) => {\r\n        e.stopPropagation();\r\n        const { word } = this.props;\r\n        let msg = new SpeechSynthesisUtterance(word);\r\n        msg.lang='en-us';\r\n        msg.volume=1;\r\n        msg.rate=1;\r\n        msg.pitch=1;\r\n        \r\n        speechSynthesis.speak(msg);\r\n    }\r\n    \r\n    render() {\r\n        const {isComplete, onSound} = this.props;\r\n        const {handleSound, handleRemove} = this;\r\n        \r\n        return (\r\n            <div className={cx('result')}>\r\n                <Button \r\n                    className={'wordContainerButton'} \r\n                    onClick={handleSound}\r\n                >\r\n                    <IoMdVolumeHigh />\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Result;","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport styles from '../style/word.module.scss';\r\n\r\nimport Word from './Word';\r\nimport Means from './Means';\r\nimport Result from './Result';\r\n\r\nimport { FiSquare, FiCheckSquare} from 'react-icons/fi';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass WordBox extends Component {\r\n    \r\n    static propTypes = {\r\n        word: ImmutablePropTypes.mapContains({\r\n            means : ImmutablePropTypes.listOf(\r\n                PropTypes.string\r\n            ),\r\n            id : PropTypes.string,\r\n            word : PropTypes.string,\r\n            mode : PropTypes.string\r\n        })\r\n        // mode : PropTypes.string,\r\n        // onCheck : PropTypes.func,\r\n        // onGiveUp : PropTypes.func\r\n    }\r\n\r\n    handleCheck = (e) => {\r\n        e.stopPropagation();\r\n\r\n    }\r\n\r\n    handleEdit = (e) => {\r\n        const {onEdit, word} = this.props;\r\n        onEdit(word.get('id'));\r\n    }\r\n\r\n    render() {\r\n        const { word,mode, onRemove } = this.props;\r\n        const {handleEdit, handleCheck} = this;\r\n        return (\r\n            <div className={cx('container')}\r\n                key={word.get('id')}\r\n                onClick={handleEdit}\r\n            >   \r\n                <div\r\n                    className={cx('check')}\r\n                    >\r\n                    <input\r\n                        id={word.get('id')}\r\n                        onClick={handleCheck}\r\n                        type={'checkbox'}\r\n                        />\r\n                    <label \r\n                        onClick={handleCheck}\r\n                        htmlFor={word.get('id')}\r\n                    >\r\n                        <FiSquare/><FiCheckSquare/>\r\n                    </label>\r\n                </div>\r\n                <Word \r\n                    word={word.get('word')} \r\n                    />\r\n                <Means\r\n                    means={word.get('means')}\r\n                    mode={mode}\r\n                />\r\n                <Result\r\n                    id={word.get('id')}\r\n                    word={word.get('word')}\r\n                    onRemove={onRemove}\r\n                    isComplete={word.get('isComplete')}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WordBox;","import React, {Component} from 'react';\r\n\r\nimport WordBox from './WordBox';\r\n\r\nclass WordBoxList extends Component {\r\n    handleChange = (e) => {\r\n        const {onSearch} = this.props;\r\n        const {value} = e.target;\r\n\r\n        onSearch(value);\r\n    }\r\n\r\n    render() {\r\n        const { words, mode, onEdit, onRemove, keyword } = this.props;\r\n        const {handleChange} = this;\r\n        const wordList = words.\r\n                            filter(\r\n                                word => word.get('means').filter( mean => mean.indexOf(keyword) !== -1 ).size > 0\r\n                                        || word.get('word').indexOf(keyword) !== -1\r\n                            )\r\n                            .map (\r\n                                word => \r\n                                    <WordBox\r\n                                        key={word.get('id')}\r\n                                        keyword={keyword}\r\n                                        word={word}\r\n                                        mode={mode}\r\n                                        onEdit={onEdit}\r\n                                        onRemove={onRemove}\r\n                                    />\r\n                            )\r\n\r\n        return (\r\n            <div\r\n            >\r\n                {wordList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default WordBoxList;","import {Map, List, fromJS} from 'immutable';\r\nimport shortid from 'shortid';\r\n\r\nconst defaultWord = {\r\n    means : [],\r\n    word : '',\r\n    id : '',\r\n    isComplete : false\r\n};\r\n\r\nclass Word {\r\n    constructor( word ) {\r\n        for ( let key in defaultWord ) {\r\n            this[key] = word[key] || defaultWord[key];\r\n        }\r\n    }\r\n\r\n    isEqual = ( word ) => {\r\n        let isEqual = true;\r\n        for (let key in defaultWord) {\r\n            isEqual = isEqual && this[key].toString() === word[key].toString();\r\n            if (!isEqual) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return isEqual;\r\n    }\r\n\r\n    fromModal = () => {\r\n        debugger;\r\n        this.means = this.means.map( mean => mean.get('mean') );\r\n\r\n        return this;\r\n    }\r\n\r\n    toModal = () => {\r\n        //withImmutable\r\n        const word = fromJS( Map(this) )\r\n                    .set('means', List(\r\n                        this.means.map (\r\n                            mean => Map(\r\n                                { id:shortid.generate(), mean:mean, isEditMod:false}\r\n                            )\r\n                        )\r\n                    ));\r\n        return word;\r\n    }\r\n\r\n    toImmutable = () => {\r\n        debugger;\r\n        return Map({\r\n            means : List(this.means),\r\n            word : this.word,\r\n            id : this.id,\r\n            isComplete : this.isComplete\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport default Word;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Map, List} from 'immutable';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as testActions from '../modules/test';\r\nimport * as modalActions from '../modules/modal';\r\nimport * as baseActions from '../modules/base';\r\n\r\nimport WordBoxList from '../components/WordBoxList';\r\nimport Word from '../class/Word';\r\n\r\nimport classNames from 'classnames/bind';\r\n\r\nclass WordBoxListContainer extends Component {\r\n    \r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.words.toString() !== this.props.words.toString() ) {\r\n            localStorage.setItem('words', JSON.stringify(this.props.words));\r\n        }\r\n    }\r\n\r\n    handleEdit = (id) => {\r\n        const {ModalActions, words} = this.props;\r\n        const index = words.findIndex( word => word.get('id') === id );\r\n        const word = new Word(words.get(index).toJS()).toModal();\r\n\r\n        ModalActions.show(word);\r\n    }\r\n\r\n    handleRemove = (id) => {\r\n        const {WordsActions} = this.props;\r\n\r\n        WordsActions.remove(id);\r\n    }\r\n\r\n    handleSearch = (keyword) => {\r\n        const {BaseActions} =this.props;\r\n\r\n        BaseActions.search(keyword);\r\n    }\r\n\r\n    render() {\r\n        const {words, keyword, mode} = this.props;\r\n        const {handleEdit, handleRemove, handleSearch} = this;\r\n\r\n        return (\r\n            <WordBoxList\r\n                words={words}\r\n                keyword={keyword}\r\n                mode={mode}\r\n                onEdit={handleEdit}\r\n                onRemove={handleRemove}\r\n                onSearch={handleSearch}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        keyword: state.base.get('keyword'),\r\n        words : state.words,\r\n        mode : state.base.get('mode')\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        ModalActions: bindActionCreators(modalActions, dispatch),\r\n        BaseActions: bindActionCreators(baseActions, dispatch),\r\n        TestActions: bindActionCreators(testActions, dispatch)\r\n    })\r\n) (WordBoxListContainer);","import React from 'react';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Button from './Button';\r\n\r\nimport * as button from '../style/button.module.scss';\r\n\r\nconst cx = classNames.bind(button);\r\n\r\nconst Input = ({children, ...rest}) => {\r\n    return (\r\n        <input\r\n            placeholder={rest.placeholder}\r\n            defaultValue={rest.defaultValue}\r\n            onChange={rest.onChange}\r\n            onBlur={rest.onBlur}\r\n        />\r\n    );\r\n}\r\n        \r\nconst InputWithButton = React.forwardRef( (props,ref) => (\r\n    <div className={cx('inputWrapper')}>\r\n            <input\r\n                ref={ref}\r\n                placeholder={props.placeholder}\r\n                defaultValue={props.defaultValue}\r\n                onKeyDown={props.onKeyDown}\r\n                onChange={props.onChange}\r\n                onBlur={props.onBlur}\r\n            />\r\n            <Button\r\n                className={cx(props.buttonClassName)}\r\n                placeholder={props.placeholder}\r\n                onClick={props.onClick}\r\n            >\r\n                {props.children}\r\n            </Button>\r\n        </div>\r\n));\r\n\r\n\r\nexport {Input, InputWithButton};","import React, {Component} from 'react';\r\nimport {InputWithButton} from './Input';\r\n\r\nimport styles from '../style/modal.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Button from './Button';\r\n\r\n//icon\r\nimport {MdDelete, MdEdit} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\n\r\nclass Mean extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.ref.current !== null) {\r\n            this.ref.current.focus();\r\n        }\r\n\r\n    }\r\n\r\n    handleMode = () => {\r\n        const {mean, toggleMode} = this.props;\r\n\r\n        toggleMode(mean.get('id'));\r\n    }\r\n\r\n    handleRemove = () => {\r\n        const {mean, onRemove} = this.props;\r\n        onRemove(mean.get('id'));\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {value} = e.target;\r\n        const {mean, onChange} = this.props;\r\n        onChange(mean.get('id'), value);\r\n    }\r\n\r\n    render() {\r\n        const {mean} = this.props;\r\n        const {handleMode, handleRemove, handleChange} = this;\r\n        const element = mean.get('isEditMode') ?\r\n                        (\r\n                            <InputWithButton\r\n                                defaultValue={mean.get('mean')}\r\n                                buttonClassName={'innerButton-right'}\r\n                                onBlur={handleChange}\r\n                                ref={this.ref}\r\n                            >\r\n                                <MdEdit/>\r\n                            </InputWithButton>\r\n                        )\r\n                        :\r\n                        (   \r\n                            <div  className={cx('mean')}>\r\n                                <div className={cx('text')}>{mean.get('mean')}</div>\r\n                                <div \r\n                                    className={cx('button')}\r\n                                >\r\n                                    <Button\r\n                                        className={'button'}\r\n                                        onClick={handleMode}\r\n                                        >\r\n                                        <MdEdit/>\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={'button'}\r\n                                        onClick={handleRemove}\r\n                                    >\r\n                                        <MdDelete/>\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n\r\n        return (\r\n            <div>\r\n                {element}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Mean;","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\n\r\nimport styles from '../style/modal.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Mean from './Mean';\r\n\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass MeanList extends Component {\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.props.means.toString()\r\n                === nextProps.means.toString() ) {\r\n                    return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    handleBlur = (e) => {\r\n        const {value} = e.target;\r\n        const {onChangeMean, means } = this.props;\r\n        const findIndex = means.findIndex(mean => mean.get('mean').trim() === value.trim());\r\n        let mean = value;\r\n        onChangeMean( findIndex, mean );\r\n        \r\n    }\r\n    \r\n    handleKeyPress = (e) => {\r\n        if ( (e.keyCode === 13 || e.keyCode === 9 || e.key === 'Enter') && e.target.value !== '' ) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n    \r\n    handleRemove = (e) => {\r\n        const { onRemoveMean } = this.props;\r\n        const index = e.target.closest('div').getAttribute('index');\r\n        \r\n        onRemoveMean(index);\r\n    }\r\n    \r\n    render() {\r\n        const { means, onRemove, toggleMode, onChange } = this.props;\r\n        const { handleRemove, handleBlur, handleKeyPress} = this;\r\n\r\n        const meanList = means.map( \r\n            mean => (\r\n                <Mean\r\n                    key={mean.get('id')}\r\n                    mean={mean}\r\n                    toggleMode={toggleMode}\r\n                    onChange={onChange}\r\n                    onRemove={onRemove}\r\n                />\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div className={cx('meansList')}>\r\n                {meanList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MeanList;","import React, {Component} from 'react';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport styles from '../style/modal.module.scss';\r\n\r\nimport {InputWithButton} from './Input';\r\nimport MeanList from './MeanList';\r\n\r\nimport {MdAdd} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Modal extends Component {\r\n\r\n    handleBlur = ( e ) => {\r\n        const {onAddMean} = this.props;\r\n        const mean = e.target.value;\r\n\r\n        if (mean === '' || mean === null || typeof(mean) === 'undefined') {\r\n            return;\r\n        }\r\n        \r\n        e.target.value='';\r\n\r\n        onAddMean( mean );\r\n    }\r\n\r\n    handleKeyDown = (e) => {\r\n        if ( (e.keyCode === 13 || e.keyCode === 9) && e.target.value !== '' ) {\r\n            e.preventDefault();\r\n            e.target.blur();\r\n            e.target.focus();\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {onChange} =this.props;\r\n        onChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const { handleBlur, handleChange, handleKeyDown } = this;\r\n        const {modal, toggleMeanMode, onChangeMean, onRemoveMean, onAdd, onCancel, mode} = this.props;\r\n\r\n        let modeString = 'Add';\r\n\r\n        if (mode === 'change') {\r\n            modeString = 'Edit';\r\n        }\r\n\r\n        return (\r\n            <div className={cx('wrapper')}>\r\n                <div className={cx('box')}>\r\n                    <div className={cx('title')}> \r\n                        <p>Word {modeString}</p>\r\n                    </div>\r\n                    <div className={cx('contents')}>\r\n                        <div>\r\n                            <input\r\n                                placeholder='Word'\r\n                                defaultValue={modal.getIn(['word','word'])}\r\n                                onChange={handleChange}\r\n                                required='required'\r\n                            />\r\n                            <MeanList\r\n                                means = {modal.getIn(['word', 'means'])}\r\n                                onChange = {onChangeMean}\r\n                                onRemove = {onRemoveMean}\r\n                                toggleMode = {toggleMeanMode}\r\n                            />\r\n                            <InputWithButton\r\n                                className={'inputWrapper'}\r\n                                buttonClassName={'innerButton-right'}\r\n                                placeholder='Mean'\r\n                                onBlur={handleBlur}\r\n                                onKeyDown={handleKeyDown}\r\n                            >\r\n                                <MdAdd/>\r\n                            </InputWithButton>\r\n                        </div>\r\n                    </div>\r\n                    <div \r\n                        className={cx('add')}\r\n                        onClick={onAdd}\r\n                    >\r\n                        <span>{modeString}</span>\r\n                    </div>\r\n                    <div \r\n                        className={cx('cancel')}\r\n                        onClick={onCancel}\r\n                    >\r\n                        <span>Cancel</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport shortid from 'shortid';\r\n\r\nimport Word from '../class/Word';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as modalActions from '../modules/modal';\r\n\r\nimport Modal from '../components/Modal'\r\n\r\nclass WordModalContainer extends Component {\r\n    handleMean = {\r\n\r\n        add : ( mean ) => {\r\n            const {ModalActions, modal } = this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( item => item.get('mean').replace(/ /g,'') === mean.replace(/ /g,'') );\r\n            // 입력한 뜻이 존재 하지 않을 경우\r\n            if (index < 0 ) {\r\n                const meanObj = Map({\r\n                    id : shortid.generate(),\r\n                    mean :mean,\r\n                    isEditMode : false\r\n                });\r\n                ModalActions.addMean( meanObj );\r\n            } else {\r\n                alert('it is duplicate');\r\n            }\r\n\r\n        },\r\n\r\n        remove : (id) => {\r\n            const { ModalActions, modal }= this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id);\r\n\r\n            if (index >= 0 ){\r\n                ModalActions.removeMean(index);\r\n            }\r\n            \r\n        },\r\n\r\n        change: (id, value)=> {\r\n            const { ModalActions, modal }= this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id );\r\n            const otherMeans = modal.getIn(['word', 'means']).delete(index);\r\n\r\n            let mean = value;\r\n\r\n            if ( otherMeans.findIndex( mean => mean.get('mean').replace(/ /g,'') === value.replace(/ /g,'') ) > -1 ) {\r\n                alert('it is duplicate');\r\n                mean = modal.getIn(['word', 'means', index, 'mean']);\r\n            }\r\n\r\n            if (value === '' ) {\r\n                if ( window.confirm(\"you didn't enter anything. do you want remove this?\") ) {\r\n                    ModalActions.removeMean(index);\r\n                }\r\n                return;\r\n            }\r\n\r\n            ModalActions.changeMean( {index, mean} );\r\n        },\r\n        \r\n        toggleMode: (id) => {\r\n            const {ModalActions, modal} = this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id);\r\n\r\n            ModalActions.toggleMeanMode(index);\r\n        }\r\n\r\n    }\r\n\r\n    handleWord = {\r\n        add: () => {\r\n            const {WordsActions, ModalActions, modal} = this.props;\r\n            const word = modal.getIn(['word', 'word']);\r\n            const means = modal.getIn(['word', 'means']);\r\n\r\n            let msg = 'Please enter this:';\r\n            let validate = true;\r\n            if (word === '' ) {\r\n                validate = false;\r\n                msg += '\\n-Word'; \r\n            } \r\n            \r\n            if ( means.isEmpty() ) {\r\n                validate = false;\r\n                msg += '\\n-Means';\r\n            }\r\n\r\n            if ( !validate ) {\r\n                window.alert(msg);\r\n                return;\r\n            }\r\n\r\n            WordsActions.create( \r\n                new Word (\r\n                    {\r\n                        word:word,\r\n                        means:means,\r\n                        id:shortid.generate()\r\n                    }\r\n                ).fromModal().toImmutable()\r\n            );\r\n            ModalActions.hide();\r\n        },\r\n        change: () => {\r\n            const {WordsActions, ModalActions, modal} =this.props;\r\n\r\n            const word = modal.getIn(['word', 'word']);\r\n            const means = modal.getIn(['word', 'means']);\r\n\r\n            let msg = 'Please enter this:';\r\n            let validate = true;\r\n            if (word === '' ) {\r\n                validate = false;\r\n                msg += '\\n-Word'; \r\n            } \r\n            \r\n            if ( means.isEmpty() ) {\r\n                validate = false;\r\n                msg += '\\n-Means';\r\n            }\r\n\r\n            if ( !validate ) {\r\n                window.alert(msg);\r\n                return;\r\n            }\r\n            \r\n            WordsActions.update(\r\n                new Word( \r\n                    modal.get('word').toJS() \r\n                ).fromModal()\r\n            );\r\n            ModalActions.hide();\r\n        }\r\n    }\r\n\r\n    handleCancel = () => {\r\n        const {ModalActions} = this.props;\r\n        ModalActions.hide();\r\n    }\r\n\r\n    handleChange = (word) => {\r\n        const {ModalActions} = this.props;\r\n\r\n        const input = {\r\n            word : word,\r\n            mean : ''\r\n        }\r\n\r\n        ModalActions.change(\r\n            input\r\n        );\r\n    }\r\n\r\n    render () {\r\n        const {handleMean, handleChange, handleWord, handleCancel} = this;\r\n        const {modal, words} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    modal.get('visible') && (\r\n                                    <Modal\r\n                                        modal={modal}\r\n                                        mode={modal.get('mode')}\r\n                                        onChange={handleChange}\r\n                                        toggleMeanMode={handleMean['toggleMode']}\r\n                                        onAddMean={handleMean['add']}\r\n                                        onChangeMean={handleMean['change']}\r\n                                        onRemoveMean={handleMean['remove']}\r\n                                        onAdd={handleWord[modal.get('mode')]}\r\n                                        onCancel={handleCancel}\r\n                                    />\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        modal:state.modal\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        ModalActions : bindActionCreators(modalActions, dispatch)\r\n    })\r\n) (WordModalContainer);","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport {bindActionCreators} from 'redux';\nimport classNames from 'classnames/bind';\nimport {MdAdd, MdRemove} from 'react-icons/md';\nimport {Map, List} from 'immutable';\n\nimport * as modalActions from '../modules/modal'\nimport * as wordsActions from '../modules/words'\nimport * as styles from '../style/layout.module.scss'\n\nimport Button from '../components/Button';\n\nconst cx = classNames.bind(styles);\n\nclass FooterContainer extends Component {\n\n    handleShow = () => {\n        const {ModalActions} = this.props;\n\n        ModalActions.show();\n    }\n\n    handleRemove = () => {\n        const {WordsActions} = this.props;\n        const idList = List(document.querySelectorAll('input[type=\"checkbox\"]:checked'))\n                            .map(element => element.id);\n                            \n        if ( idList.isEmpty() ) {\n            window.alert('Please select more than one!');\n            return;\n        }\n\n        if ( window.confirm('do you want remove?')) {\n            WordsActions.remove(idList);\n        }\n        \n    }\n\n    render () {\n        const {handleShow, handleRemove} = this;\n\n        return (\n            <div \n                className={cx('footer')}\n            >\n                <Button\n                    onClick={handleShow}\n                >\n                    <MdAdd/>\n                </Button>\n                <Button\n                    onClick={handleRemove}\n                >\n                    <MdRemove/>\n                </Button>\n            </div>\n        )\n    }\n};\n\nexport default connect(\n    null,\n    (dispatch) => ({\n        ModalActions : bindActionCreators(modalActions, dispatch),\n        WordsActions : bindActionCreators(wordsActions, dispatch)\n    })\n) (FooterContainer);","import React, { Component } from 'react';\nimport classNames from 'classnames/bind';\n\n//components\nimport Header from './components/Header';\n\n//containers\nimport WordBoxListContainer from './containers/WordBoxListContainer';\nimport WordModalContainer from './containers/WordModalContainer';\nimport FooterContainer from './containers/FooterContainer';\n\nimport * as wordsActions from './modules/words';\n\nimport * as layout from './style/layout.module.scss';\nimport { connect } from 'react-redux'\nimport {bindActionCreators} from 'redux';\n\nconst cx = classNames.bind(layout);\n\nclass App extends Component {\n  \n\n  componentDidMount() {\n\n    const words = localStorage.getItem('words');\n    if ( words !== null && typeof (words) !== 'undefined' ) {\n      const {WordsActions} = this.props;\n      WordsActions.loadWords(JSON.parse(words));\n    }\n\n  }\n\n  render() {\n\n    const {handleClick} = this;\n    return (\n      <div className={cx('wrapper')}>\n        <Header/>\n        \n        <div className={cx('body')}>\n          <WordBoxListContainer />\n        </div>\n\n        <FooterContainer/>\n        <WordModalContainer/>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n  }),\n  (dispatch) => ({\n    WordsActions : bindActionCreators(wordsActions, dispatch)\n  })\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux';\r\n\r\nimport words from './words';\r\nimport modal from './modal';\r\nimport base from './base';\r\n\r\nexport default combineReducers({\r\n    words,modal,base\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from 'redux';\nimport reducers from './modules';\nimport {Provider} from 'react-redux';\n\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <Provider store ={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root')\n);\n"],"sourceRoot":""}