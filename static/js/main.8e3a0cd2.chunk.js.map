{"version":3,"sources":["style/word.module.scss","style/layout.module.scss","style/button.module.scss","style/modal.module.scss","components/Header.js","modules/words.js","modules/test.js","modules/modal.js","components/Word.js","components/TestForm.js","components/Means.js","components/Button.js","components/Result.js","components/WordBox.js","components/WordBoxList.js","class/Word.js","containers/WordBoxListContainer.js","components/Input.js","components/Mean.js","components/MeanList.js","components/Modal.js","containers/WordModalContainer.js","containers/FooterContainer.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["module","exports","container","show","check","word","mean","result","header","wrapper","body","footer","wordContainerButton","button","inputWrapper","innerButton-right","title","box","contents","meansList","text","submit","add","cancel","cx","classNames","bind","styles","Header","react_default","a","createElement","className","create","createAction","update","remove","loadWords","initialState","List","Map","means","id","isComplete","handleActions","_handleActions","Object","defineProperty","state","action","index","findIndex","get","payload","push","window","confirm","_ret","getIn","toJS","editMeans","_loop","key","idx","replace","splice","v","setIn","concat","delete","alert","isEqual","toImmutable","mergeIn","filter","fromJS","change","answers","answer","set","split","map","toUpperCase","trim","sort","hide","toggleMeanMode","addMean","removeMean","changeMean","visible","mode","wrongCounter","modal_handleActions","input","current","_action$payload","isEditMode","Word","this","props","Component","TestForm","handleChange","e","onChange","_this","target","value","_this$props","keyword","onTest","placeholder","onClick","Means","onEdit","components_TestForm","i","size","Button","_ref","children","rest","objectWithoutProperties","wordStyle","Result","buttonStyle","handleSound","stopPropagation","msg","SpeechSynthesisUtterance","lang","volume","rate","pitch","speechSynthesis","speak","onSound","handleRemove","components_Button","index_esm","WordBox","handleCheck","handleEdit","_this$props2","onRemove","type","htmlFor","fi_index_esm","components_Word","components_Means","components_Result","WordBoxList","words","wordList","components_WordBox","defaultWord","classCallCheck","toString","fromModal","toModal","shortid","generate","isEditMod","WordBoxListContainer","ModalActions","WordsActions","prevProps","prevState","localStorage","setItem","JSON","stringify","components_WordBoxList","search","connect","dispatch","bindActionCreators","wordsActions","modalActions","TestActions","testActions","InputWithButton","React","forwardRef","ref","defaultValue","onKeyDown","onBlur","buttonClassName","Mean","possibleConstructorReturn","getPrototypeOf","call","handleMode","toggleMode","_this$props3","createRef","snapshot","focus","element","md_index_esm","MeanList","handleBlur","onChangeMean","handleKeyPress","keyCode","blur","onRemoveMean","closest","getAttribute","nextProps","nextState","meanList","components_Mean","Modal","onAddMean","handleKeyDown","preventDefault","modal","onAdd","onCancel","modeString","required","components_MeanList","WordModalContainer","handleMean","item","meanObj","otherMeans","_this$props4","handleWord","_this$props5","_this$props6","handleCancel","components_Modal","FooterContainer","handleShow","idList","document","querySelectorAll","isEmpty","layout","App","getItem","parse","handleClick","components_Header","containers_WordBoxListContainer","containers_FooterContainer","containers_WordModalContainer","Boolean","location","hostname","match","combineReducers","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","getElementById"],"mappings":"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","file":"static/js/main.8e3a0cd2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"word_container__14hbr\",\"show\":\"word_show___CGe3\",\"check\":\"word_check__2I7jF\",\"word\":\"word_word__1oIdx\",\"mean\":\"word_mean__hZYdF\",\"result\":\"word_result__Zdcg-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"layout_header__1sSBx\",\"wrapper\":\"layout_wrapper__Gh19r\",\"body\":\"layout_body__3pUNW\",\"footer\":\"layout_footer__1ZPi4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wordContainerButton\":\"button_wordContainerButton__2uaGW\",\"button\":\"button_button__1jN1g\",\"inputWrapper\":\"button_inputWrapper__2bo6T\",\"innerButton-right\":\"button_innerButton-right__37eJd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"modal_wrapper__MFLJt\",\"title\":\"modal_title__2czFJ\",\"box\":\"modal_box__45WXb\",\"contents\":\"modal_contents__2KNUX\",\"meansList\":\"modal_meansList__C5E-v\",\"mean\":\"modal_mean__EMkld\",\"button\":\"modal_button__Z3JfN\",\"text\":\"modal_text__1Vovw\",\"submit\":\"modal_submit__1yWPU\",\"add\":\"modal_add__2ltqx\",\"cancel\":\"modal_cancel__1yLS0\"};","import React from 'react';\n\nimport classNames from 'classnames/bind';\n\nimport * as styles from '../style/layout.module.scss'\n\nconst cx = classNames.bind(styles);\n\n\nconst Header = () => (\n    <div className={cx('header')}> 단어장 </div>\n);\n\nexport default Header;","import {Map, List, fromJS} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CREATE = 'word/CREATE';\r\nconst UPDATE = 'word/UPDATE';\r\nconst REMOVE = 'word/REMOVE';\r\nconst LOAD_WORDS = 'word/LOAD_WORDS';\r\n\r\nexport const create = createAction(CREATE); // Map{id, word, List[means], isComplete, wrongCount }\r\nexport const update = createAction(UPDATE); // id, word{ word, List[means], isComplete, wrongCount } \r\nexport const remove = createAction(REMOVE); // List[id]\r\nexport const loadWords = createAction(LOAD_WORDS); \r\n\r\nconst initialState = List([\r\n    Map({\r\n        means : List([\"이곳을 클릭하면 수정이 가능해요!\"]),\r\n        word : \"단어가 없네요!\",\r\n        id : 'Default',\r\n        isComplete : false\r\n    })\r\n]);\r\n\r\nexport default handleActions({\r\n    [CREATE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('word') === action.payload.get('word') );\r\n\r\n        if ( index < 0) {\r\n            return state.push( action.payload );\r\n        }\r\n\r\n        if ( window.confirm('Do you want Merge?') ) {\r\n            let means = state.getIn([index, 'means']).toJS();\r\n            const editMeans = action.payload.get('means').toJS();\r\n\r\n            for (let key in means) {                \r\n                let idx = editMeans.findIndex( mean => mean.replace(/ /g,'') === means[key].replace(/ /g,'') );\r\n                if (idx > -1) {\r\n                    means[key] = editMeans[idx];\r\n                    editMeans.splice(idx, 1);\r\n                }\r\n            }\r\n\r\n            return state.setIn([index,'means'], List(means.concat(editMeans)));\r\n\r\n        }\r\n\r\n        return state;\r\n    },\r\n    [UPDATE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload.id );\r\n        const isExist = state.delete(index).findIndex( word => word.get('word') === action.payload.word ) > -1;\r\n        \r\n        if ( isExist ) {\r\n            alert('it is dupplicate');\r\n            return state;\r\n        }\r\n\r\n        if ( !action.payload.isEqual( state.get(index).toJS() ) ) {\r\n            const word = action.payload.toImmutable();\r\n            return state.mergeIn([index],  word);\r\n        }\r\n\r\n    },\r\n    [REMOVE] : (state, action) => {\r\n        const result = state.filter (\r\n            word => action.payload.findIndex( id => word.get('id') === id ) <0\r\n        );\r\n\r\n        return result;\r\n\r\n    },\r\n    [LOAD_WORDS] : (state, action) => {\r\n        return fromJS(action.payload);\r\n    }\r\n}, initialState);","import {Map, List, fromJS} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CHANGE = 'test/CHANGE';\r\n\r\nexport const change = createAction(CHANGE); // answer\r\n\r\nconst initialState = Map ({\r\n    answers : List([])\r\n})\r\n\r\nexport default handleActions({\r\n    [CHANGE]: (state, action) => {\r\n        const {answer} = action.payload;\r\n\r\n        return state.set('answers', List( answer.split(',')\r\n                                                .map(mean => mean.toUpperCase().trim())\r\n                                                .sort()\r\n                                        )\r\n                        )\r\n    }\r\n}, initialState);","import {Map,List} from  'immutable';\r\nimport {createAction, handleActions} from  'redux-actions';\r\nimport {Record} from 'immutable';\r\n\r\nconst SHOW = 'modal/SHOW';\r\nconst HIDE = 'modal/HIDE';\r\nconst CHANGE = 'modal/CHANGE';\r\nconst TOGGLE_MEAN_MODE = 'modal/TOOGLE_MEAN_MODE';\r\nconst ADD_MEAN = 'modal/ADD_MEAN';\r\nconst REMOVE_MEAN = 'modal/REMOVE_MEAN';\r\nconst CHANGE_MEAN = 'modal/CHANGE_MEAN';\r\n\r\nexport const show = createAction(SHOW);\r\nexport const hide = createAction(HIDE);\r\nexport const change = createAction(CHANGE); // {word, mean}\r\nexport const toggleMeanMode = createAction(TOGGLE_MEAN_MODE); // index;\r\nexport const addMean = createAction(ADD_MEAN); // Map{ mean:string, id:string, isEditMode:boolean }\r\nexport const removeMean = createAction(REMOVE_MEAN); // index\r\nexport const changeMean = createAction(CHANGE_MEAN); // input{ index, mean}\r\n\r\n\r\nconst initialState = Map ( {\r\n    visible:false,\r\n    mode:'',\r\n    word: Map ( {\r\n        id : null,\r\n        word : '',\r\n        means: List([]), // means : [{id:string, mean:string, isEidtMode:boolean}]\r\n        wrongCounter : -1\r\n    })\r\n});\r\n\r\nexport default handleActions ({\r\n    [SHOW]: (state, action) => {\r\n        let word = initialState.get('word'), mode = 'add';\r\n        if ( typeof (action.payload) !== 'undefined') {\r\n            word = action.payload;\r\n            mode = 'change';\r\n        }\r\n\r\n        return state.set('visible',true).set('word', word).set('mode',mode);\r\n    },\r\n    [HIDE]: (state, action) => {\r\n        return state.set('visible', false).set('word', Map ( {\r\n            id : '',\r\n            word : '',\r\n            means: List([]), // means : [{mean:string, isEidtMode:boolean}]\r\n            wrongCounter : -1\r\n        })); \r\n    },\r\n    [CHANGE]: (state, action) => {\r\n        const word = state.getIn(['word']);\r\n        const input = action.payload;\r\n\r\n        if ( word.get('word') !== input.word ) {\r\n            return state.setIn(['word', 'word'], input.word ); \r\n        }\r\n\r\n    },\r\n    [TOGGLE_MEAN_MODE] : (state, action) => {\r\n        const index = action.payload;\r\n        const current = state.getIn(['word','means', index, 'isEditMode']);\r\n\r\n        return state.setIn(['word', 'means', index, 'isEditMode'], !current );\r\n    },\r\n    [ADD_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n\r\n        return state.setIn(['word','means'], means.push(action.payload));\r\n    },\r\n    [REMOVE_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n        const index = action.payload;\r\n    \r\n        return state.setIn(['word','means'], means.delete(index));\r\n    },\r\n    [CHANGE_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n        const {index, mean} = action.payload;\r\n        \r\n        return state.mergeIn(['word', 'means', index], Map ({isEditMode:false, mean:mean}) );\r\n\r\n    }\r\n}, initialState);","import React, {Component} from 'react';\r\nimport {Map} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Word extends Component {\r\n    static propTypes = {\r\n        word : PropTypes.string\r\n    }\r\n\r\n    render() {\r\n        const { word } = this.props;\r\n\r\n        return (\r\n            <div\r\n                className={cx('word')}\r\n            >\r\n                {word}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Word;","import React, {Component} from 'react';\r\nimport {List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//Component\r\n//import Input from './Input';\r\n\r\nclass TestForm extends Component {\r\n\r\n    handleChange = (e) => {\r\n        const { onChange } = this.props;\r\n        onChange({\r\n            answer : e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { keyword, means, onTest } = this.props;\r\n\r\n        const {handleChange} = this;\r\n\r\n        return (\r\n\r\n            <div>\r\n                <form>\r\n                    <input \r\n                        value={keyword} \r\n                        placeholder=\"단어의 뜻을 입력하세요.\" \r\n                        onChange={handleChange}\r\n                    />\r\n                </form>\r\n                <button\r\n                    onClick={onTest}\r\n                >\r\n                CHECK\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TestForm;","import React, {Component} from 'react';\r\nimport {Map} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\n//Component\r\nimport TestForm from './TestForm';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Means extends Component {\r\n    static propTypes = {\r\n        means : ImmutablePropTypes.listOf(\r\n            PropTypes.string\r\n        ),\r\n        mode : PropTypes.string,\r\n        onChange : PropTypes.func,\r\n        onTest : PropTypes.func\r\n    }\r\n\r\n    render() {\r\n        const { means, mode, onChange, onTest, onEdit } = this.props;\r\n        let contents;\r\n\r\n        if ( mode === 'test' ) {\r\n            contents = (\r\n                <TestForm\r\n                    means={means}\r\n                    onChange={onChange}\r\n                    onTest={onTest}\r\n                />\r\n            )\r\n        } else {\r\n            contents = means.toJS()[0];\r\n            for ( let i=1; i<means.size; i++ ) {\r\n                contents += (\", \"+means.toJS()[i]);\r\n            }\r\n        }\r\n        \r\n        return (\r\n            <div\r\n                onClick={onEdit}\r\n                className={cx('mean')}\r\n            >\r\n                {contents}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Means;","import React, {Component} from 'react';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport * as styles from '../style/button.module.scss';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst Button = ({children, ...rest}) => {\r\n\r\n    return (\r\n        <div \r\n            className={cx(rest.className)}\r\n            onClick={rest.onClick}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, {Component} from 'react';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport buttonStyle from '../style/button.module.scss';\r\nimport wordStyle from '../style/word.module.scss';\r\n\r\nimport Button from './Button';\r\n\r\n//icons\r\nimport {IoMdVolumeHigh} from 'react-icons/io';\r\nimport {MdDelete} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(wordStyle);\r\nconst cx2 = classNames.bind(buttonStyle);\r\n\r\nclass Result extends Component {\r\n    handleSound = (e) => {\r\n        e.stopPropagation();\r\n        const { word } = this.props;\r\n        let msg = new SpeechSynthesisUtterance(word);\r\n        msg.lang='en-us';\r\n        msg.volume=1;\r\n        msg.rate=1;\r\n        msg.pitch=1;\r\n        \r\n        speechSynthesis.speak(msg);\r\n    }\r\n    \r\n    render() {\r\n        const {isComplete, onSound} = this.props;\r\n        const {handleSound, handleRemove} = this;\r\n        \r\n        return (\r\n            <div className={cx('result')}>\r\n                <Button \r\n                    className={'wordContainerButton'} \r\n                    onClick={handleSound}\r\n                >\r\n                    <IoMdVolumeHigh />\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Result;","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport styles from '../style/word.module.scss';\r\n\r\nimport Word from './Word';\r\nimport Means from './Means';\r\nimport Result from './Result';\r\n\r\nimport { FiSquare, FiCheckSquare} from 'react-icons/fi';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass WordBox extends Component {\r\n    \r\n    static propTypes = {\r\n        word: ImmutablePropTypes.mapContains({\r\n            means : ImmutablePropTypes.listOf(\r\n                PropTypes.string\r\n            ),\r\n            id : PropTypes.string,\r\n            word : PropTypes.string,\r\n            mode : PropTypes.string\r\n        })\r\n        // mode : PropTypes.string,\r\n        // onCheck : PropTypes.func,\r\n        // onGiveUp : PropTypes.func\r\n    }\r\n\r\n    handleCheck = (e) => {\r\n        e.stopPropagation();\r\n\r\n    }\r\n\r\n    handleEdit = (e) => {\r\n        const {onEdit, word} = this.props;\r\n        onEdit(word.get('id'));\r\n    }\r\n\r\n    render() {\r\n        const { word,mode, onRemove } = this.props;\r\n        const {handleEdit, handleCheck} = this;\r\n        return (\r\n            <div className={cx('container')}\r\n                key={word.get('id')}\r\n                onClick={handleEdit}\r\n            >   \r\n                <div\r\n                    className={cx('check')}\r\n                    >\r\n                    <input\r\n                        id={word.get('id')}\r\n                        onClick={handleCheck}\r\n                        type={'checkbox'}\r\n                        />\r\n                    <label \r\n                        onClick={handleCheck}\r\n                        htmlFor={word.get('id')}\r\n                    >\r\n                        <FiSquare/><FiCheckSquare/>\r\n                    </label>\r\n                </div>\r\n                <Word \r\n                    word={word.get('word')} \r\n                    />\r\n                <Means\r\n                    means={word.get('means')}\r\n                    mode={mode}\r\n                />\r\n                <Result\r\n                    id={word.get('id')}\r\n                    word={word.get('word')}\r\n                    onRemove={onRemove}\r\n                    isComplete={word.get('isComplete')}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WordBox;","import React, {Component} from 'react';\r\n\r\nimport WordBox from './WordBox';\r\n\r\nclass WordBoxList extends Component {\r\n\r\n    render() {\r\n        const { words, mode, onEdit, onRemove } = this.props;\r\n        const wordList = words.\r\n                            map(\r\n                                word => (\r\n                                    <WordBox\r\n                                        key={word.get('id')}\r\n                                        word={word}\r\n                                        mode={mode}\r\n                                        onEdit={onEdit}\r\n                                        onRemove={onRemove}\r\n                                    />\r\n                                )\r\n                            )\r\n\r\n        return (\r\n            <div\r\n            >\r\n                {wordList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default WordBoxList;","import {Map, List, fromJS} from 'immutable';\r\nimport shortid from 'shortid';\r\n\r\nconst defaultWord = {\r\n    means : [],\r\n    word : '',\r\n    id : '',\r\n    isComplete : false\r\n};\r\n\r\nclass Word {\r\n    constructor( word ) {\r\n        for ( let key in defaultWord ) {\r\n            this[key] = word[key] || defaultWord[key];\r\n        }\r\n    }\r\n\r\n    isEqual = ( word ) => {\r\n        let isEqual = true;\r\n        for (let key in defaultWord) {\r\n            isEqual = isEqual && this[key].toString() === word[key].toString();\r\n            if (!isEqual) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return isEqual;\r\n    }\r\n\r\n    fromModal = () => {\r\n        this.means = this.means.map( mean => mean.mean );\r\n\r\n        return this;\r\n    }\r\n\r\n    toModal = () => {\r\n        //withImmutable\r\n        const word = fromJS( Map(this) )\r\n                    .set('means', List(\r\n                        this.means.map (\r\n                            mean => Map(\r\n                                { id:shortid.generate(), mean:mean, isEditMod:false}\r\n                            )\r\n                        )\r\n                    ));\r\n        return word;\r\n    }\r\n\r\n    toImmutable = () => {\r\n        return Map({\r\n            means : List(this.means),\r\n            word : this.word,\r\n            id : this.id,\r\n            isComplete : this.isComplete\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport default Word;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Map, List} from 'immutable';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as testActions from '../modules/test';\r\nimport * as modalActions from '../modules/modal';\r\n\r\nimport WordBoxList from '../components/WordBoxList';\r\nimport Word from '../class/Word';\r\n\r\nimport classNames from 'classnames/bind';\r\n\r\nclass WordBoxListContainer extends Component {\r\n    \r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.words.toString() !== this.props.words.toString() ) {\r\n            localStorage.setItem('words', JSON.stringify(this.props.words));\r\n        }\r\n    }\r\n\r\n    handleEdit = (id) => {\r\n        const {ModalActions, words} = this.props;\r\n        const index = words.findIndex( word => word.get('id') === id );\r\n        const word = new Word(words.get(index).toJS()).toModal();\r\n\r\n        ModalActions.show(word);\r\n    }\r\n\r\n    handleRemove = (id) => {\r\n        const {WordsActions} = this.props;\r\n\r\n        WordsActions.remove(id);\r\n    }\r\n\r\n    render() {\r\n        const {words, keyword, mode} = this.props;\r\n        const {handleEdit, handleRemove} = this;\r\n\r\n        return (\r\n            <WordBoxList\r\n                words={words}\r\n                search={keyword}\r\n                mode={mode}\r\n                onEdit={handleEdit}\r\n                onRemove={handleRemove}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n\r\n    (state) => ({\r\n        keyword: '',\r\n        //keyword: state.get('keyword'),\r\n        words : state.words,\r\n        mode : ''\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        ModalActions: bindActionCreators(modalActions, dispatch),\r\n        TestActions: bindActionCreators(testActions, dispatch)\r\n    })\r\n) (WordBoxListContainer);","import React from 'react';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Button from './Button';\r\n\r\nimport * as button from '../style/button.module.scss';\r\n\r\nconst cx = classNames.bind(button);\r\n\r\nconst Input = ({children, ...rest}) => {\r\n    return (\r\n        <input\r\n            placeholder={rest.placeholder}\r\n            defaultValue={rest.defaultValue}\r\n            onChange={rest.onChange}\r\n            onBlur={rest.onBlur}\r\n        />\r\n    );\r\n}\r\n        \r\nconst InputWithButton = React.forwardRef( (props,ref) => (\r\n    <div className={cx('inputWrapper')}>\r\n            <input\r\n                ref={ref}\r\n                placeholder={props.placeholder}\r\n                defaultValue={props.defaultValue}\r\n                onKeyDown={props.onKeyDown}\r\n                onChange={props.onChange}\r\n                onBlur={props.onBlur}\r\n            />\r\n            <Button\r\n                className={cx(props.buttonClassName)}\r\n                placeholder={props.placeholder}\r\n                onClick={props.onClick}\r\n            >\r\n                {props.children}\r\n            </Button>\r\n        </div>\r\n));\r\n\r\n\r\nexport {Input, InputWithButton};","import React, {Component} from 'react';\r\nimport {InputWithButton} from './Input';\r\n\r\nimport styles from '../style/modal.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Button from './Button';\r\n\r\n//icon\r\nimport {MdDelete, MdEdit} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\n\r\nclass Mean extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.ref.current !== null) {\r\n            this.ref.current.focus();\r\n        }\r\n\r\n    }\r\n\r\n    handleMode = () => {\r\n        const {mean, toggleMode} = this.props;\r\n\r\n        toggleMode(mean.get('id'));\r\n    }\r\n\r\n    handleRemove = () => {\r\n        const {mean, onRemove} = this.props;\r\n        onRemove(mean.get('id'));\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {value} = e.target;\r\n        const {mean, onChange} = this.props;\r\n        onChange(mean.get('id'), value);\r\n    }\r\n\r\n    render() {\r\n        const {mean} = this.props;\r\n        const {handleMode, handleRemove, handleChange} = this;\r\n        const element = mean.get('isEditMode') ?\r\n                        (\r\n                            <InputWithButton\r\n                                defaultValue={mean.get('mean')}\r\n                                buttonClassName={'innerButton-right'}\r\n                                onBlur={handleChange}\r\n                                ref={this.ref}\r\n                            >\r\n                                <MdEdit/>\r\n                            </InputWithButton>\r\n                        )\r\n                        :\r\n                        (   \r\n                            <div  className={cx('mean')}>\r\n                                <div className={cx('text')}>{mean.get('mean')}</div>\r\n                                <div \r\n                                    className={cx('button')}\r\n                                >\r\n                                    <Button\r\n                                        className={'button'}\r\n                                        onClick={handleMode}\r\n                                        >\r\n                                        <MdEdit/>\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={'button'}\r\n                                        onClick={handleRemove}\r\n                                    >\r\n                                        <MdDelete/>\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n\r\n        return (\r\n            <div>\r\n                {element}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Mean;","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\n\r\nimport styles from '../style/modal.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Mean from './Mean';\r\n\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass MeanList extends Component {\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.props.means.toString()\r\n                === nextProps.means.toString() ) {\r\n                    return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    handleBlur = (e) => {\r\n        const {value} = e.target;\r\n        const {onChangeMean, means } = this.props;\r\n        const findIndex = means.findIndex(mean => mean.get('mean').trim() === value.trim());\r\n        let mean = value;\r\n        onChangeMean( findIndex, mean );\r\n        \r\n    }\r\n    \r\n    handleKeyPress = (e) => {\r\n        if ( (e.keyCode === 13 || e.keyCode === 9 || e.key === 'Enter') && e.target.value !== '' ) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n    \r\n    handleRemove = (e) => {\r\n        const { onRemoveMean } = this.props;\r\n        const index = e.target.closest('div').getAttribute('index');\r\n        \r\n        onRemoveMean(index);\r\n    }\r\n    \r\n    render() {\r\n        const { means, onRemove, toggleMode, onChange } = this.props;\r\n        const { handleRemove, handleBlur, handleKeyPress} = this;\r\n\r\n        const meanList = means.map( \r\n            mean => (\r\n                <Mean\r\n                    key={mean.get('id')}\r\n                    mean={mean}\r\n                    toggleMode={toggleMode}\r\n                    onChange={onChange}\r\n                    onRemove={onRemove}\r\n                />\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div className={cx('meansList')}>\r\n                {meanList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MeanList;","import React, {Component} from 'react';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport styles from '../style/modal.module.scss';\r\n\r\nimport Button from './Button';\r\nimport {InputWithButton} from './Input';\r\nimport MeanList from './MeanList';\r\n\r\nimport {MdAdd} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Modal extends Component {\r\n\r\n    handleBlur = ( e ) => {\r\n        const {onAddMean} = this.props;\r\n        const mean = e.target.value;\r\n\r\n        if (mean === '' || mean === null || typeof(mean) === 'undefined') {\r\n            return;\r\n        }\r\n        \r\n        e.target.value='';\r\n\r\n        onAddMean( mean );\r\n    }\r\n\r\n    handleKeyDown = (e) => {\r\n        if ( (e.keyCode === 13 || e.keyCode === 9) && e.target.value !== '' ) {\r\n            e.preventDefault();\r\n            e.target.blur();\r\n            e.target.focus();\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {onChange} =this.props;\r\n        onChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const { handleBlur, handleChange, handleKeyDown } = this;\r\n        const {modal, toggleMeanMode, onChangeMean, onRemoveMean, onAdd, onCancel, mode} = this.props;\r\n\r\n        let modeString = 'Add';\r\n\r\n        if (mode === 'change') {\r\n            modeString = 'Edit';\r\n        }\r\n        const mdAdd = <MdAdd/>;\r\n        return (\r\n            <div className={cx('wrapper')}>\r\n                <div className={cx('box')}>\r\n                    <div className={cx('title')}> \r\n                        <p>Word {modeString}</p>\r\n                    </div>\r\n                    <div className={cx('contents')}>\r\n                        <div>\r\n                            <input\r\n                                placeholder='Word'\r\n                                defaultValue={modal.getIn(['word','word'])}\r\n                                onChange={handleChange}\r\n                                required='required'\r\n                            />\r\n                            <MeanList\r\n                                means = {modal.getIn(['word', 'means'])}\r\n                                onChange = {onChangeMean}\r\n                                onRemove = {onRemoveMean}\r\n                                toggleMode = {toggleMeanMode}\r\n                            />\r\n                            <InputWithButton\r\n                                className={'inputWrapper'}\r\n                                buttonClassName={'innerButton-right'}\r\n                                placeholder='Mean'\r\n                                onBlur={handleBlur}\r\n                                onKeyDown={handleKeyDown}\r\n                            >\r\n                                <MdAdd/>\r\n                            </InputWithButton>\r\n                        </div>\r\n                    </div>\r\n                    <div \r\n                        className={cx('add')}\r\n                        onClick={onAdd}\r\n                    >\r\n                        <span>{modeString}</span>\r\n                    </div>\r\n                    <div \r\n                        className={cx('cancel')}\r\n                        onClick={onCancel}\r\n                    >\r\n                        <span>Cancel</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport shortid from 'shortid';\r\n\r\nimport Word from '../class/Word';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as modalActions from '../modules/modal';\r\n\r\nimport Modal from '../components/Modal'\r\n\r\nclass WordModalContainer extends Component {\r\n    handleMean = {\r\n\r\n        add : ( mean ) => {\r\n            const {ModalActions, modal } = this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( item => item.get('mean').replace(/ /g,'') === mean.replace(/ /g,'') );\r\n            // 입력한 뜻이 존재 하지 않을 경우\r\n            if (index < 0 ) {\r\n                const meanObj = Map({\r\n                    id : shortid.generate(),\r\n                    mean :mean,\r\n                    isEditMode : false\r\n                });\r\n                ModalActions.addMean( meanObj );\r\n            } else {\r\n                alert('exist');\r\n            }\r\n\r\n        },\r\n\r\n        remove : (id) => {\r\n            const { ModalActions, modal }= this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id);\r\n\r\n            if (index >= 0 ){\r\n                ModalActions.removeMean(index);\r\n            }\r\n            \r\n        },\r\n\r\n        change: (id, value)=> {\r\n            const { ModalActions, modal }= this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id );\r\n            const otherMeans = modal.getIn(['word', 'means']).delete(index);\r\n\r\n            let mean = value;\r\n\r\n            if ( otherMeans.findIndex( mean => mean.get('mean').replace(/ /g,'') === value.replace(/ /g,'') ) > -1 ) {\r\n                alert('dup');\r\n                mean = modal.getIn(['word', 'means', index, 'mean']);\r\n            }\r\n\r\n            ModalActions.changeMean( {index, mean} );\r\n        },\r\n        \r\n        toggleMode: (id) => {\r\n            const {ModalActions, modal} = this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id);\r\n\r\n            ModalActions.toggleMeanMode(index);\r\n        }\r\n\r\n    }\r\n\r\n    handleWord = {\r\n        add: () => {\r\n            const {WordsActions, ModalActions, modal} = this.props;\r\n            const word = Map({\r\n                word : modal.getIn(['word', 'word']),\r\n                means : modal.getIn(['word', 'means']).map(mean => mean.get('mean')),\r\n                isComplete : false,\r\n                id : shortid.generate()\r\n            });\r\n\r\n            WordsActions.create(word);\r\n            ModalActions.hide();\r\n        },\r\n        change: () => {\r\n            const {WordsActions, ModalActions, modal} =this.props;\r\n            const word = new Word( modal.get('word').toJS() ).fromModal();\r\n            \r\n            WordsActions.update(word);\r\n            ModalActions.hide();\r\n        }\r\n    }\r\n\r\n    handleCancel = () => {\r\n        const {ModalActions} = this.props;\r\n        ModalActions.hide();\r\n    }\r\n\r\n    handleChange = (word) => {\r\n        const {ModalActions} = this.props;\r\n\r\n        const input = {\r\n            word : word,\r\n            mean : ''\r\n        }\r\n\r\n        ModalActions.change(\r\n            input\r\n        );\r\n    }\r\n\r\n    render () {\r\n        const {handleMean, handleChange, handleWord, handleCancel} = this;\r\n        const {modal} = this.props;\r\n        return (\r\n            <div>\r\n                {\r\n                    modal.get('visible') && (\r\n                                    <Modal\r\n                                        modal={modal}\r\n                                        mode={modal.get('mode')}\r\n                                        onChange={handleChange}\r\n                                        toggleMeanMode={handleMean['toggleMode']}\r\n                                        onAddMean={handleMean['add']}\r\n                                        onChangeMean={handleMean['change']}\r\n                                        onRemoveMean={handleMean['remove']}\r\n                                        onAdd={handleWord[modal.get('mode')]}\r\n                                        onCancel={handleCancel}\r\n                                    />\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        modal:state.modal\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        ModalActions : bindActionCreators(modalActions, dispatch)\r\n    })\r\n) (WordModalContainer);","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport {bindActionCreators} from 'redux';\nimport classNames from 'classnames/bind';\nimport {MdAdd, MdRemove} from 'react-icons/md';\nimport {Map, List} from 'immutable';\n\nimport * as modalActions from '../modules/modal'\nimport * as wordsActions from '../modules/words'\nimport * as styles from '../style/layout.module.scss'\n\nimport Button from '../components/Button';\n\nconst cx = classNames.bind(styles);\n\nclass FooterContainer extends Component {\n\n    handleShow = () => {\n        const {ModalActions} = this.props;\n\n        ModalActions.show();\n    }\n\n    handleRemove = () => {\n        const {WordsActions} = this.props;\n        const idList = List(document.querySelectorAll('input[type=\"checkbox\"]:checked'))\n                            .map(element => element.id);\n                            \n        if ( idList.isEmpty() ) {\n            window.alert('Please select more than one!');\n            return;\n        }\n\n        if ( window.confirm('do you want remove?')) {\n            WordsActions.remove(idList);\n        }\n        \n    }\n\n    render () {\n        const {handleShow, handleRemove} = this;\n\n        return (\n            <div \n                className={cx('footer')}\n            >\n                <Button\n                    onClick={handleShow}\n                >\n                    <MdAdd/>\n                </Button>\n                <Button\n                    onClick={handleRemove}\n                >\n                    <MdRemove/>\n                </Button>\n            </div>\n        )\n    }\n};\n\nexport default connect(\n    null,\n    (dispatch) => ({\n        ModalActions : bindActionCreators(modalActions, dispatch),\n        WordsActions : bindActionCreators(wordsActions, dispatch)\n    })\n) (FooterContainer);","import React, { Component } from 'react';\nimport classNames from 'classnames/bind';\n\n//components\nimport Header from './components/Header';\n\n//containers\nimport WordBoxListContainer from './containers/WordBoxListContainer';\nimport WordModalContainer from './containers/WordModalContainer';\nimport FooterContainer from './containers/FooterContainer';\n\nimport * as wordsActions from './modules/words';\n\nimport * as layout from './style/layout.module.scss';\nimport { connect } from 'react-redux'\nimport {bindActionCreators} from 'redux';\n\nconst cx = classNames.bind(layout);\n\nclass App extends Component {\n  \n\n  componentDidMount() {\n\n    const words = localStorage.getItem('words');\n    if ( words !== null && typeof (words) !== 'undefined' ) {\n      const {WordsActions} = this.props;\n      WordsActions.loadWords(JSON.parse(words));\n    }\n\n  }\n\n  render() {\n\n    const {handleClick} = this;\n    return (\n      <div className={cx('wrapper')}>\n        <Header/>\n        \n        <div className={cx('body')}>\n          <WordBoxListContainer />\n        </div>\n\n        <FooterContainer/>\n        <WordModalContainer/>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n  }),\n  (dispatch) => ({\n    WordsActions : bindActionCreators(wordsActions, dispatch)\n  })\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux';\r\n\r\nimport words from './words';\r\nimport modal from './modal';\r\n\r\nexport default combineReducers({\r\n    words,modal\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from 'redux';\nimport reducers from './modules';\nimport {Provider} from 'react-redux';\n\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <Provider store ={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root')\n);\n"],"sourceRoot":""}