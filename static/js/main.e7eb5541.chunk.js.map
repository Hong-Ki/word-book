{"version":3,"sources":["style/word.module.scss","style/layout.module.scss","style/button.module.scss","style/modal.module.scss","components/Header.js","modules/words.js","modules/test.js","modules/modal.js","components/Word.js","components/TestForm.js","components/Means.js","components/Button.js","components/Result.js","components/WordBox.js","components/WordBoxList.js","class/Word.js","containers/WordBoxListContainer.js","components/Input.js","components/Mean.js","components/MeanList.js","components/Modal.js","containers/WordModalContainer.js","containers/FooterContainer.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["module","exports","container","word","mean","result","header","wrapper","body","footer","wordContainerButton","button","inputWrapper","innerButton-right","title","box","contents","meansList","text","submit","add","cancel","cx","classNames","bind","styles","Header","react_default","a","createElement","className","create","createAction","update","remove","loadWords","initialState","List","handleActions","_handleActions","Object","defineProperty","state","action","push","Map","payload","index","findIndex","get","id","isEqual","toJS","toImmutable","mergeIn","delete","fromJS","change","answers","answer","set","split","map","toUpperCase","trim","sort","show","hide","toggleMeanMode","addMean","removeMean","changeMean","visible","mode","means","wrongCounter","modal_handleActions","getIn","input","setIn","current","_action$payload","isEditMode","Word","this","props","Component","TestForm","handleChange","e","onChange","_this","target","value","_this$props","keyword","onTest","placeholder","onClick","Means","onEdit","components_TestForm","i","size","Button","_ref","children","rest","objectWithoutProperties","wordStyle","cx2","buttonStyle","Result","handleSound","msg","SpeechSynthesisUtterance","lang","volume","rate","pitch","speechSynthesis","speak","handleRemove","onRemove","_this$props2","isComplete","onSound","components_Button","io","md","WordBox","handleEdit","components_Word","components_Means","components_Result","WordBoxList","words","wordList","components_WordBox","key","defaultWord","classCallCheck","toString","fromModal","toModal","shortid","generate","isEditMod","WordBoxListContainer","ModalActions","WordsActions","prevProps","prevState","localStorage","setItem","JSON","stringify","_this$props3","components_WordBoxList","search","connect","dispatch","bindActionCreators","wordsActions","modalActions","TestActions","testActions","InputWithButton","_ref2","defaultValue","onKeyDown","onBlur","buttonClassName","Mean","handleMode","toggleMode","element","Input_InputWithButton","MeanList","handleBlur","onChangeMean","handleKeyPress","keyCode","blur","onRemoveMean","closest","getAttribute","nextProps","nextState","meanList","components_Mean","Modal","onAddMean","handleKeyDown","preventDefault","focus","modal","onAdd","onCancel","modeString","required","components_MeanList","WordModalContainer","handleMean","item","replace","meanObj","alert","otherMeans","_this$props4","handleWord","_this$props5","_this$props6","handleCancel","components_Modal","FooterContainer","handleShow","layout","App","getItem","parse","components_Header","containers_WordBoxListContainer","containers_FooterContainer","containers_WordModalContainer","Boolean","window","location","hostname","match","combineReducers","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,UAAA,wBAAAC,KAAA,mBAAAC,KAAA,mBAAAC,OAAA,0CCAlBL,EAAAC,QAAA,CAAkBK,OAAA,uBAAAC,QAAA,wBAAAC,KAAA,qBAAAC,OAAA,4CCAlBT,EAAAC,QAAA,CAAkBS,oBAAA,oCAAAC,OAAA,uBAAAC,aAAA,6BAAAC,oBAAA,uDCAlBb,EAAAC,QAAA,CAAkBM,QAAA,uBAAAO,MAAA,qBAAAC,IAAA,mBAAAC,SAAA,wBAAAC,UAAA,yBAAAb,KAAA,oBAAAO,OAAA,sBAAAO,KAAA,oBAAAC,OAAA,sBAAAC,IAAA,mBAAAC,OAAA,k1BCKZC,EAAKC,IAAWC,KAAKC,GAOZC,EAJA,kBACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,EAAG,WAAnB,+ECFSS,EAASC,YALP,eAMFC,EAASD,YALP,eAMFE,EAASF,YALP,eAMFG,EAAYH,YALN,mBAObI,EAAeC,eAAK,IA2HXC,eAAaC,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EArIb,cAsIA,SAACG,EAAOC,GACf,OAAOD,EAAME,KAAMC,cAAIF,EAAOG,YAFVN,OAAAC,EAAA,EAAAD,CAAAD,EApIb,cAwIA,SAACG,EAAOC,GACf,IAAMI,EAAQL,EAAMM,UAAW,SAAA7C,GAAI,OAAIA,EAAK8C,IAAI,QAAUN,EAAOG,QAAQI,KAEzE,IAAMP,EAAOG,QAAQK,QAAST,EAAMO,IAAIF,GAAOK,QAAW,CACtD,IAAMjD,EAAOwC,EAAOG,QAAQO,cAC5B,OAAOX,EAAMY,QAAQ,CAACP,GAAS5C,MATfqC,OAAAC,EAAA,EAAAD,CAAAD,EAnIb,cA+IA,SAACG,EAAOC,GACf,IAAMI,EAAQL,EAAMM,UAAW,SAAA7C,GAAI,OAAIA,EAAK8C,IAAI,QAAUN,EAAOG,UACjE,OAAOJ,EAAMa,OAAOR,KAdAP,OAAAC,EAAA,EAAAD,CAAAD,EAlIT,kBA+JA,SAACG,EAAOC,GACnB,OAAOa,iBAAOb,EAAOG,WA9BDP,GAgCzBH,GCnKUqB,EAASzB,YAFP,eAITI,EAAeS,cAAK,CACtBa,QAAUrB,eAAK,MAGJC,cAAcE,OAAAC,EAAA,EAAAD,CAAA,GARd,cASD,SAACE,EAAOC,GAAW,IAClBgB,EAAUhB,EAAOG,QAAjBa,OAEP,OAAOjB,EAAMkB,IAAI,UAAWvB,eAAMsB,EAAOE,MAAM,KACNC,IAAI,SAAA1D,GAAI,OAAIA,EAAK2D,cAAcC,SAC/BC,WAI9C7B,GCTU8B,EAAOlC,YARP,cASAmC,EAAOnC,YARP,cASAyB,EAASzB,YARP,gBASFoC,EAAiBpC,YARL,0BASZqC,EAAUrC,YARN,kBASJsC,EAAatC,YARN,qBASPuC,EAAavC,YARN,qBAWdI,EAAeS,cAAM,CACvB2B,SAAQ,EACRC,KAAK,GACLtE,KAAM0C,cAAM,CACRK,GAAK,KACL/C,KAAO,GACPuE,MAAOrC,eAAK,IACZsC,cAAgB,MAITrC,eAAasC,EAAA,GAAApC,OAAAC,EAAA,EAAAD,CAAAoC,EA5Bf,aA6BD,SAAClC,EAAOC,GACZ,IAAIxC,EAAOiC,EAAaa,IAAI,QAASwB,EAAO,MAM5C,MALiC,qBAApB9B,EAAOG,UAChB3C,EAAOwC,EAAOG,QACd2B,EAAO,UAGJ/B,EAAMkB,IAAI,WAAU,GAAMA,IAAI,OAAQzD,GAAMyD,IAAI,OAAOa,KAR1CjC,OAAAC,EAAA,EAAAD,CAAAoC,EA3Bf,aAqCD,SAAClC,EAAOC,GACZ,OAAOD,EAAMkB,IAAI,WAAW,GAAOA,IAAI,OAAQf,cAAM,CACjDK,GAAK,GACL/C,KAAO,GACPuE,MAAOrC,eAAK,IACZsC,cAAgB,OAfAnC,OAAAC,EAAA,EAAAD,CAAAoC,EA1Bb,eA4CD,SAAClC,EAAOC,GACd,IAAMxC,EAAOuC,EAAMmC,MAAM,CAAC,SACpBC,EAAQnC,EAAOG,QAErB,GAAK3C,EAAK8C,IAAI,UAAY6B,EAAM3E,KAC5B,OAAOuC,EAAMqC,MAAM,CAAC,OAAQ,QAASD,EAAM3E,QAvB3BqC,OAAAC,EAAA,EAAAD,CAAAoC,EAzBH,yBAoDA,SAAClC,EAAOC,GACzB,IAAMI,EAAQJ,EAAOG,QACfkC,EAAUtC,EAAMmC,MAAM,CAAC,OAAO,QAAS9B,EAAO,eAEpD,OAAOL,EAAMqC,MAAM,CAAC,OAAQ,QAAShC,EAAO,eAAgBiC,KA/BxCxC,OAAAC,EAAA,EAAAD,CAAAoC,EAxBX,iBAyDD,SAAClC,EAAOC,GAChB,IAAM+B,EAAQhC,EAAMmC,MAAM,CAAC,OAAQ,UAEnC,OAAOnC,EAAMqC,MAAM,CAAC,OAAO,SAAUL,EAAM9B,KAAKD,EAAOG,YApCnCN,OAAAC,EAAA,EAAAD,CAAAoC,EAvBR,oBA6DD,SAAClC,EAAOC,GACnB,IAAM+B,EAAQhC,EAAMmC,MAAM,CAAC,OAAQ,UAC7B9B,EAAQJ,EAAOG,QAErB,OAAOJ,EAAMqC,MAAM,CAAC,OAAO,SAAUL,EAAMnB,OAAOR,MA1C9BP,OAAAC,EAAA,EAAAD,CAAAoC,EAtBR,oBAkED,SAAClC,EAAOC,GACLD,EAAMmC,MAAM,CAAC,OAAQ,UAAnC,IAD8BI,EAERtC,EAAOG,QAAtBC,EAFuBkC,EAEvBlC,MAAO3C,EAFgB6E,EAEhB7E,KAEd,OAAOsC,EAAMY,QAAQ,CAAC,OAAQ,QAASP,GAAQF,cAAK,CAACqC,YAAW,EAAO9E,KAAKA,OAhDxDwE,GAmDzBxC,oBC1EGd,EAAKC,IAAWC,KAAKC,KAoBZ0D,mLAbF,IACGhF,EAASiF,KAAKC,MAAdlF,KAER,OACIwB,EAAAC,EAAAC,cAAA,OACIC,UAAWR,EAAG,SAEbnB,UAZEmF,aC+BJC,6MAhCXC,aAAe,SAACC,IAEZC,EADqBC,EAAKN,MAAlBK,UACC,CACL/B,OAAS8B,EAAEG,OAAOC,iFAIjB,IAAAC,EAC8BV,KAAKC,MAAhCU,EADHD,EACGC,QAAgBC,GADnBF,EACYpB,MADZoB,EACmBE,QAEjBR,EAAgBJ,KAAhBI,aAEP,OAEI7D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SACIgE,MAAOE,EACPE,YAAY,kEACZP,SAAUF,KAGlB7D,EAAAC,EAAAC,cAAA,UACIqE,QAASF,GADb,iBAxBOV,aCIjBhE,EAAKC,IAAWC,KAAKC,KA0CZ0E,mLA9BF,IAEDnF,EAFC8E,EAC6CV,KAAKC,MAA/CX,EADHoB,EACGpB,MAAOD,EADVqB,EACUrB,KAAMiB,EADhBI,EACgBJ,SAAUM,EAD1BF,EAC0BE,OAAQI,EADlCN,EACkCM,OAGvC,GAAc,SAAT3B,EACDzD,EACIW,EAAAC,EAAAC,cAACwE,EAAD,CACI3B,MAAOA,EACPgB,SAAUA,EACVM,OAAQA,QAGb,CACHhF,EAAW0D,EAAMtB,OAAO,GACxB,IAAM,IAAIkD,EAAE,EAAGA,EAAE5B,EAAM6B,KAAMD,IACzBtF,GAAa,KAAK0D,EAAMtB,OAAOkD,GAIvC,OACI3E,EAAAC,EAAAC,cAAA,OACIqE,QAASE,EACTtE,UAAWR,EAAG,SAEbN,UAlCGsE,wCCTdhE,GAAKC,IAAWC,KAAKC,GAcZ+E,GAZA,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,SAAaC,EAAUnE,OAAAoE,GAAA,EAAApE,CAAAiE,EAAA,cAEpC,OACI9E,EAAAC,EAAAC,cAAA,OACIC,UAAWR,GAAGqF,EAAK7E,WACnBoE,QAASS,EAAKT,SAEbQ,sBCFPpF,GAAKC,IAAWC,KAAKqF,KACrBC,GAAMvF,IAAWC,KAAKuF,MA4CbC,8MAzCXC,YAAc,SAACxB,GAAM,IACTtF,EAASwF,EAAKN,MAAdlF,KAEJ+G,EAAM,IAAIC,yBAAyBhH,GACvC+G,EAAIE,KAAK,QACTF,EAAIG,OAAO,EACXH,EAAII,KAAK,EACTJ,EAAIK,MAAM,EAEVC,gBAAgBC,MAAMP,MAG1BQ,aAAe,SAACjC,GAAM,IAAAK,EACIH,EAAKN,MAApBnC,EADW4C,EACX5C,IAEPyE,EAHkB7B,EACP6B,UAEFzE,4EAGJ,IAAA0E,EACyBxC,KAAKC,MAC5B4B,GAFFW,EACEC,WADFD,EACcE,QACiB1C,KAA7B6B,aAAaS,EAAgBtC,KAAhBsC,aAEpB,OACI/F,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,GAAG,WACfK,EAAAC,EAAAC,cAACkG,GAAD,CACIjG,UAAWgF,GAAI,uBACfZ,QAASe,GAETtF,EAAAC,EAAAC,cAACmG,GAAA,EAAD,OAEJrG,EAAAC,EAAAC,cAACkG,GAAD,CACIjG,UAAWgF,GAAI,uBACfZ,QAASwB,GAET/F,EAAAC,EAAAC,cAACoG,GAAA,EAAD,eAnCC3C,aCHfhE,GAAKC,IAAWC,KAAKC,KAkDZyG,8MAhCXC,WAAa,SAAC1C,GAAM,IAAAK,EACOH,EAAKN,OAC5Be,EAFgBN,EACTM,QADSN,EACD3F,KACH8C,IAAI,gFAGX,IAAA2E,EAC2BxC,KAAKC,MAA7BlF,EADHyH,EACGzH,KAAKsE,EADRmD,EACQnD,KAAMkD,EADdC,EACcD,SACZQ,EAAc/C,KAAd+C,WAEP,OACIxG,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,GAAG,aACf4B,GAAI/C,EAAK8C,IAAI,MACbiD,QAASiC,GAETxG,EAAAC,EAAAC,cAACuG,EAAD,CACIjI,KAAMA,EAAK8C,IAAI,UAEnBtB,EAAAC,EAAAC,cAACwG,EAAD,CACI3D,MAAOvE,EAAK8C,IAAI,SAChBwB,KAAMA,IAEV9C,EAAAC,EAAAC,cAACyG,GAAD,CACIpF,GAAI/C,EAAK8C,IAAI,MACb9C,KAAMA,EAAK8C,IAAI,QACf0E,SAAUA,EACVE,WAAY1H,EAAK8C,IAAI,wBAzCnBqC,aCgBPiD,oLAxBF,IAAAzC,EACqCV,KAAKC,MAAvCmD,EADH1C,EACG0C,MAAO/D,EADVqB,EACUrB,KAAM2B,EADhBN,EACgBM,OAAQuB,EADxB7B,EACwB6B,SACvBc,EAAWD,EACG1E,IACI,SAAA3D,GAAI,OACAwB,EAAAC,EAAAC,cAAC6G,GAAD,CACIC,IAAKxI,EAAK8C,IAAI,MACd9C,KAAMA,EACNsE,KAAMA,EACN2B,OAAQA,EACRuB,SAAUA,MAK1C,OACIhG,EAAAC,EAAAC,cAAA,WACK4G,UAnBSnD,iCCDpBsD,GAAc,CAChBlE,MAAQ,GACRvE,KAAO,GACP+C,GAAK,GACL2E,YAAa,GAoDF1C,GAhDX,SAAAA,EAAahF,GAAO,IAAAwF,EAAAP,KAChB,IAAM,IAAIuD,KADMnG,OAAAqG,EAAA,EAAArG,CAAA4C,KAAAD,GAAAC,KAMpBjC,QAAU,SAAEhD,GACR,IAAIgD,GAAU,EACd,IAAK,IAAIwF,KAAOC,GAEZ,KADAzF,EAAUA,GAAWwC,EAAKgD,GAAKG,aAAe3I,EAAKwI,GAAKG,YAEpD,MAIR,OAAO3F,GAfSiC,KAkBpB2D,UAAY,WAGR,OAFApD,EAAKjB,MAAQiB,EAAKjB,MAAMZ,IAAK,SAAA1D,GAAI,OAAIA,EAAKA,OAEnCuF,GArBSP,KAwBpB4D,QAAU,WAUN,OARaxF,iBAAQX,cAAI8C,IACZ/B,IAAI,QAASvB,eACVsD,EAAKjB,MAAMZ,IACP,SAAA1D,GAAI,OAAIyC,cACJ,CAAEK,GAAG+F,KAAQC,WAAY9I,KAAKA,EAAM+I,WAAU,SA9BtD/D,KAqCpB/B,YAAc,WACV,OAAOR,cAAI,CACP6B,MAAQrC,eAAKsD,EAAKjB,OAClBvE,KAAOwF,EAAKxF,KACZ+C,GAAKyC,EAAKzC,GACV2E,WAAalC,EAAKkC,cAzCLe,GACbxD,KAAKuD,GAAOxI,EAAKwI,IAAQC,GAAYD,ICG3CS,8MAQFjB,WAAa,SAACjF,GAAO,IAAA4C,EACaH,EAAKN,MAA5BgE,EADUvD,EACVuD,aAAcb,EADJ1C,EACI0C,MACfzF,EAAQyF,EAAMxF,UAAW,SAAA7C,GAAI,OAAIA,EAAK8C,IAAI,QAAUC,IACpD/C,EAAO,IAAIgF,GAAKqD,EAAMvF,IAAIF,GAAOK,QAAQ4F,UAE/CK,EAAanF,KAAK/D,MAGtBuH,aAAe,SAACxE,GAAO,IAAA0E,EACWjC,EAAKN,MAA5BiE,EADY1B,EACZ0B,aACDvG,EAFa6E,EACEY,MACDxF,UAAW,SAAA7C,GAAI,OAAIA,EAAK8C,IAAI,QAAUC,IAErDH,GAAS,GACVuG,EAAapH,OAAOa,sFAnBTwG,EAAWC,GACtBD,EAAUf,MAAMM,aAAe1D,KAAKC,MAAMmD,MAAMM,YAChDW,aAAaC,QAAQ,QAASC,KAAKC,UAAUxE,KAAKC,MAAMmD,yCAqBvD,IAAAqB,EAC0BzE,KAAKC,MAA7BmD,EADFqB,EACErB,MAAOzC,EADT8D,EACS9D,QAAStB,EADlBoF,EACkBpF,KAChB0D,EAA4B/C,KAA5B+C,WAAYT,EAAgBtC,KAAhBsC,aAEnB,OACI/F,EAAAC,EAAAC,cAACiI,GAAD,CACItB,MAAOA,EACPuB,OAAQhE,EACRtB,KAAMA,EACN2B,OAAQ+B,EACRR,SAAUD,WAnCSpC,aAyCpB0E,eAEX,SAACtH,GAAD,MAAY,CACRqD,QAAS,GAETyC,MAAQ9F,EAAM8F,MACd/D,KAAO,KAEX,SAACwF,GAAD,MAAe,CACXX,aAAcY,YAAmBC,EAAcF,GAC/CZ,aAAca,YAAmBE,EAAcH,GAC/CI,YAAaH,YAAmBI,EAAaL,KAXtCD,CAaZZ,wBC/DG9H,GAAKC,IAAWC,KAAKb,GAarB4J,GAAkB,SAAAC,GAAyB,IAAvB9D,EAAuB8D,EAAvB9D,SAAaC,EAAUnE,OAAAoE,GAAA,EAAApE,CAAAgI,EAAA,cAC7C,OACI7I,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,GAAG,iBACfK,EAAAC,EAAAC,cAAA,SACIoE,YAAaU,EAAKV,YAClBwE,aAAc9D,EAAK8D,aACnBC,UAAW/D,EAAK+D,UAChBhF,SAAUiB,EAAKjB,SACfiF,OAAQhE,EAAKgE,SAEjBhJ,EAAAC,EAAAC,cAACkG,GAAD,CACIjG,UAAWR,GAAGqF,EAAKiE,iBACnB3E,YAAaU,EAAKV,YAClBC,QAASS,EAAKT,SAEbQ,KCxBXpF,GAAKC,IAAWC,KAAKC,MAkEZoJ,8MA7DXC,WAAa,WAAM,IAAAhF,EACYH,EAAKN,MAAzBjF,EADQ0F,EACR1F,MAEP2K,EAHejF,EACFiF,YAEF3K,EAAK6C,IAAI,UAGxByE,aAAe,WAAM,IAAAE,EACQjC,EAAKN,MAAvBjF,EADUwH,EACVxH,MACPuH,EAFiBC,EACJD,UACJvH,EAAK6C,IAAI,UAGtBuC,aAAe,SAACC,GAAM,IACXI,EAASJ,EAAEG,OAAXC,MADWgE,EAEOlE,EAAKN,MAAvBjF,EAFWyJ,EAEXzJ,MACPsF,EAHkBmE,EAELnE,UACJtF,EAAK6C,IAAI,MAAO4C,4EAGpB,IACEzF,EAAQgF,KAAKC,MAAbjF,KACA0K,EAA0C1F,KAA1C0F,WAAYpD,EAA8BtC,KAA9BsC,aAAclC,EAAgBJ,KAAhBI,aAC3BwF,EAAU5K,EAAK6C,IAAI,cAELtB,EAAAC,EAAAC,cAACoJ,GAAD,CACIR,aAAcrK,EAAK6C,IAAI,QACvB2H,gBAAiB,oBACjBD,OAAQnF,GAER7D,EAAAC,EAAAC,cAACoG,GAAA,EAAD,OAKJtG,EAAAC,EAAAC,cAAA,OAAMC,UAAWR,GAAG,SAChBK,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,GAAG,SAAUlB,EAAK6C,IAAI,SACtCtB,EAAAC,EAAAC,cAAA,OACIC,UAAWR,GAAG,WAEdK,EAAAC,EAAAC,cAACkG,GAAD,CACIjG,UAAW,SACXoE,QAAS4E,GAETnJ,EAAAC,EAAAC,cAACoG,GAAA,EAAD,OAEJtG,EAAAC,EAAAC,cAACkG,GAAD,CACIjG,UAAW,SACXoE,QAASwB,GAET/F,EAAAC,EAAAC,cAACoG,GAAA,EAAD,SAMhC,OACItG,EAAAC,EAAAC,cAAA,WACKmJ,UAzDE1F,aCLbhE,GAAKC,IAAWC,KAAKC,MA2DZyJ,8MA9CXC,WAAa,SAAC1F,GAAM,IACTI,EAASJ,EAAEG,OAAXC,MADSC,EAEeH,EAAKN,OAGpC+F,EALgBtF,EAETsF,cAFStF,EAEKpB,MACG1B,UAAU,SAAA5C,GAAI,OAAIA,EAAK6C,IAAI,QAAQe,SAAW6B,EAAM7B,SACjE6B,MAKfwF,eAAiB,SAAC5F,GACM,KAAdA,EAAE6F,SAAgC,IAAd7F,EAAE6F,SAA2B,UAAV7F,EAAEkD,KAAuC,KAAnBlD,EAAEG,OAAOC,OACxEJ,EAAEG,OAAO2F,UAIjB7D,aAAe,SAACjC,IAIZ+F,EAHyB7F,EAAKN,MAAtBmG,cACM/F,EAAEG,OAAO6F,QAAQ,OAAOC,aAAa,gGA1BjCC,EAAWC,GAC7B,OAAIxG,KAAKC,MAAMX,MAAMoE,aACT6C,EAAUjH,MAAMoE,4CA6BvB,IAAAlB,EAC6CxC,KAAKC,MAA/CX,EADHkD,EACGlD,MAAOiD,EADVC,EACUD,SAAUoD,EADpBnD,EACoBmD,WAAYrF,EADhCkC,EACgClC,SAG/BmG,GAF8CzG,KAA5CsC,aAA4CtC,KAA9B+F,WAA8B/F,KAAlBiG,eAEjB3G,EAAMZ,IACnB,SAAA1D,GAAI,OACAuB,EAAAC,EAAAC,cAACiK,GAAD,CACInD,IAAKvI,EAAK6C,IAAI,MACd7C,KAAMA,EACN2K,WAAYA,EACZrF,SAAUA,EACViC,SAAUA,OAKtB,OACIhG,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,GAAG,cACduK,UAnDMvG,aCAjBhE,GAAKC,IAAWC,KAAKC,MAyFZsK,8MArFXZ,WAAa,SAAE1F,GAAO,IACXuG,EAAarG,EAAKN,MAAlB2G,UACD5L,EAAOqF,EAAEG,OAAOC,MAET,KAATzF,GAAwB,OAATA,GAAkC,qBAAVA,IAI3CqF,EAAEG,OAAOC,MAAM,GAEfmG,EAAW5L,OAGf6L,cAAgB,SAACxG,GACO,KAAdA,EAAE6F,SAAgC,IAAd7F,EAAE6F,SAAqC,KAAnB7F,EAAEG,OAAOC,QACnDJ,EAAEyG,iBACFzG,EAAEG,OAAO2F,OACT9F,EAAEG,OAAOuG,YAIjB3G,aAAe,SAACC,IAEZC,EADkBC,EAAKN,MAAhBK,UACED,EAAEG,OAAOC,gFAGb,IACGsF,EAA4C/F,KAA5C+F,WAAY3F,EAAgCJ,KAAhCI,aAAcyG,EAAkB7G,KAAlB6G,cAD7BnG,EAE8EV,KAAKC,MAAjF+G,EAFFtG,EAEEsG,MAAOhI,EAFT0B,EAES1B,eAAgBgH,EAFzBtF,EAEyBsF,aAAcI,EAFvC1F,EAEuC0F,aAAca,EAFrDvG,EAEqDuG,MAAOC,EAF5DxG,EAE4DwG,SAE7DC,EAAa,eAEJ,WANRzG,EAEsErB,OAKvE8H,EAAa,gBAEH5K,EAAAC,EAAAC,cAACoG,GAAA,EAAD,MACd,OACItG,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,GAAG,YACfK,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,GAAG,QACfK,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,GAAG,UACfK,EAAAC,EAAAC,cAAA,yBAAO0K,IAEX5K,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,GAAG,aACfK,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACIoE,YAAY,eACZwE,aAAc2B,EAAMvH,MAAM,CAAC,OAAO,SAClCa,SAAUF,EACVgH,SAAS,aAEb7K,EAAAC,EAAAC,cAAC4K,GAAD,CACI/H,MAAS0H,EAAMvH,MAAM,CAAC,OAAQ,UAC9Ba,SAAY0F,EACZzD,SAAY6D,EACZT,WAAc3G,IAElBzC,EAAAC,EAAAC,cAACoJ,GAAD,CACInJ,UAAW,eACX8I,gBAAiB,oBACjB3E,YAAY,OACZ0E,OAAQQ,EACRT,UAAWuB,GAEXtK,EAAAC,EAAAC,cAACoG,GAAA,EAAD,SAIZtG,EAAAC,EAAAC,cAAA,OACIC,UAAWR,GAAG,OACd4E,QAASmG,GAET1K,EAAAC,EAAAC,cAAA,YAAO0K,IAEX5K,EAAAC,EAAAC,cAAA,OACIC,UAAWR,GAAG,UACd4E,QAASoG,GAET3K,EAAAC,EAAAC,cAAA,sCA/EJyD,aCEdoH,8MACFC,WAAa,CAETvL,IAAM,SAAEhB,GAAU,IAAA0F,EACiBH,EAAKN,MAA7BgE,EADOvD,EACPuD,aAIP,GALcvD,EACOsG,MACDvH,MAAO,CAAC,OAAQ,UAAW7B,UAAW,SAAA4J,GAAI,OAAIA,EAAK3J,IAAI,QAAQ4J,QAAQ,KAAK,MAAQzM,EAAKyM,QAAQ,KAAK,MAG9G,EAAI,CACZ,IAAMC,EAAUjK,cAAI,CAChBK,GAAK+F,KAAQC,WACb9I,KAAMA,EACN8E,YAAa,IAEjBmE,EAAahF,QAASyI,QAEtBC,MAAM,UAKd7K,OAAS,SAACgB,GAAO,IAAA0E,EACkBjC,EAAKN,MAA5BgE,EADKzB,EACLyB,aACFtG,EAFO6E,EACSwE,MACFvH,MAAO,CAAC,OAAQ,UAAW7B,UAAW,SAAA5C,GAAI,OAAIA,EAAK6C,IAAI,QAAUC,IAEjFH,GAAS,GACTsG,EAAa/E,WAAWvB,IAKhCU,OAAQ,SAACP,EAAI2C,GAAS,IAAAgE,EACalE,EAAKN,MAA5BgE,EADUQ,EACVR,aAAc+C,EADJvC,EACIuC,MAChBrJ,EAAQqJ,EAAMvH,MAAO,CAAC,OAAQ,UAAW7B,UAAW,SAAA5C,GAAI,OAAIA,EAAK6C,IAAI,QAAUC,IAC/E8J,EAAaZ,EAAMvH,MAAM,CAAC,OAAQ,UAAUtB,OAAOR,GAErD3C,EAAOyF,EAENmH,EAAWhK,UAAW,SAAA5C,GAAI,OAAIA,EAAK6C,IAAI,QAAQ4J,QAAQ,KAAK,MAAQhH,EAAMgH,QAAQ,KAAK,OAAS,IACjGE,MAAM,OACN3M,EAAOgM,EAAMvH,MAAM,CAAC,OAAQ,QAAS9B,EAAO,UAGhDsG,EAAa9E,WAAY,CAACxB,QAAO3C,UAGrC2K,WAAY,SAAC7H,GAAO,IAAA+J,EACctH,EAAKN,MAA5BgE,EADS4D,EACT5D,aACDtG,EAFUkK,EACKb,MACDvH,MAAO,CAAC,OAAQ,UAAW7B,UAAW,SAAA5C,GAAI,OAAIA,EAAK6C,IAAI,QAAUC,IAErFmG,EAAajF,eAAerB,OAKpCmK,WAAa,CACT9L,IAAK,WAAM,IAAA+L,EACqCxH,EAAKN,MAA1CiE,EADA6D,EACA7D,aAAcD,EADd8D,EACc9D,aAAc+C,EAD5Be,EAC4Bf,MAC7BjM,EAAO0C,cAAI,CACb1C,KAAOiM,EAAMvH,MAAM,CAAC,OAAQ,SAC5BH,MAAQ0H,EAAMvH,MAAM,CAAC,OAAQ,UAAUf,IAAI,SAAA1D,GAAI,OAAIA,EAAK6C,IAAI,UAC5D4E,YAAa,EACb3E,GAAK+F,KAAQC,aAGjBI,EAAavH,OAAO5B,GACpBkJ,EAAalF,QAEjBV,OAAQ,WAAM,IAAA2J,EACiCzH,EAAKN,MAAzCiE,EADG8D,EACH9D,aAAcD,EADX+D,EACW/D,aAAc+C,EADzBgB,EACyBhB,MAC7BjM,EAAO,IAAIgF,GAAMiH,EAAMnJ,IAAI,QAAQG,QAAS2F,YAElDO,EAAarH,OAAO9B,GACpBkJ,EAAalF,WAIrBkJ,aAAe,WACY1H,EAAKN,MAArBgE,aACMlF,UAGjBqB,aAAe,SAACrF,GAAS,IAGf2E,EAAQ,CACV3E,KAAOA,EACPC,KAAO,IAJYuF,EAAKN,MAArBgE,aAOM5F,OACTqB,4EAIE,IACC6H,EAAsDvH,KAAtDuH,WAAYnH,EAA0CJ,KAA1CI,aAAc0H,EAA4B9H,KAA5B8H,WAAYG,EAAgBjI,KAAhBiI,aACtCjB,EAAShH,KAAKC,MAAd+G,MAEP,OACIzK,EAAAC,EAAAC,cAAA,WAEQuK,EAAMnJ,IAAI,YACMtB,EAAAC,EAAAC,cAACyL,GAAD,CACIlB,MAAOA,EACP3H,KAAM2H,EAAMnJ,IAAI,QAChByC,SAAUF,EACVpB,eAAgBuI,EAAU,WAC1BX,UAAWW,EAAU,IACrBvB,aAAcuB,EAAU,OACxBnB,aAAcmB,EAAU,OACxBN,MAAOa,EAAWd,EAAMnJ,IAAI,SAC5BqJ,SAAUe,YAhHjB/H,aAyHlB0E,eACX,SAACtH,GAAD,MAAY,CACR0J,MAAM1J,EAAM0J,QAEhB,SAACnC,GAAD,MAAe,CACXX,aAAcY,YAAmBC,EAAcF,GAC/CZ,aAAea,YAAmBE,EAAcH,KANzCD,CAQZ0C,ICpIGpL,GAAKC,IAAWC,KAAKC,GAErB8L,8MAEFC,WAAa,WACc7H,EAAKN,MAArBgE,aAEMnF,gFAGP,IACCsJ,EAAcpI,KAAdoI,WAEP,OACI7L,EAAAC,EAAAC,cAAA,OACIC,UAAWR,GAAG,UACd4E,QAASsH,GAET7L,EAAAC,EAAAC,cAACkG,GAAD,KACIpG,EAAAC,EAAAC,cAACoG,GAAA,EAAD,eAjBU3C,aAwBf0E,eACX,KACA,SAACC,GAAD,MAAe,CACXZ,aAAea,YAAmBE,EAAcH,KAHzCD,CAKZuD,IC1BGjM,GAAKC,IAAWC,KAAKiM,GAErBC,+LAIF,IAAMlF,EAAQiB,aAAakE,QAAQ,SACpB,OAAVnF,GAAqC,qBAAXA,GACNpD,KAAKC,MAArBiE,aACMnH,UAAUwH,KAAKiE,MAAMpF,qCAMpC,OACE7G,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,GAAG,YACjBK,EAAAC,EAAAC,cAACgM,EAAD,MAEAlM,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,GAAG,SACjBK,EAAAC,EAAAC,cAACiM,GAAD,OAGFnM,EAAAC,EAAAC,cAACkM,GAAD,MACApM,EAAAC,EAAAC,cAACmM,GAAD,cAtBU1I,aA6BH0E,eACb,SAACtH,GAAD,MAAY,IAEZ,SAACuH,GAAD,MAAe,CACbX,aAAeY,YAAmBC,EAAcF,KAJrCD,CAMb0D,IC1CkBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbSC,mBAAgB,CAC3B9F,QAAM4D,UCIJmC,GAAQC,YAAYC,GAAUP,OAAOQ,8BAAgCR,OAAOQ,gCAElFC,IAASC,OACLjN,EAAAC,EAAAC,cAACgN,EAAA,EAAD,CAAUN,MAAQA,IACd5M,EAAAC,EAAAC,cAACiN,GAAD,OAEFC,SAASC,eAAe","file":"static/js/main.e7eb5541.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"word_container__14hbr\",\"word\":\"word_word__1oIdx\",\"mean\":\"word_mean__hZYdF\",\"result\":\"word_result__Zdcg-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"layout_header__1sSBx\",\"wrapper\":\"layout_wrapper__Gh19r\",\"body\":\"layout_body__3pUNW\",\"footer\":\"layout_footer__1ZPi4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wordContainerButton\":\"button_wordContainerButton__2uaGW\",\"button\":\"button_button__1jN1g\",\"inputWrapper\":\"button_inputWrapper__2bo6T\",\"innerButton-right\":\"button_innerButton-right__37eJd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"modal_wrapper__MFLJt\",\"title\":\"modal_title__2czFJ\",\"box\":\"modal_box__45WXb\",\"contents\":\"modal_contents__2KNUX\",\"meansList\":\"modal_meansList__C5E-v\",\"mean\":\"modal_mean__EMkld\",\"button\":\"modal_button__Z3JfN\",\"text\":\"modal_text__1Vovw\",\"submit\":\"modal_submit__1yWPU\",\"add\":\"modal_add__2ltqx\",\"cancel\":\"modal_cancel__1yLS0\"};","import React from 'react';\n\nimport classNames from 'classnames/bind';\n\nimport * as styles from '../style/layout.module.scss'\n\nconst cx = classNames.bind(styles);\n\n\nconst Header = () => (\n    <div className={cx('header')}> 단어장 </div>\n);\n\nexport default Header;","import {Map, List, fromJS} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CREATE = 'word/CREATE';\r\nconst UPDATE = 'word/UPDATE';\r\nconst REMOVE = 'word/REMOVE';\r\nconst LOAD_WORDS = 'word/LOAD_WORDS';\r\n\r\nexport const create = createAction(CREATE); // {id, word, means[], isComplete, wrongCount }\r\nexport const update = createAction(UPDATE); // id, word{ word, means[], isComplete, wrongCount } \r\nexport const remove = createAction(REMOVE); // id\r\nexport const loadWords = createAction(LOAD_WORDS); \r\n\r\nconst initialState = List([\r\n    /*Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"1\"]),\r\n        word : \"TEST_1\",\r\n        id : '1',\r\n        isComplete : false\r\n    }),\r\n   Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"2\"]),\r\n        word : \"TEST_2\",\r\n        id : 2,\r\n        isComplete : true\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"3\"]),\r\n        word : \"TEST_3\",\r\n        id : 3,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"4\"]),\r\n        word : \"TEST_4\",\r\n        id : 4,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"5\"]),\r\n        word : \"TEST_5\",\r\n        id : 5,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"6\"]),\r\n        word : \"TEST_6\",\r\n        id : 6,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"7\"]),\r\n        word : \"TEST_7\",\r\n        id : 7,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"8\"]),\r\n        word : \"TEST_8\",\r\n        id : 8,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"9\"]),\r\n        word : \"TEST_9\",\r\n        id : 9,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"10\"]),\r\n        word : \"TEST_10\",\r\n        id : 10,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"11\"]),\r\n        word : \"TEST_11\",\r\n        id : 11,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"12\"]),\r\n        word : \"TEST_12\",\r\n        id : 12,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"13\"]),\r\n        word : \"TEST_13\",\r\n        id : 13,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"14\"]),\r\n        word : \"TEST_14\",\r\n        id : 14,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"15\"]),\r\n        word : \"TEST_15\",\r\n        id : 15,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"16\"]),\r\n        word : \"TEST_16\",\r\n        id : 16,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"17\"]),\r\n        word : \"TEST_17\",\r\n        id : 17,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"18\"]),\r\n        word : \"TEST_18\",\r\n        id : 18,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"19\"]),\r\n        word : \"TEST_19\",\r\n        id : 19,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"20\"]),\r\n        word : \"TEST_20\",\r\n        id : 20,\r\n        isComplete : false\r\n    })*/\r\n]);\r\n\r\nexport default handleActions({\r\n    [CREATE] : (state, action) => {\r\n        return state.push( Map(action.payload) );\r\n    },\r\n    [UPDATE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload.id );\r\n\r\n        if ( !action.payload.isEqual( state.get(index).toJS() ) ) {\r\n            const word = action.payload.toImmutable();\r\n            return state.mergeIn([index],  word);\r\n        }\r\n    },\r\n    [REMOVE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload );\r\n        return state.delete(index);\r\n    },\r\n    /*[SOUND] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload );\r\n        let msg = new SpeechSynthesisUtterance(state.getIn([index, 'word']));\r\n        msg.lang='en-us';\r\n        msg.volume=1;\r\n        msg.rate=1;\r\n        msg.pitch=1;\r\n\r\n        speechSynthesis.speak(msg);\r\n\r\n        return state;\r\n\r\n    },*/\r\n    [LOAD_WORDS] : (state, action) => {\r\n        return fromJS(action.payload);\r\n    }\r\n}, initialState);","import {Map, List, fromJS} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CHANGE = 'test/CHANGE';\r\n\r\nexport const change = createAction(CHANGE); // answer\r\n\r\nconst initialState = Map ({\r\n    answers : List([])\r\n})\r\n\r\nexport default handleActions({\r\n    [CHANGE]: (state, action) => {\r\n        const {answer} = action.payload;\r\n\r\n        return state.set('answers', List( answer.split(',')\r\n                                                .map(mean => mean.toUpperCase().trim())\r\n                                                .sort()\r\n                                        )\r\n                        )\r\n    }\r\n}, initialState);","import {Map,List} from  'immutable';\r\nimport {createAction, handleActions} from  'redux-actions';\r\nimport {Record} from 'immutable';\r\n\r\nconst SHOW = 'modal/SHOW';\r\nconst HIDE = 'modal/HIDE';\r\nconst CHANGE = 'modal/CHANGE';\r\nconst TOGGLE_MEAN_MODE = 'modal/TOOGLE_MEAN_MODE';\r\nconst ADD_MEAN = 'modal/ADD_MEAN';\r\nconst REMOVE_MEAN = 'modal/REMOVE_MEAN';\r\nconst CHANGE_MEAN = 'modal/CHANGE_MEAN';\r\n\r\nexport const show = createAction(SHOW);\r\nexport const hide = createAction(HIDE);\r\nexport const change = createAction(CHANGE); // {word, mean}\r\nexport const toggleMeanMode = createAction(TOGGLE_MEAN_MODE); // index;\r\nexport const addMean = createAction(ADD_MEAN); // Map{ mean:string, id:string, isEditMode:boolean }\r\nexport const removeMean = createAction(REMOVE_MEAN); // index\r\nexport const changeMean = createAction(CHANGE_MEAN); // input{ index, mean}\r\n\r\n\r\nconst initialState = Map ( {\r\n    visible:false,\r\n    mode:'',\r\n    word: Map ( {\r\n        id : null,\r\n        word : '',\r\n        means: List([]), // means : [{id:string, mean:string, isEidtMode:boolean}]\r\n        wrongCounter : -1\r\n    })\r\n});\r\n\r\nexport default handleActions ({\r\n    [SHOW]: (state, action) => {\r\n        let word = initialState.get('word'), mode = 'add';\r\n        if ( typeof (action.payload) !== 'undefined') {\r\n            word = action.payload;\r\n            mode = 'change';\r\n        }\r\n\r\n        return state.set('visible',true).set('word', word).set('mode',mode);\r\n    },\r\n    [HIDE]: (state, action) => {\r\n        return state.set('visible', false).set('word', Map ( {\r\n            id : '',\r\n            word : '',\r\n            means: List([]), // means : [{mean:string, isEidtMode:boolean}]\r\n            wrongCounter : -1\r\n        })); \r\n    },\r\n    [CHANGE]: (state, action) => {\r\n        const word = state.getIn(['word']);\r\n        const input = action.payload;\r\n\r\n        if ( word.get('word') !== input.word ) {\r\n            return state.setIn(['word', 'word'], input.word ); \r\n        }\r\n\r\n    },\r\n    [TOGGLE_MEAN_MODE] : (state, action) => {\r\n        const index = action.payload;\r\n        const current = state.getIn(['word','means', index, 'isEditMode']);\r\n\r\n        return state.setIn(['word', 'means', index, 'isEditMode'], !current );\r\n    },\r\n    [ADD_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n\r\n        return state.setIn(['word','means'], means.push(action.payload));\r\n    },\r\n    [REMOVE_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n        const index = action.payload;\r\n    \r\n        return state.setIn(['word','means'], means.delete(index));\r\n    },\r\n    [CHANGE_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n        const {index, mean} = action.payload;\r\n        \r\n        return state.mergeIn(['word', 'means', index], Map ({isEditMode:false, mean:mean}) );\r\n\r\n    }\r\n}, initialState);","import React, {Component} from 'react';\r\nimport {Map} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Word extends Component {\r\n    static propTypes = {\r\n        word : PropTypes.string\r\n    }\r\n\r\n    render() {\r\n        const { word } = this.props;\r\n\r\n        return (\r\n            <div\r\n                className={cx('word')}\r\n            >\r\n                {word}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Word;","import React, {Component} from 'react';\r\nimport {List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//Component\r\n//import Input from './Input';\r\n\r\nclass TestForm extends Component {\r\n\r\n    handleChange = (e) => {\r\n        const { onChange } = this.props;\r\n        onChange({\r\n            answer : e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { keyword, means, onTest } = this.props;\r\n\r\n        const {handleChange} = this;\r\n\r\n        return (\r\n\r\n            <div>\r\n                <form>\r\n                    <input \r\n                        value={keyword} \r\n                        placeholder=\"단어의 뜻을 입력하세요.\" \r\n                        onChange={handleChange}\r\n                    />\r\n                </form>\r\n                <button\r\n                    onClick={onTest}\r\n                >\r\n                CHECK\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TestForm;","import React, {Component} from 'react';\r\nimport {Map} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\n//Component\r\nimport TestForm from './TestForm';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Means extends Component {\r\n    static propTypes = {\r\n        means : ImmutablePropTypes.listOf(\r\n            PropTypes.string\r\n        ),\r\n        mode : PropTypes.string,\r\n        onChange : PropTypes.func,\r\n        onTest : PropTypes.func\r\n    }\r\n\r\n    render() {\r\n        const { means, mode, onChange, onTest, onEdit } = this.props;\r\n        let contents;\r\n\r\n        if ( mode === 'test' ) {\r\n            contents = (\r\n                <TestForm\r\n                    means={means}\r\n                    onChange={onChange}\r\n                    onTest={onTest}\r\n                />\r\n            )\r\n        } else {\r\n            contents = means.toJS()[0];\r\n            for ( let i=1; i<means.size; i++ ) {\r\n                contents += (\", \"+means.toJS()[i]);\r\n            }\r\n        }\r\n        \r\n        return (\r\n            <div\r\n                onClick={onEdit}\r\n                className={cx('mean')}\r\n            >\r\n                {contents}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Means;","import React, {Component} from 'react';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport * as styles from '../style/button.module.scss';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst Button = ({children, ...rest}) => {\r\n\r\n    return (\r\n        <div \r\n            className={cx(rest.className)}\r\n            onClick={rest.onClick}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, {Component} from 'react';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport buttonStyle from '../style/button.module.scss';\r\nimport wordStyle from '../style/word.module.scss';\r\n\r\nimport Button from './Button';\r\n\r\n//icons\r\nimport {IoMdVolumeHigh} from 'react-icons/io';\r\nimport {MdDelete} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(wordStyle);\r\nconst cx2 = classNames.bind(buttonStyle);\r\n\r\nclass Result extends Component {\r\n    handleSound = (e) => {\r\n        const { word } = this.props;\r\n        // const index = state.findIndex( word => word.get('id') === action.payload );\r\n        let msg = new SpeechSynthesisUtterance(word);\r\n        msg.lang='en-us';\r\n        msg.volume=1;\r\n        msg.rate=1;\r\n        msg.pitch=1;\r\n\r\n        speechSynthesis.speak(msg);\r\n    }\r\n\r\n    handleRemove = (e) => {\r\n        const {id, onRemove} =this.props;\r\n\r\n        onRemove(id);\r\n    }\r\n\r\n    render() {\r\n        const {isComplete, onSound} = this.props;\r\n        const {handleSound, handleRemove} = this;\r\n        \r\n        return (\r\n            <div className={cx('result')}>\r\n                <Button \r\n                    className={cx2('wordContainerButton')} \r\n                    onClick={handleSound}\r\n                >\r\n                    <IoMdVolumeHigh />\r\n                </Button>\r\n                <Button \r\n                    className={cx2('wordContainerButton')} \r\n                    onClick={handleRemove}\r\n                >\r\n                    <MdDelete />\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Result;","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport styles from '../style/word.module.scss';\r\n\r\nimport Word from './Word';\r\nimport Means from './Means';\r\nimport Result from './Result';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass WordBox extends Component {\r\n    \r\n    static propTypes = {\r\n        word: ImmutablePropTypes.mapContains({\r\n            means : ImmutablePropTypes.listOf(\r\n                PropTypes.string\r\n            ),\r\n            id : PropTypes.string,\r\n            word : PropTypes.string,\r\n            mode : PropTypes.string\r\n        })\r\n        // mode : PropTypes.string,\r\n        // onCheck : PropTypes.func,\r\n        // onGiveUp : PropTypes.func\r\n    }\r\n\r\n    handleEdit = (e) => {\r\n        const {onEdit, word} = this.props;\r\n        onEdit(word.get('id'));\r\n    }\r\n\r\n    render() {\r\n        const { word,mode, onRemove } = this.props;\r\n        const {handleEdit} = this;\r\n        \r\n        return (\r\n            <div className={cx('container')}\r\n                id={word.get('id')}\r\n                onClick={handleEdit}\r\n            >\r\n                <Word \r\n                    word={word.get('word')} \r\n                    />\r\n                <Means\r\n                    means={word.get('means')}\r\n                    mode={mode}\r\n                />\r\n                <Result\r\n                    id={word.get('id')}\r\n                    word={word.get('word')}\r\n                    onRemove={onRemove}\r\n                    isComplete={word.get('isComplete')}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WordBox;","import React, {Component} from 'react';\r\n\r\nimport WordBox from './WordBox';\r\n\r\nclass WordBoxList extends Component {\r\n    \r\n    render() {\r\n        const { words, mode, onEdit, onRemove } = this.props;\r\n        const wordList = words.\r\n                            map(\r\n                                word => (\r\n                                    <WordBox\r\n                                        key={word.get('id')}\r\n                                        word={word}\r\n                                        mode={mode}\r\n                                        onEdit={onEdit}\r\n                                        onRemove={onRemove}\r\n                                    />\r\n                                )\r\n                            )\r\n\r\n        return (\r\n            <div>\r\n                {wordList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default WordBoxList;","import {Map, List, fromJS} from 'immutable';\r\nimport shortid from 'shortid';\r\n\r\nconst defaultWord = {\r\n    means : [],\r\n    word : '',\r\n    id : '',\r\n    isComplete : false\r\n};\r\n\r\nclass Word {\r\n    constructor( word ) {\r\n        for ( let key in defaultWord ) {\r\n            this[key] = word[key] || defaultWord[key];\r\n        }\r\n    }\r\n\r\n    isEqual = ( word ) => {\r\n        let isEqual = true;\r\n        for (let key in defaultWord) {\r\n            isEqual = isEqual && this[key].toString() === word[key].toString();\r\n            if (!isEqual) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return isEqual;\r\n    }\r\n\r\n    fromModal = () => {\r\n        this.means = this.means.map( mean => mean.mean );\r\n\r\n        return this;\r\n    }\r\n\r\n    toModal = () => {\r\n        //withImmutable\r\n        const word = fromJS( Map(this) )\r\n                    .set('means', List(\r\n                        this.means.map (\r\n                            mean => Map(\r\n                                { id:shortid.generate(), mean:mean, isEditMod:false}\r\n                            )\r\n                        )\r\n                    ));\r\n        return word;\r\n    }\r\n\r\n    toImmutable = () => {\r\n        return Map({\r\n            means : List(this.means),\r\n            word : this.word,\r\n            id : this.id,\r\n            isComplete : this.isComplete\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport default Word;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Map, List} from 'immutable';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as testActions from '../modules/test';\r\nimport * as modalActions from '../modules/modal';\r\n\r\nimport WordBoxList from '../components/WordBoxList';\r\nimport Word from '../class/Word';\r\n\r\nimport classNames from 'classnames/bind';\r\n\r\nclass WordBoxListContainer extends Component {\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.words.toString() !== this.props.words.toString() ) {\r\n            localStorage.setItem('words', JSON.stringify(this.props.words));\r\n        }\r\n    }\r\n\r\n    handleEdit = (id) => {\r\n        const {ModalActions, words} = this.props;\r\n        const index = words.findIndex( word => word.get('id') === id );\r\n        const word = new Word(words.get(index).toJS()).toModal();\r\n\r\n        ModalActions.show(word);\r\n    }\r\n\r\n    handleRemove = (id) => {\r\n        const {WordsActions, words} = this.props;\r\n        const index = words.findIndex( word => word.get('id') === id );\r\n\r\n        if ( index >= 0 ) {\r\n            WordsActions.remove(index);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {words, keyword, mode} = this.props;\r\n        const {handleEdit, handleRemove} = this;\r\n\r\n        return (\r\n            <WordBoxList\r\n                words={words}\r\n                search={keyword}\r\n                mode={mode}\r\n                onEdit={handleEdit}\r\n                onRemove={handleRemove}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n\r\n    (state) => ({\r\n        keyword: '',\r\n        //keyword: state.get('keyword'),\r\n        words : state.words,\r\n        mode : ''\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        ModalActions: bindActionCreators(modalActions, dispatch),\r\n        TestActions: bindActionCreators(testActions, dispatch)\r\n    })\r\n) (WordBoxListContainer);","import React from 'react';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Button from './Button';\r\n\r\nimport * as button from '../style/button.module.scss';\r\n\r\nconst cx = classNames.bind(button);\r\n\r\nconst Input = ({children, ...rest}) => {\r\n    return (\r\n        <input\r\n            placeholder={rest.placeholder}\r\n            defaultValue={rest.defaultValue}\r\n            onChange={rest.onChange}\r\n            onBlur={rest.onBlur}\r\n        />\r\n    );\r\n}\r\n        \r\nconst InputWithButton = ({children, ...rest}) => {\r\n    return (\r\n        <div className={cx('inputWrapper')}>\r\n            <input\r\n                placeholder={rest.placeholder}\r\n                defaultValue={rest.defaultValue}\r\n                onKeyDown={rest.onKeyDown}\r\n                onChange={rest.onChange}\r\n                onBlur={rest.onBlur}\r\n            />\r\n            <Button\r\n                className={cx(rest.buttonClassName)}\r\n                placeholder={rest.placeholder}\r\n                onClick={rest.onClick}\r\n            >\r\n                {children}\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {Input, InputWithButton};","import React, {Component} from 'react';\r\nimport {InputWithButton} from './Input';\r\n\r\nimport styles from '../style/modal.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Button from './Button';\r\n\r\n//icon\r\nimport {MdDelete, MdEdit} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\n\r\nclass Mean extends Component {\r\n\r\n    handleMode = () => {\r\n        const {mean, toggleMode} = this.props;\r\n\r\n        toggleMode(mean.get('id'));\r\n    }\r\n\r\n    handleRemove = () => {\r\n        const {mean, onRemove} = this.props;\r\n        onRemove(mean.get('id'));\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {value} = e.target;\r\n        const {mean, onChange} = this.props;\r\n        onChange(mean.get('id'), value);\r\n    }\r\n\r\n    render() {\r\n        const {mean} = this.props;\r\n        const {handleMode, handleRemove, handleChange} = this;\r\n        const element = mean.get('isEditMode') ?\r\n                        (\r\n                            <InputWithButton\r\n                                defaultValue={mean.get('mean')}\r\n                                buttonClassName={'innerButton-right'}\r\n                                onBlur={handleChange}\r\n                            >\r\n                                <MdEdit/>\r\n                            </InputWithButton>\r\n                        )\r\n                        :\r\n                        (   \r\n                            <div  className={cx('mean')}>\r\n                                <div className={cx('text')}>{mean.get('mean')}</div>\r\n                                <div \r\n                                    className={cx('button')}\r\n                                >\r\n                                    <Button\r\n                                        className={'button'}\r\n                                        onClick={handleMode}\r\n                                        >\r\n                                        <MdEdit/>\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={'button'}\r\n                                        onClick={handleRemove}\r\n                                    >\r\n                                        <MdDelete/>\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n\r\n        return (\r\n            <div>\r\n                {element}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Mean;","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\n\r\nimport styles from '../style/modal.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Mean from './Mean';\r\n\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass MeanList extends Component {\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.props.means.toString()\r\n                === nextProps.means.toString() ) {\r\n                    return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    handleBlur = (e) => {\r\n        const {value} = e.target;\r\n        const {onChangeMean, means } = this.props;\r\n        const findIndex = means.findIndex(mean => mean.get('mean').trim() === value.trim());\r\n        let mean = value;\r\n        onChangeMean( findIndex, mean );\r\n        \r\n    }\r\n    \r\n    handleKeyPress = (e) => {\r\n        if ( (e.keyCode === 13 || e.keyCode === 9 || e.key === 'Enter') && e.target.value !== '' ) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n    \r\n    handleRemove = (e) => {\r\n        const { onRemoveMean } = this.props;\r\n        const index = e.target.closest('div').getAttribute('index');\r\n        \r\n        onRemoveMean(index);\r\n    }\r\n    \r\n    render() {\r\n        const { means, onRemove, toggleMode, onChange } = this.props;\r\n        const { handleRemove, handleBlur, handleKeyPress} = this;\r\n\r\n        const meanList = means.map( \r\n            mean => (\r\n                <Mean\r\n                    key={mean.get('id')}\r\n                    mean={mean}\r\n                    toggleMode={toggleMode}\r\n                    onChange={onChange}\r\n                    onRemove={onRemove}\r\n                />\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div className={cx('meansList')}>\r\n                {meanList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MeanList;","import React, {Component} from 'react';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport styles from '../style/modal.module.scss';\r\n\r\nimport Button from './Button';\r\nimport {InputWithButton} from './Input';\r\nimport MeanList from './MeanList';\r\n\r\nimport {MdAdd} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Modal extends Component {\r\n\r\n    handleBlur = ( e ) => {\r\n        const {onAddMean} = this.props;\r\n        const mean = e.target.value;\r\n\r\n        if (mean === '' || mean === null || typeof(mean) === 'undefined') {\r\n            return;\r\n        }\r\n        \r\n        e.target.value='';\r\n\r\n        onAddMean( mean );\r\n    }\r\n\r\n    handleKeyDown = (e) => {\r\n        if ( (e.keyCode === 13 || e.keyCode === 9) && e.target.value !== '' ) {\r\n            e.preventDefault();\r\n            e.target.blur();\r\n            e.target.focus();\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {onChange} =this.props;\r\n        onChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const { handleBlur, handleChange, handleKeyDown } = this;\r\n        const {modal, toggleMeanMode, onChangeMean, onRemoveMean, onAdd, onCancel, mode} = this.props;\r\n\r\n        let modeString = '등록';\r\n\r\n        if (mode === 'change') {\r\n            modeString = '수정';\r\n        }\r\n        const mdAdd = <MdAdd/>;\r\n        return (\r\n            <div className={cx('wrapper')}>\r\n                <div className={cx('box')}>\r\n                    <div className={cx('title')}> \r\n                        <p>단어 {modeString}</p>\r\n                    </div>\r\n                    <div className={cx('contents')}>\r\n                        <div>\r\n                            <input\r\n                                placeholder='단어'\r\n                                defaultValue={modal.getIn(['word','word'])}\r\n                                onChange={handleChange}\r\n                                required='required'\r\n                            />\r\n                            <MeanList\r\n                                means = {modal.getIn(['word', 'means'])}\r\n                                onChange = {onChangeMean}\r\n                                onRemove = {onRemoveMean}\r\n                                toggleMode = {toggleMeanMode}\r\n                            />\r\n                            <InputWithButton\r\n                                className={'inputWrapper'}\r\n                                buttonClassName={'innerButton-right'}\r\n                                placeholder='Mean'\r\n                                onBlur={handleBlur}\r\n                                onKeyDown={handleKeyDown}\r\n                            >\r\n                                <MdAdd/>\r\n                            </InputWithButton>\r\n                        </div>\r\n                    </div>\r\n                    <div \r\n                        className={cx('add')}\r\n                        onClick={onAdd}\r\n                    >\r\n                        <span>{modeString}</span>\r\n                    </div>\r\n                    <div \r\n                        className={cx('cancel')}\r\n                        onClick={onCancel}\r\n                    >\r\n                        <span>취소</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport shortid from 'shortid';\r\n\r\nimport Word from '../class/Word';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as modalActions from '../modules/modal';\r\n\r\nimport Modal from '../components/Modal'\r\n\r\nclass WordModalContainer extends Component {\r\n    handleMean = {\r\n\r\n        add : ( mean ) => {\r\n            const {ModalActions, modal } = this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( item => item.get('mean').replace(/ /g,'') === mean.replace(/ /g,'') );\r\ndebugger;\r\n            // 입력한 뜻이 존재 하지 않을 경우\r\n            if (index < 0 ) {\r\n                const meanObj = Map({\r\n                    id : shortid.generate(),\r\n                    mean :mean,\r\n                    isEditMode : false\r\n                });\r\n                ModalActions.addMean( meanObj );\r\n            } else {\r\n                alert('exist');\r\n            }\r\n\r\n        },\r\n\r\n        remove : (id) => {\r\n            const { ModalActions, modal }= this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id);\r\n\r\n            if (index >= 0 ){\r\n                ModalActions.removeMean(index);\r\n            }\r\n            \r\n        },\r\n\r\n        change: (id, value)=> {\r\n            const { ModalActions, modal }= this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id );\r\n            const otherMeans = modal.getIn(['word', 'means']).delete(index);\r\n\r\n            let mean = value;\r\n\r\n            if ( otherMeans.findIndex( mean => mean.get('mean').replace(/ /g,'') === value.replace(/ /g,'') ) > -1 ) {\r\n                alert('dup');\r\n                mean = modal.getIn(['word', 'means', index, 'mean']);\r\n            }\r\n\r\n            ModalActions.changeMean( {index, mean} );\r\n        },\r\n        \r\n        toggleMode: (id) => {\r\n            const {ModalActions, modal} = this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id);\r\n\r\n            ModalActions.toggleMeanMode(index);\r\n        }\r\n\r\n    }\r\n\r\n    handleWord = {\r\n        add: () => {\r\n            const {WordsActions, ModalActions, modal} = this.props;\r\n            const word = Map({\r\n                word : modal.getIn(['word', 'word']),\r\n                means : modal.getIn(['word', 'means']).map(mean => mean.get('mean')),\r\n                isComplete : false,\r\n                id : shortid.generate()\r\n            });\r\n\r\n            WordsActions.create(word);\r\n            ModalActions.hide();\r\n        },\r\n        change: () => {\r\n            const {WordsActions, ModalActions, modal} =this.props;\r\n            const word = new Word( modal.get('word').toJS() ).fromModal();\r\n            \r\n            WordsActions.update(word);\r\n            ModalActions.hide();\r\n        }\r\n    }\r\n\r\n    handleCancel = () => {\r\n        const {ModalActions} = this.props;\r\n        ModalActions.hide();\r\n    }\r\n\r\n    handleChange = (word) => {\r\n        const {ModalActions} = this.props;\r\n\r\n        const input = {\r\n            word : word,\r\n            mean : ''\r\n        }\r\n\r\n        ModalActions.change(\r\n            input\r\n        );\r\n    }\r\n\r\n    render () {\r\n        const {handleMean, handleChange, handleWord, handleCancel} = this;\r\n        const {modal} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    modal.get('visible') && (\r\n                                    <Modal\r\n                                        modal={modal}\r\n                                        mode={modal.get('mode')}\r\n                                        onChange={handleChange}\r\n                                        toggleMeanMode={handleMean['toggleMode']}\r\n                                        onAddMean={handleMean['add']}\r\n                                        onChangeMean={handleMean['change']}\r\n                                        onRemoveMean={handleMean['remove']}\r\n                                        onAdd={handleWord[modal.get('mode')]}\r\n                                        onCancel={handleCancel}\r\n                                    />\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        modal:state.modal\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        ModalActions : bindActionCreators(modalActions, dispatch)\r\n    })\r\n) (WordModalContainer);","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport {bindActionCreators} from 'redux';\nimport classNames from 'classnames/bind';\nimport {MdAdd} from 'react-icons/md';\nimport {Map, List} from 'immutable';\n\nimport * as modalActions from '../modules/modal'\nimport * as styles from '../style/layout.module.scss'\n\nimport Button from '../components/Button';\n\nconst cx = classNames.bind(styles);\n\nclass FooterContainer extends Component {\n\n    handleShow = () => {\n        const {ModalActions} = this.props;\n\n        ModalActions.show();\n    }\n\n    render () {\n        const {handleShow} = this;\n\n        return (\n            <div \n                className={cx('footer')}\n                onClick={handleShow}\n            >\n                <Button>\n                    <MdAdd/>\n                </Button>\n            </div>\n        )\n    }\n};\n\nexport default connect(\n    null,\n    (dispatch) => ({\n        ModalActions : bindActionCreators(modalActions, dispatch)\n    })\n) (FooterContainer);","import React, { Component } from 'react';\nimport classNames from 'classnames/bind';\n\n//components\nimport Header from './components/Header';\n\n//containers\nimport WordBoxListContainer from './containers/WordBoxListContainer';\nimport WordModalContainer from './containers/WordModalContainer';\nimport FooterContainer from './containers/FooterContainer';\n\nimport * as wordsActions from './modules/words';\n\nimport * as layout from './style/layout.module.scss';\nimport { connect } from 'react-redux'\nimport {bindActionCreators} from 'redux';\n\nconst cx = classNames.bind(layout);\n\nclass App extends Component {\n\n  componentDidMount() {\n\n    const words = localStorage.getItem('words');\n    if ( words !== null && typeof (words) !== 'undefined' ) {\n      const {WordsActions} = this.props;\n      WordsActions.loadWords(JSON.parse(words));\n    }\n\n  }\n\n  render() {\n    return (\n      <div className={cx('wrapper')}>\n        <Header/>\n        \n        <div className={cx('body')}>\n          <WordBoxListContainer />\n        </div>\n\n        <FooterContainer/>\n        <WordModalContainer/>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n  }),\n  (dispatch) => ({\n    WordsActions : bindActionCreators(wordsActions, dispatch)\n  })\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux';\r\n\r\nimport words from './words';\r\nimport modal from './modal';\r\n\r\nexport default combineReducers({\r\n    words,modal\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from 'redux';\nimport reducers from './modules';\nimport {Provider} from 'react-redux';\n\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <Provider store ={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root')\n);\n"],"sourceRoot":""}