{"version":3,"sources":["style/word.module.scss","style/modal.module.scss","style/index.module.scss","modules/words.js","modules/test.js","components/Word.js","components/TestForm.js","components/Means.js","components/Result.js","components/WordBox.js","components/WordBoxList.js","containers/WordBoxListContainer.js","modules/modal.js","components/MeanList.js","components/Modal.js","containers/WordModalContainer.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["module","exports","container","word","mean","result","wrapper","title","box","contents","meansList","button","text","submit","add","cancel","addButton","create","createAction","update","remove","sound","loadWords","initialState","List","Map","means","id","isComplete","handleActions","_handleActions","Object","defineProperty","state","action","push","payload","index","findIndex","get","mergeIn","delete","msg","SpeechSynthesisUtterance","getIn","lang","volume","rate","pitch","speechSynthesis","speak","fromJS","change","answers","answer","set","split","map","toUpperCase","trim","sort","cx","classNames","bind","styles","Word","_this$props","this","props","react_default","a","createElement","className","Component","TestForm","handleChange","e","onChange","_this","target","value","keyword","onTest","placeholder","onClick","Means","mode","components_TestForm","toJS","i","size","style","Result","onSound","io","WordBox","handleSound","_this$props2","handleTest","components_Word","components_Means","components_Result","WordBoxList","words","search","wordList","components_WordBox","key","WordBoxListContainer","WordsActions","components_WordBoxList","connect","dispatch","bindActionCreators","wordsActions","TestActions","testActions","show","hide","addMean","removeMean","changeMean","visible","wrongCounter","modal_handleActions","_action$payload","input","setIn","isEditMode","_action$payload2","MeanList","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getAttribute","onChangeMean","handleBlur","handleKeyPress","keyCode","blur","handleRemove","onRemoveMean","meanRef","React","createRef","nextProps","nextState","toString","prevProps","prevState","snapshot","current","focus","_this2","meanList","ref","defaultValue","onBlur","onKeyPress","md","Modal","onAddMean","preventDefault","modal","onAdd","onCancel","components_MeanList","WordModalContainer","handleMean","check","ModalActions","idx","Number","_this$props3","handleAdd","_this$props4","handleCancel","components_Modal","modalActions","App","localStorage","getItem","containers_WordBoxListContainer","containers_WordModalContainer","Boolean","window","location","hostname","match","combineReducers","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.f28a331a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"word_container__14hbr\",\"word\":\"word_word__1oIdx\",\"mean\":\"word_mean__hZYdF\",\"result\":\"word_result__Zdcg-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"modal_wrapper__MFLJt\",\"title\":\"modal_title__2czFJ\",\"box\":\"modal_box__45WXb\",\"contents\":\"modal_contents__2KNUX\",\"meansList\":\"modal_meansList__C5E-v\",\"mean\":\"modal_mean__EMkld\",\"button\":\"modal_button__Z3JfN\",\"text\":\"modal_text__1Vovw\",\"submit\":\"modal_submit__1yWPU\",\"add\":\"modal_add__2ltqx\",\"cancel\":\"modal_cancel__1yLS0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addButton\":\"style_addButton__2iZB5\",\"container\":\"style_container__24BwX\",\"word\":\"style_word__259OL\",\"mean\":\"style_mean__IykvA\",\"result\":\"style_result__20gFM\",\"wrapper\":\"style_wrapper__M0sMb\",\"title\":\"style_title__1WGSW\",\"box\":\"style_box__RD1Hh\",\"contents\":\"style_contents__104Ue\",\"meansList\":\"style_meansList__3CHdo\",\"button\":\"style_button__3WSSe\",\"text\":\"style_text__ZOTRB\",\"submit\":\"style_submit__32Lfd\",\"add\":\"style_add__3TTNQ\",\"cancel\":\"style_cancel__1psXg\"};","import {Map, List, fromJS} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CREATE = 'word/CREATE';\r\nconst UPDATE = 'word/UPDATE';\r\nconst REMOVE = 'word/REMOVE';\r\nconst SOUND = 'word/SOUND';\r\nconst LOAD_WORDS = 'word/LOAD_WORDS';\r\n\r\nexport const create = createAction(CREATE); // {id, word, means[], isComplete, wrongCount }\r\nexport const update = createAction(UPDATE); // id, word{ word, means[], isComplete, wrongCount } \r\nexport const remove = createAction(REMOVE); // id\r\nexport const sound = createAction(SOUND); // id\r\nexport const loadWords = createAction(LOAD_WORDS); \r\n\r\nconst initialState = List([\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"1\"]),\r\n        word : \"TEST_1\",\r\n        id : 1,\r\n        isComplete : false\r\n    })/*,\r\n   Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"2\"]),\r\n        word : \"TEST_2\",\r\n        id : 2,\r\n        isComplete : true\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"3\"]),\r\n        word : \"TEST_3\",\r\n        id : 3,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"4\"]),\r\n        word : \"TEST_4\",\r\n        id : 4,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"5\"]),\r\n        word : \"TEST_5\",\r\n        id : 5,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"6\"]),\r\n        word : \"TEST_6\",\r\n        id : 6,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"7\"]),\r\n        word : \"TEST_7\",\r\n        id : 7,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"8\"]),\r\n        word : \"TEST_8\",\r\n        id : 8,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"9\"]),\r\n        word : \"TEST_9\",\r\n        id : 9,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"10\"]),\r\n        word : \"TEST_10\",\r\n        id : 10,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"11\"]),\r\n        word : \"TEST_11\",\r\n        id : 11,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"12\"]),\r\n        word : \"TEST_12\",\r\n        id : 12,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"13\"]),\r\n        word : \"TEST_13\",\r\n        id : 13,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"14\"]),\r\n        word : \"TEST_14\",\r\n        id : 14,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"15\"]),\r\n        word : \"TEST_15\",\r\n        id : 15,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"16\"]),\r\n        word : \"TEST_16\",\r\n        id : 16,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"17\"]),\r\n        word : \"TEST_17\",\r\n        id : 17,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"18\"]),\r\n        word : \"TEST_18\",\r\n        id : 18,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"19\"]),\r\n        word : \"TEST_19\",\r\n        id : 19,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"20\"]),\r\n        word : \"TEST_20\",\r\n        id : 20,\r\n        isComplete : false\r\n    }),*/\r\n]);\r\n\r\nexport default handleActions({\r\n    [CREATE] : (state, action) => {\r\n        return state.push( Map(action.payload) );\r\n    },\r\n    [UPDATE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload.id );\r\n\r\n        return state.mergeIn([index], action.payload.word);\r\n\r\n    },\r\n    [REMOVE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload );\r\n        \r\n        return state.delete(index);\r\n    },\r\n    [SOUND] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload );\r\n        let msg = new SpeechSynthesisUtterance(state.getIn([index, 'word']));\r\n        msg.lang='en-us';\r\n        msg.volume=1;\r\n        msg.rate=1;\r\n        msg.pitch=1;\r\n\r\n        speechSynthesis.speak(msg);\r\n\r\n    },\r\n    [LOAD_WORDS] : (state, action) => {\r\n        return fromJS(action.payload);\r\n    }\r\n}, initialState);","import {Map, List, fromJS} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CHANGE = 'test/CHANGE';\r\n\r\nexport const change = createAction(CHANGE); // answer\r\n\r\nconst initialState = Map ({\r\n    answers : List([])\r\n})\r\n\r\nexport default handleActions({\r\n    [CHANGE]: (state, action) => {\r\n        const {answer} = action.payload;\r\n\r\n        return state.set('answers', List( answer.split(',')\r\n                                                .map(mean => mean.toUpperCase().trim())\r\n                                                .sort()\r\n                                        )\r\n                        )\r\n    }\r\n}, initialState);","import React, {Component} from 'react';\r\nimport {Map} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Word extends Component {\r\n    static propTypes = {\r\n        word : PropTypes.string,\r\n        id : PropTypes.number\r\n    }\r\n\r\n    render() {\r\n        const { word, id } = this.props;\r\n\r\n        return (\r\n            <span\r\n                className={cx('word')}\r\n            >\r\n                <p>{word}</p>\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Word;","import React, {Component} from 'react';\r\nimport {List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//Component\r\n//import Input from './Input';\r\n\r\nclass TestForm extends Component {\r\n\r\n    handleChange = (e) => {\r\n        const { onChange } = this.props;\r\n        onChange({\r\n            answer : e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { keyword, means, onTest } = this.props;\r\n\r\n        const {handleChange} = this;\r\n\r\n        return (\r\n\r\n            <div>\r\n                <form>\r\n                    <input \r\n                        value={keyword} \r\n                        placeholder=\"단어의 뜻을 입력하세요.\" \r\n                        onChange={handleChange}\r\n                    />\r\n                </form>\r\n                <button\r\n                    onClick={onTest}\r\n                >\r\n                CHECK\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TestForm;","import React, {Component} from 'react';\r\nimport {Map} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\n//Component\r\nimport TestForm from './TestForm';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Means extends Component {\r\n    static propTypes = {\r\n        means : ImmutablePropTypes.listOf(\r\n            PropTypes.string\r\n        ),\r\n        mode : PropTypes.string,\r\n        onChange : PropTypes.func,\r\n        onTest : PropTypes.func\r\n    }\r\n\r\n    render() {\r\n        const { means, mode, onChange, onTest } = this.props;\r\n        let contents;\r\n\r\n        if ( mode === 'test' ) {\r\n            contents = (\r\n                <TestForm\r\n                    means={means}\r\n                    onChange={onChange}\r\n                    onTest={onTest}\r\n                />\r\n            )\r\n        } else {\r\n            contents = means.toJS()[0];\r\n            for ( let i=1; i<means.size; i++ ) {\r\n                contents += (\", \"+means.toJS()[i]);\r\n            }\r\n\r\n            contents = (<p> {contents} </p>)\r\n        }\r\n        \r\n        return (\r\n            <span\r\n                className={cx('mean')}\r\n            >\r\n                {contents}\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Means;","import React, {Component} from 'react';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport style from '../style/index.module.scss';\r\n\r\n//icons\r\nimport {IoMdVolumeHigh} from 'react-icons/io';\r\n\r\nconst cx = classNames.bind(style);\r\n\r\nclass Result extends Component {\r\n\r\n    render() {\r\n        const {isComplete, onSound, id} = this.props;\r\n\r\n        return (\r\n            <span className={cx('result')}>\r\n                <button className={cx('addButton')} onClick={onSound}>\r\n                    <IoMdVolumeHigh />\r\n                </button>\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Result;","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport styles from '../style/word.module.scss';\r\n\r\nimport Word from './Word';\r\nimport Means from './Means';\r\nimport Result from './Result';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass WordBox extends Component {\r\n    \r\n    static propTypes = {\r\n        word: ImmutablePropTypes.mapContains({\r\n            means : ImmutablePropTypes.listOf(\r\n                PropTypes.string\r\n            ),\r\n            word : PropTypes.string,\r\n            // id : PropTypes.number,\r\n            wrongCounter : PropTypes.number,\r\n            mode : PropTypes.string\r\n        })\r\n        // mode : PropTypes.string,\r\n        // onCheck : PropTypes.func,\r\n        // onGiveUp : PropTypes.func\r\n    }\r\n\r\n    handleSound = () => {\r\n        const {onSound, word} = this.props;\r\n        onSound(word.get('id'));\r\n    }\r\n\r\n    render() {\r\n        const { word,mode } = this.props;\r\n\r\n        const { handleChange, handleTest, handleSound } = this;\r\n        return (\r\n            <div className={cx('container')}>\r\n                <Word \r\n                    word={word.get('word')} \r\n                    id={word.get('id')}\r\n                />\r\n                <Means\r\n                    means={word.get('means')}\r\n                    mode={mode}\r\n                />\r\n                <Result\r\n                    id={word.get('id')}\r\n                    isComplete={word.get('isComplete')}\r\n                    onSound={handleSound}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WordBox;","import React, {Component} from 'react';\r\n\r\nimport WordBox from './WordBox';\r\n\r\nclass WordBoxList extends Component {\r\n    \r\n    render() {\r\n        const { words, search, mode, onSound } = this.props;\r\n        const wordList = words.\r\n                            map(\r\n                                word => (\r\n                                    <WordBox\r\n                                        key={word.get('id')}\r\n                                        word={word}\r\n                                        mode={mode}\r\n                                        onSound={onSound}\r\n                                    />\r\n                                )\r\n                            )\r\n\r\n        return (\r\n            <div>\r\n                {wordList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default WordBoxList;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Map, List} from 'immutable';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as testActions from '../modules/test';\r\n\r\nimport WordBoxList from '../components/WordBoxList';\r\n\r\nimport classNames from 'classnames/bind';\r\n\r\nclass WordBoxListContainer extends Component {\r\n\r\n    handleSound = (id) => {\r\n        const {WordsActions} = this.props;\r\n        WordsActions.sound(id);\r\n    }\r\n\r\n    render() {\r\n        const {words, keyword, mode} = this.props;\r\n        const {handleSound} = this;\r\n\r\n        return (\r\n            <WordBoxList\r\n                words={words}\r\n                search={keyword}\r\n                mode={mode}\r\n                onSound={handleSound}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n\r\n    (state) => ({\r\n        keyword: '',\r\n        //keyword: state.get('keyword'),\r\n        words : state.words,\r\n        mode : ''\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        TestActions: bindActionCreators(testActions, dispatch)\r\n    })\r\n) (WordBoxListContainer);","import {Map,List} from  'immutable';\r\nimport {createAction, handleActions} from  'redux-actions';\r\nimport {Record} from 'immutable';\r\n\r\nconst SHOW = 'modal/SHOW';\r\nconst HIDE = 'modal/HIDE';\r\nconst CHANGE = 'modal/CHANGE';\r\nconst ADD_MEAN = 'modal/ADD_MEAN';\r\nconst REMOVE_MEAN = 'modal/REMOVE_MEAN';\r\nconst CHANGE_MEAN = 'modal/CHANGE_MEAN';\r\n\r\nexport const show = createAction(SHOW);\r\nexport const hide = createAction(HIDE);\r\nexport const change = createAction(CHANGE); // {word, mean}\r\nexport const addMean = createAction(ADD_MEAN); // mean\r\nexport const removeMean = createAction(REMOVE_MEAN); // index\r\nexport const changeMean = createAction(CHANGE_MEAN); // input{ index, mean}\r\n\r\n\r\nconst initialState = Map ( {\r\n    visible:true,\r\n    mode:null,\r\n    word: Map ( {\r\n        id : null,\r\n        word : '',\r\n        means: List([]), // means : [{mean:string, isEidtMode:boolean}]\r\n        wrongCounter : -1\r\n    })\r\n});\r\n\r\nexport default handleActions ({\r\n    [SHOW]: (state, action) => {\r\n        const {mode, word} = action.payload;\r\n        \r\n        return state.set('visible',true)\r\n        .set('mode', mode)\r\n        .set('word', Map(word))\r\n        \r\n    },\r\n    [HIDE]: (state, action) => {\r\n        return state.set('visible', false); \r\n    },\r\n    [CHANGE]: (state, action) => {\r\n        const word = state.getIn(['word']);\r\n        const input = action.payload;\r\n\r\n        if ( word.get('word') !== input.word ) {\r\n            return state.setIn(['word', 'word'], input.word ); \r\n        }\r\n\r\n    },\r\n    [ADD_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n        const mean = Map ( {\r\n            mean : action.payload,\r\n            isEditMode : false\r\n        });\r\n\r\n        return state.setIn(['word','means'], means.push(mean));\r\n    },\r\n    [REMOVE_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n        const index = action.payload;\r\n    \r\n        return state.setIn(['word','means'], means.delete(index));\r\n    },\r\n    [CHANGE_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n        const {index, mean} = action.payload;\r\n\r\n        if ( means.getIn([index, 'isEditMode']) ) {\r\n            //to Apply == now EditMode\r\n            return state.setIn(['word', 'means', index], Map ({isEditMode:false, mean:mean}) );\r\n        } else {\r\n            //to Edit\r\n            return state.setIn(['word', 'means', index, 'isEditMode'], true);\r\n        }\r\n\r\n    }\r\n}, initialState);","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\n\r\nimport styles from '../style/modal.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\n//icon\r\nimport {MdDelete, MdEdit} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass MeanList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // create a ref to store the textInput DOM element\r\n        this.meanRef = React.createRef();\r\n      }\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.props.means.toString()\r\n                === nextProps.means.toString() ) {\r\n                    return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.meanRef.current !== null) {\r\n            this.meanRef.current.focus();\r\n        }\r\n        \r\n    }\r\n    \r\n    handleChange = (e) => {\r\n            const index = e.target.getAttribute('index');\r\n            const { onChangeMean } = this.props;\r\n            \r\n            onChangeMean( index );\r\n    }\r\n    \r\n    handleBlur = (e) => {\r\n        const {value} = e.target;\r\n        const index = e.target.getAttribute('index');\r\n        const {onChangeMean} = this.props;\r\n\r\n        onChangeMean( index, value );\r\n    }\r\n\r\n    handleKeyPress = (e) => {\r\n        if ( (e.keyCode === 13 || e.keyCode === 9 || e.key === 'Enter') && e.target.value !== '' ) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    handleRemove = (e) => {\r\n        const { onRemoveMean } = this.props;\r\n        const index = e.target.getAttribute('index');\r\n        \r\n        onRemoveMean(index);\r\n    }\r\n    \r\n    render() {\r\n        const { means } = this.props;\r\n        const { handleChange, handleRemove, handleBlur, handleKeyPress} = this;\r\n        let index = -1;\r\n        const meanList = means.map( \r\n            mean => mean.get('isEditMode') ?\r\n            (\r\n                <div className={cx('mean')}\r\n                    key={++index}\r\n                >\r\n                    <div className={cx('text')} >\r\n                        <input \r\n                            index={index} \r\n                            ref={this.meanRef}\r\n                            defaultValue={mean.get('mean')}\r\n                            onBlur={handleBlur}\r\n                            onKeyPress={handleKeyPress}\r\n                        />\r\n                    </div>\r\n                    <MdEdit className={cx('submit')} />\r\n                </div>\r\n            ) \r\n            : \r\n            ( \r\n                <div className={cx('mean')}\r\n                    key={++index}\r\n                >\r\n                    <div className={cx('text')}>{mean.get('mean')}</div>\r\n                    <div className={cx('button')} >\r\n                        <MdEdit \r\n                            index={index}\r\n                            onClick={handleChange}\r\n                        />\r\n                        <MdDelete\r\n                            index={index}\r\n                            onClick={handleRemove}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div className={cx('meansList')}>\r\n                {meanList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MeanList;","import React, {Component} from 'react';\r\n\r\nimport WordBox from './WordBox';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport styles from '../style/modal.module.scss';\r\n\r\nimport MeanList from './MeanList';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Modal extends Component {\r\n\r\n    handleBlur = ( e ) => {\r\n        const {onAddMean} = this.props;\r\n        const mean = e.target.value;\r\n\r\n        if (mean === '' || mean === null || typeof(mean) === 'undefined') {\r\n            return;\r\n        }\r\n        \r\n        e.target.value='';\r\n\r\n        onAddMean( mean );\r\n    }\r\n\r\n    handleKeyPress = (e) => {\r\n        if ( (e.keyCode === 13 || e.keyCode === 9) && e.target.value !== '' ) {\r\n            e.preventDefault();\r\n            e.target.blur();\r\n            e.target.focus();\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {onChange} =this.props;\r\n        onChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const { handleBlur, handleChange, handleKeyPress } = this;\r\n        const {modal, onChangeMean, onRemoveMean, onAdd, onCancel} = this.props;\r\n\r\n        return (\r\n            <div className={cx('wrapper')}>\r\n                <div className={cx('box')}>\r\n                    <div className={cx('title')}> \r\n                        <p>단어 등록</p>\r\n                    </div>\r\n                    <div className={cx('contents')}>\r\n                        <div>\r\n                            <input\r\n                                placeholder='단어'\r\n                                onChange={handleChange}\r\n                            />\r\n                        <MeanList\r\n                            means = {modal.getIn(['word', 'means'])}\r\n                            onChangeMean = {onChangeMean}\r\n                            onRemoveMean = {onRemoveMean}\r\n                        />\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                placeholder='Mean'\r\n                                onBlur={handleBlur}\r\n                                onKeyPress={handleKeyPress}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div \r\n                        className={cx('add')}\r\n                        onClick={onAdd}\r\n                    >\r\n                        <span>ADD</span>\r\n                    </div>\r\n                    <div \r\n                        className={cx('cancel')}\r\n                        onClick={onCancel}\r\n                    >\r\n                        <span>CANCEL</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as modalActions from '../modules/modal';\r\n\r\nimport Modal from '../components/Modal'\r\n\r\nclass WordModalContainer extends Component {\r\n    handleMean = {\r\n\r\n        check: (mean) => {\r\n            const {modal} = this.props;\r\n            const index = modal.getIn(['word', 'means']).findIndex( value => value.get('mean') === mean);\r\n            \r\n            if (index < 0 || mean === '' || mean === null || typeof(mean) === 'undefined' ) {\r\n                return -1;\r\n            }\r\n\r\n            return index;\r\n        },\r\n\r\n        add : (mean) => {\r\n            const {ModalActions, modal } = this.props;\r\n            const isExist = this.handleMean.check(mean);\r\n\r\n            // 입력한 뜻이 존재 하지 않을 경우\r\n            if (isExist < 0 ) {\r\n                ModalActions.addMean( mean );\r\n            }\r\n\r\n        },\r\n\r\n        remove : (idx) => {\r\n            const { ModalActions, modal }= this.props;\r\n            const index = Number(idx);\r\n\r\n            if (index < modal.getIn(['word','means']).size ){\r\n                \r\n                ModalActions.removeMean(index);\r\n            }\r\n            \r\n        },\r\n\r\n        change: (idx, mean)=> {\r\n            const { ModalActions, modal }= this.props;\r\n            const index = Number(idx);\r\n\r\n            ModalActions.changeMean( {index, mean} );\r\n        }\r\n\r\n    }\r\n\r\n    handleAdd = () => {\r\n        const {WordsActions, modal} = this.props;\r\n        const word = Map({\r\n            word : modal.getIn(['word', 'word']),\r\n            means : modal.getIn(['word', 'means']).map(mean => mean.get('mean')),\r\n            isComplete : false,\r\n            id : 0\r\n        });\r\n\r\n        WordsActions.create(word);\r\n    }\r\n\r\n    handleCancel = () => {\r\n        const {ModalActions} = this.props;\r\n        ModalActions.hide();\r\n    }\r\n\r\n    handleChange = (word) => {\r\n        const {ModalActions} = this.props;\r\n\r\n        const input = {\r\n            word : word,\r\n            mean : ''\r\n        }\r\n\r\n        ModalActions.change(\r\n            input\r\n        );\r\n    }\r\n\r\n    render () {\r\n        const {handleMean, handleChange, handleAdd, handleCancel} = this;\r\n        const {modal} = this.props;\r\n        return (\r\n            <div>\r\n                {\r\n                    modal.get('visible') && (\r\n                                    <Modal\r\n                                        modal={modal}\r\n                                        onChange={handleChange}\r\n                                        onAddMean={handleMean['add']}\r\n                                        onChangeMean={handleMean['change']}\r\n                                        onRemoveMean={handleMean['remove']}\r\n                                        onAdd={handleAdd}\r\n                                        onCancel={handleCancel}\r\n                                    />\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        modal:state.modal\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        ModalActions : bindActionCreators(modalActions, dispatch)\r\n    })\r\n) (WordModalContainer);","import React, { Component } from 'react';\nimport WordBoxListContainer from './containers/WordBoxListContainer';\nimport WordModalContainer from './containers/WordModalContainer';\nimport { connect } from 'react-redux'\nimport './App.scss';\n\n\nimport { bindActionCreators } from 'redux';\n\nclass App extends Component {\n\n  componentDidMount() {\n\n    const words = localStorage.getItem('words');\n    if ( words !== null && typeof (words) !== 'undefined' ) {\n      \n    } else {\n      \n    }\n\n  }\n\n  render() {\n    return (\n      <div>\n        <WordBoxListContainer />\n        <WordModalContainer/>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n  }),\n  (dispatch) => ({})\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux';\r\n\r\nimport words from './words';\r\nimport modal from './modal';\r\n\r\nexport default combineReducers({\r\n    words,modal\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from 'redux';\nimport reducers from './modules';\nimport {Provider} from 'react-redux';\n\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <Provider store ={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root')\n);\n"],"sourceRoot":""}