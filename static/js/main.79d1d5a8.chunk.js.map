{"version":3,"sources":["style/word.module.scss","style/layout.module.scss","style/modal.module.scss","style/button.module.scss","components/Button.js","components/Input.js","modules/base.js","containers/HeaderContainer.js","modules/words.js","modules/test.js","modules/modal.js","components/Word.js","components/Means.js","components/Etc.js","components/WordBox.js","components/WordBoxList.js","class/Word.js","containers/WordBoxListContainer.js","components/Mean.js","components/MeanList.js","components/Modal.js","components/Result.js","containers/WordModalContainer.js","containers/FooterContainer.js","containers/MenuContainer.js","components/FileForm.js","App.js","modules/index.js","index.js"],"names":["module","exports","container","show","overflowText","text-move","check","word","mean","etc","first","last","open","close","wordList","fileForm","text","tab1","tab2","tab3","header","wrapper","menuBase","wrapper-open","wrapper-close","menuBar","menu","buttons","body","footer","title","box","contents","meansList","button","submit","add","cancel","result","total","correct","open-result","open-wrapper","pulse","pulse-infinite","rotate","buttonRotate","wordContainerButton","fullButton","inputWrapper","innerButton-right","cx","classNames","bind","styles","Button","_ref","children","rest","Object","objectWithoutProperties","react_default","a","createElement","className","onClick","InputWithButton","React","forwardRef","props","ref","placeholder","defaultValue","onKeyDown","onChange","onBlur","onFocus","readOnly","readonly","disabled","components_Button","buttonClassName","search","createAction","setMode","switchMenu","initialState","Map","keyword","mode","isActiveMenu","handleActions","_handleActions","defineProperty","state","action","set","payload","get","HeaderContainer","handleChange","e","BaseActions","_this","value","target","handleClick","handleFocus","window","alert","blur","this","index_esm","Component","connect","base","dispatch","bindActionCreators","baseActions","create","update","remove","loadWords","List","means","id","isComplete","words_handleActions","index","findIndex","push","confirm","getIn","_ret","toJS","editMeans","_loop","key","idx","replace","splice","v","setIn","concat","delete","isEqual","toImmutable","mergeIn","filter","fromJS","change","initialize","words","wrong","test_handleActions","map","hide","toggleMeanMode","addMean","removeMean","changeMean","showResult","hideResult","visible","resultVisible","wrongCounter","modal_handleActions","input","current","_action$payload","isEditMode","actoin","Word","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createRef","prevProps","prevState","snapshot","offsetWidth","parentElement","_this$props","Means","onEdit","i","size","wordStyle","Etc","handleSound","stopPropagation","msg","SpeechSynthesisUtterance","lang","volume","rate","pitch","speechSynthesis","speak","io_index_esm","WordBox","handleCheck","handleEdit","handleBlur","_this$props2","_this$props3","onRemove","type","htmlFor","fi_index_esm","components_Word","components_Means","components_Etc","WordBoxList","isAtive","indexOf","components_WordBox","defaultWord","completeCount","toString","fromModal","toModal","shortid","generate","isEditMod","toTest","isImmu","isImmutable","WordBoxListContainer","ModalActions","handleRemove","WordsActions","answer","TestActions","testWords","answers","split","isCorrect","isEmpty","length","localStorage","setItem","JSON","stringify","_this$props4","components_WordBoxList","test","wordsActions","modalActions","testActions","Mean","handleMode","toggleMode","focus","element","md_index_esm","MeanList","onChangeMean","trim","handleKeyPress","keyCode","onRemoveMean","closest","getAttribute","nextProps","nextState","meanList","components_Mean","Modal","onAddMean","handleKeyDown","preventDefault","modal","onAdd","onCancel","modeString","required","components_MeanList","Result","WordModalContainer","handleMean","item","meanObj","otherMeans","handleWord","_this$props5","validate","_this$props6","handleCancel","_this$props7","components_Modal","components_Result","FooterContainer","handleShow","document","onchange","checkFile","accept","click","idList","querySelectorAll","file","files","fr","FileReader","onload","parse","_unused","readAsText","handleSubmit","MenuContainer","handleSwitchMenu","handleSelectMenu","textContent","animetion","FileForm","tagName","childElementCount","el","tab","charAt","j","Number","textarea","appendChild","select","execCommand","removeChild","layout","App","getItem","containers_HeaderContainer","containers_WordBoxListContainer","components_FileForm","containers_FooterContainer","containers_MenuContainer","containers_WordModalContainer","combineReducers","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","getElementById"],"mappings":"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","file":"static/js/main.79d1d5a8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"word_container__14hbr\",\"show\":\"word_show___CGe3\",\"overflowText\":\"word_overflowText__3NjVX\",\"text-move\":\"word_text-move__2Eupz\",\"check\":\"word_check__2I7jF\",\"word\":\"word_word__1oIdx\",\"mean\":\"word_mean__hZYdF\",\"etc\":\"word_etc__1aNuR\",\"first\":\"word_first__1Obmn\",\"last\":\"word_last__2Fzh1\",\"open\":\"word_open__1_ucK\",\"close\":\"word_close__3pAgf\",\"wordList\":\"word_wordList__BHlMN\",\"fileForm\":\"word_fileForm__-aloW\",\"text\":\"word_text__iUi0X\",\"tab1\":\"word_tab1__1auSw\",\"tab2\":\"word_tab2__3c16g\",\"tab3\":\"word_tab3__2P2JK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"layout_header__1sSBx\",\"wrapper\":\"layout_wrapper__Gh19r\",\"menuBase\":\"layout_menuBase__39QYI\",\"wrapper-open\":\"layout_wrapper-open__3rUuJ\",\"wrapper-close\":\"layout_wrapper-close__1LjhR\",\"open\":\"layout_open__16RXJ\",\"close\":\"layout_close__1LmDi\",\"menuBar\":\"layout_menuBar__o9d2q\",\"menu\":\"layout_menu__2CeNZ\",\"buttons\":\"layout_buttons__1Ber4\",\"body\":\"layout_body__3pUNW\",\"footer\":\"layout_footer__1ZPi4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"modal_wrapper__MFLJt\",\"title\":\"modal_title__2czFJ\",\"box\":\"modal_box__45WXb\",\"contents\":\"modal_contents__2KNUX\",\"meansList\":\"modal_meansList__C5E-v\",\"mean\":\"modal_mean__EMkld\",\"button\":\"modal_button__Z3JfN\",\"text\":\"modal_text__1Vovw\",\"submit\":\"modal_submit__1yWPU\",\"add\":\"modal_add__2ltqx\",\"cancel\":\"modal_cancel__1yLS0\",\"result\":\"modal_result__1pncu\",\"total\":\"modal_total__3LZ0M\",\"correct\":\"modal_correct__6TIqU\",\"open\":\"modal_open__3aUR3\",\"open-result\":\"modal_open-result__2-Tt_\",\"close\":\"modal_close__t50U_\",\"open-wrapper\":\"modal_open-wrapper__1GVgk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pulse\":\"button_pulse__1HtPY\",\"pulse-infinite\":\"button_pulse-infinite__1nNKW\",\"rotate\":\"button_rotate__17EPz\",\"buttonRotate\":\"button_buttonRotate__2E7TC\",\"wordContainerButton\":\"button_wordContainerButton__2uaGW\",\"button\":\"button_button__1jN1g\",\"fullButton\":\"button_fullButton__D0KYg\",\"inputWrapper\":\"button_inputWrapper__2bo6T\",\"innerButton-right\":\"button_innerButton-right__37eJd\"};","import React from 'react';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport * as styles from '../style/button.module.scss';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst Button = ({children, ...rest}) => {\r\n\r\n    return (\r\n        <div \r\n            className={cx(rest.className)}\r\n            onClick={rest.onClick}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Button from './Button';\r\n\r\nimport * as button from '../style/button.module.scss';\r\n\r\nconst cx = classNames.bind(button);\r\n\r\nconst Input = ({children, ...rest}) => {\r\n    return (\r\n        <input\r\n            placeholder={rest.placeholder}\r\n            defaultValue={rest.defaultValue}\r\n            onChange={rest.onChange}\r\n            onBlur={rest.onBlur}\r\n        />\r\n    );\r\n}\r\n        \r\nconst InputWithButton = React.forwardRef( (props,ref) => (\r\n    <div className={cx('inputWrapper')}>\r\n            <input\r\n                ref={ref}\r\n                placeholder={props.placeholder}\r\n                defaultValue={props.defaultValue}\r\n                onKeyDown={props.onKeyDown}\r\n                onChange={props.onChange}\r\n                onBlur={props.onBlur}\r\n                onFocus={props.onFocus}\r\n                readOnly={props.readonly}\r\n                disabled={props.disabled}\r\n            />\r\n            <Button\r\n                className={cx(props.buttonClassName)}\r\n                placeholder={props.placeholder}\r\n                onClick={props.onClick}\r\n            >\r\n                {props.children}\r\n            </Button>\r\n        </div>\r\n));\r\n\r\n\r\nexport {Input, InputWithButton};","import {Map} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst SEARCH = 'base/SEARCH';\r\nconst SET_MODE = 'base/SET_MODE';\r\nconst SWITCH_MENU = 'base/SWITCH_MENU';\r\n\r\nexport const search = createAction(SEARCH); //keyword\r\nexport const setMode = createAction(SET_MODE); //mode\r\nexport const switchMenu = createAction(SWITCH_MENU); \r\n\r\nconst initialState = Map({\r\n    keyword:'',\r\n    mode:'WORDS',\r\n    isActiveMenu:false\r\n});\r\n\r\nexport default handleActions ({\r\n    [SEARCH] : (state, action) => \r\n        state.set('keyword', action.payload)\r\n    ,\r\n    [SET_MODE] : (state, action) => \r\n        state.set('mode', action.payload)\r\n    ,\r\n    [SWITCH_MENU] : (state, action) => \r\n        state.set('isActiveMenu', !state.get('isActiveMenu') )\r\n}, initialState);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport {InputWithButton} from '../components/Input';\r\nimport {FaSearch,FaBars} from 'react-icons/fa'\r\n\r\nimport * as baseActions from '../modules/base'\r\nimport * as styles from '../style/layout.module.scss'\r\n\r\nimport Button from '../components/Button';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass HeaderContainer extends Component {\r\n    \r\n    handleChange = (e) => {\r\n        const {BaseActions} =this.props;\r\n        const {value} = e.target;\r\n        \r\n        BaseActions.search(value);\r\n    }\r\n    \r\n    handleClick = (e) => {\r\n        const {BaseActions} =this.props;\r\n        BaseActions.switchMenu();\r\n    }\r\n\r\n    handleFocus = (e) => {\r\n        const {mode} = this.props;\r\n\r\n        if (mode === 'TEST') {\r\n            window.alert(\"You can't use this!!\");\r\n            e.target.disabled=true;\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    render () {\r\n        const {handleChange, handleClick, handleFocus} = this;\r\n        const {mode} = this.props;\r\n\r\n        return (\r\n            <div className={cx('header')}> \r\n                <div>\r\n                    <Button\r\n                        onClick={handleClick}\r\n                        className={'rotate'}\r\n                    >\r\n                        <FaBars/>\r\n                    </Button>\r\n                </div>\r\n                <div>\r\n                    Word Book \r\n                </div>\r\n                <div>\r\n                    <InputWithButton\r\n                        buttonClassName={'innerButton-right'}\r\n                        onChange={handleChange}\r\n                        placeholder={'Search...'}\r\n                        readOnly={mode === 'TEST'}\r\n                        disabled={mode === 'TEST'}\r\n                        onFocus={handleFocus}\r\n                    >\r\n                        <FaSearch/>\r\n                    </InputWithButton>\r\n                </div>\r\n                \r\n            </div>  \r\n        )\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        mode : state.base.get('mode'),\r\n        isActiveMenu: state.base.get('isActiveMenu')\r\n    }),\r\n    (dispatch) => ({\r\n        BaseActions : bindActionCreators(baseActions, dispatch)\r\n    })\r\n) (HeaderContainer);","import {Map, List, fromJS} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CREATE = 'word/CREATE';\r\nconst UPDATE = 'word/UPDATE';\r\nconst REMOVE = 'word/REMOVE';\r\nconst LOAD_WORDS = 'word/LOAD_WORDS';\r\n\r\nexport const create = createAction(CREATE); // Map{id, word, List[means], isComplete, wrongCount }\r\nexport const update = createAction(UPDATE); // id, word{ word, List[means], isComplete, wrongCount } \r\nexport const remove = createAction(REMOVE); // List[id]\r\nexport const loadWords = createAction(LOAD_WORDS); \r\n\r\nconst initialState = List([\r\n    Map({\r\n        means : List([\"이곳을 클릭하면 수정이 가능해요!\"]),\r\n        word : \"단어가 없네요!\",\r\n        id : 'Default',\r\n        isComplete : false\r\n    })\r\n]);\r\n\r\nexport default handleActions({\r\n    [CREATE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('word') === action.payload.get('word') );\r\n\r\n        if ( index < 0) {\r\n            return state.push( action.payload );\r\n        }\r\n\r\n        if ( window.confirm( state.getIn([index,'word'])+' : Do you want Merge?') ) {\r\n            let means = state.getIn([index, 'means']).toJS();\r\n            const editMeans = action.payload.get('means').toJS();\r\n\r\n            for (let key in means) {                \r\n                let idx = editMeans.findIndex( mean => mean.replace(/ /g,'') === means[key].replace(/ /g,'') );\r\n                if (idx > -1) {\r\n                    means[key] = editMeans[idx];\r\n                    editMeans.splice(idx, 1);\r\n                }\r\n            }\r\n\r\n            return state.setIn([index,'means'], List(means.concat(editMeans)));\r\n\r\n        }\r\n\r\n        return state;\r\n    },\r\n    [UPDATE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload.id );\r\n        const isExist = state.delete(index).findIndex( word => word.get('word') === action.payload.word ) > -1;\r\n        \r\n        if ( isExist ) {\r\n            alert('it is dupplicate');\r\n            return state;\r\n        }\r\n\r\n        if ( !action.payload.isEqual( state.get(index).toJS() ) ) {\r\n            const word = action.payload.toImmutable();\r\n            return state.mergeIn([index],  word);\r\n        }\r\n\r\n    },\r\n    [REMOVE] : (state, action) => {\r\n        const result = state.filter (\r\n            word => action.payload.findIndex( id => word.get('id') === id ) <0\r\n        );\r\n\r\n        return result;\r\n\r\n    },\r\n    [LOAD_WORDS] : (state, action) => {\r\n        return fromJS(action.payload);\r\n    }\r\n}, initialState);","import {Map, List} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CHANGE = 'test/CHANGE';\r\nconst INITIALIZE = 'test/INITIALIZE';\r\nconst SUBMIT = 'test/SUBMIT';\r\n\r\nexport const change = createAction(CHANGE); // answer\r\nexport const initialize = createAction(INITIALIZE); // answer\r\nexport const submit = createAction(SUBMIT); // answer\r\n\r\nconst initialState = Map ({\r\n    words:List([]),\r\n    wrong:0,\r\n    correct:0\r\n})\r\n\r\n/**\r\n * words : List [ Map( {\r\n *                  word:string, \r\n *                  means:List([string]),\r\n *                  answers:List([string]),\r\n *                  isCorrect:boolean,\r\n *                  id:string,\r\n *                  isComplete:boolean,\r\n *                  compoleteCount:number\r\n * }) ...]\r\n */\r\n\r\nexport default handleActions({\r\n    [CHANGE]: (state, action) => {\r\n\r\n        return state.mergeIn( ['words', action.payload.index ], action.payload );\r\n    },\r\n    [INITIALIZE]: (state, action) => {\r\n        return state.set('words', action.payload);\r\n    },\r\n    [SUBMIT] : (state, action) => {\r\n        let wrong=0, correct = 0;\r\n        state.get('words').map( word => word.get('isCorrect') ? correct++ : wrong++ );\r\n\r\n        return state.set('wrong', wrong).set('correct',correct);\r\n    } \r\n}, initialState);","import {Map,List} from  'immutable';\r\nimport {createAction, handleActions} from  'redux-actions';\r\n\r\nconst SHOW = 'modal/SHOW';\r\nconst HIDE = 'modal/HIDE';\r\nconst CHANGE = 'modal/CHANGE';\r\nconst TOGGLE_MEAN_MODE = 'modal/TOOGLE_MEAN_MODE';\r\nconst ADD_MEAN = 'modal/ADD_MEAN';\r\nconst REMOVE_MEAN = 'modal/REMOVE_MEAN';\r\nconst CHANGE_MEAN = 'modal/CHANGE_MEAN';\r\n\r\nconst SHOW_RESULT = 'modal/result/SHOW';\r\nconst HIDE_RESULT = 'modal/result/HIDE';\r\n\r\nexport const show = createAction(SHOW);\r\nexport const hide = createAction(HIDE);\r\nexport const change = createAction(CHANGE); // {word, mean}\r\nexport const toggleMeanMode = createAction(TOGGLE_MEAN_MODE); // index;\r\nexport const addMean = createAction(ADD_MEAN); // Map{ mean:string, id:string, isEditMode:boolean }\r\nexport const removeMean = createAction(REMOVE_MEAN); // index\r\nexport const changeMean = createAction(CHANGE_MEAN); // input{ index, mean}\r\n\r\nexport const showResult = createAction(SHOW_RESULT);\r\nexport const hideResult = createAction(HIDE_RESULT);\r\n\r\nconst initialState = Map ( {\r\n    visible:false,\r\n    resultVisible:false,\r\n    mode:'',\r\n    word: Map ( {\r\n        id : null,\r\n        word : '',\r\n        means: List([]), // means : [{id:string, mean:string, isEidtMode:boolean}]\r\n        wrongCounter : -1\r\n    })\r\n});\r\n\r\nexport default handleActions ({\r\n    [SHOW]: (state, action) => {\r\n        let word = initialState.get('word'), mode = 'add';\r\n        if ( typeof (action.payload) !== 'undefined') {\r\n            word = action.payload;\r\n            mode = 'change';\r\n        }\r\n\r\n        return state.set('visible',true).set('word', word).set('mode',mode);\r\n    },\r\n    [HIDE]: (state, action) => {\r\n        return state.set('visible', false).set('word', Map ( {\r\n            id : '',\r\n            word : '',\r\n            means: List([]), // means : [{mean:string, isEidtMode:boolean}]\r\n            wrongCounter : -1\r\n        })); \r\n    },\r\n    [CHANGE]: (state, action) => {\r\n        const word = state.getIn(['word']);\r\n        const input = action.payload;\r\n\r\n        if ( word.get('word') !== input.word ) {\r\n            return state.setIn(['word', 'word'], input.word ); \r\n        }\r\n\r\n    },\r\n    [TOGGLE_MEAN_MODE] : (state, action) => {\r\n        const index = action.payload;\r\n        const current = state.getIn(['word','means', index, 'isEditMode']);\r\n\r\n        return state.setIn(['word', 'means', index, 'isEditMode'], !current );\r\n    },\r\n    [ADD_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n\r\n        return state.setIn(['word','means'], means.push(action.payload));\r\n    },\r\n    [REMOVE_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n        const index = action.payload;\r\n    \r\n        return state.setIn(['word','means'], means.delete(index));\r\n    },\r\n    [CHANGE_MEAN]: (state, action) => {\r\n        const {index, mean} = action.payload;\r\n        \r\n        return state.mergeIn(['word', 'means', index], Map ({isEditMode:false, mean:mean}) );\r\n\r\n    },\r\n    [SHOW_RESULT]: (state,actoin) => {\r\n        return state.set('resultVisible',true);\r\n    },\r\n    [HIDE_RESULT]: (state,actoin) => {\r\n        return state.set('resultVisible',false);\r\n    },\r\n}, initialState);","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Word extends Component {\r\n    static propTypes = {\r\n        word : PropTypes.string\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidMount(prevProps, prevState, snapshot) {\r\n        const current = this.ref.current;\r\n        \r\n        if (current.offsetWidth > current.parentElement.offsetWidth ) {\r\n            current.className = cx('overflowText');\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { word,mode } = this.props;\r\n\r\n        return (\r\n            <div\r\n                className={cx( mode!=='TEST' ? 'word' : ['word','first'] )}\r\n            >\r\n                <div>\r\n                    <span\r\n                        ref={this.ref}\r\n                    >\r\n                        {word}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Word;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Means extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidMount(prevProps, prevState, snapshot) {\r\n        const current = this.ref.current;\r\n        if (current === null ) {\r\n            return;\r\n        }\r\n        if (current.offsetWidth > current.parentElement.offsetWidth ) {\r\n            current.className = cx('overflowText');\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const current = this.ref.current;\r\n        if (current === null ) {\r\n            return;\r\n        }\r\n        if (current.offsetWidth > current.parentElement.offsetWidth ) {\r\n            current.className = cx('overflowText');\r\n        }\r\n\r\n    }\r\n\r\n    static propTypes = {\r\n        means : ImmutablePropTypes.listOf(\r\n            PropTypes.string\r\n        ),\r\n        mode : PropTypes.string,\r\n        onBlur : PropTypes.func\r\n    }\r\n\r\n    render() {\r\n        const { means, mode, onBlur, onEdit } = this.props;\r\n        let contents;\r\n\r\n        if ( mode === 'TEST' ) {\r\n            contents = (\r\n                <input\r\n                    placeholder={'ex) Mean1, Mean2'}\r\n                    onBlur={onBlur}\r\n                />\r\n            )\r\n        } else {\r\n            contents = means.toJS()[0];\r\n            for ( let i=1; i<means.size; i++ ) {\r\n                contents += (\", \"+means.toJS()[i]);\r\n            }\r\n\r\n            contents = (\r\n                <div>\r\n                    <span\r\n                        ref={this.ref}\r\n                    >\r\n                        {contents}\r\n                    </span>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n        return (\r\n            <div\r\n                onClick={onEdit}\r\n                className={cx('mean')}\r\n            >\r\n                {contents}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Means;","import React, {Component} from 'react';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport wordStyle from '../style/word.module.scss';\r\n\r\nimport Button from './Button';\r\n\r\n//icons\r\nimport {IoMdVolumeHigh} from 'react-icons/io';\r\n\r\nconst cx = classNames.bind(wordStyle);\r\n\r\nclass Etc extends Component {\r\n    handleSound = (e) => {\r\n        e.stopPropagation();\r\n        const { word } = this.props;\r\n        let msg = new SpeechSynthesisUtterance(word);\r\n        msg.lang='en-us';\r\n        msg.volume=1;\r\n        msg.rate=1;\r\n        msg.pitch=1;\r\n        \r\n        speechSynthesis.speak(msg);\r\n    }\r\n    \r\n    render() {\r\n        const {handleSound} = this;\r\n        \r\n        return (\r\n            <div className={cx(['etc','last'])}>\r\n                <Button \r\n                    className={['wordContainerButton','pulse']} \r\n                    onClick={handleSound}\r\n                >\r\n                    <IoMdVolumeHigh />\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Etc;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport styles from '../style/word.module.scss';\r\n\r\nimport Word from './Word';\r\nimport Means from './Means';\r\nimport Etc from './Etc';\r\n\r\nimport { FiSquare, FiCheckSquare} from 'react-icons/fi';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass WordBox extends Component {\r\n    \r\n    static propTypes = {\r\n        word: ImmutablePropTypes.mapContains({\r\n            means : ImmutablePropTypes.listOf(\r\n                PropTypes.string\r\n            ),\r\n            id : PropTypes.string,\r\n            word : PropTypes.string,\r\n            mode : PropTypes.string\r\n        })\r\n        // mode : PropTypes.string,\r\n        // onCheck : PropTypes.func,\r\n        // onGiveUp : PropTypes.func\r\n    }\r\n\r\n    handleCheck = (e) => {\r\n        e.stopPropagation();\r\n\r\n    }\r\n\r\n    handleEdit = (e) => {\r\n        const {onEdit, word} = this.props;\r\n        onEdit(word.get('id'));\r\n    }\r\n\r\n    handleBlur = (e) => {\r\n        const {onBlur, word} = this.props;\r\n        const {value} = e.target;\r\n\r\n        onBlur(word.get('id'), value);\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { word,mode, onRemove } = this.props;\r\n        const {handleEdit, handleCheck, handleBlur} = this;\r\n        return (\r\n            <div className={cx('container')}\r\n                key={word.get('id')}\r\n                onClick={ (mode!=='TEST') ? handleEdit:null}\r\n            >   \r\n                { (mode!=='TEST') && (\r\n                    <div\r\n                        className={cx(['check','first'])}\r\n                        >\r\n                        <input\r\n                            id={word.get('id')}\r\n                            onClick={handleCheck}\r\n                            type={'checkbox'}\r\n                            />\r\n                        <label \r\n                            onClick={handleCheck}\r\n                            htmlFor={word.get('id')}\r\n                        >\r\n                            <FiSquare/><FiCheckSquare/>\r\n                        </label>\r\n                    </div>\r\n                )}\r\n                <Word \r\n                    word={word.get('word')} \r\n                    mode={mode}\r\n                    />\r\n                <Means\r\n                    means={word.get('means')}\r\n                    mode={mode}\r\n                    onBlur={handleBlur}\r\n                />\r\n                <Etc\r\n                    id={word.get('id')}\r\n                    word={word.get('word')}\r\n                    onRemove={onRemove}\r\n                    isComplete={word.get('isComplete')}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WordBox;","import React, {Component} from 'react';\r\n\r\nimport WordBox from './WordBox';\r\n\r\nimport classNames from 'classnames/bind';\r\n\r\nimport * as styles from '../style/word.module.scss';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass WordBoxList extends Component {\r\n\r\n    render() {\r\n        const { words, mode, onEdit, onRemove, keyword, onBlur,isAtive } = this.props;\r\n        const wordList = words\r\n                            .filter(\r\n                                word => word.get('means').filter( mean => mean.indexOf(keyword) !== -1 ).size > 0\r\n                                        || word.get('word').indexOf(keyword) !== -1\r\n                            )\r\n                            .map (\r\n                                word => \r\n                                    <WordBox\r\n                                        key={word.get('id')}\r\n                                        keyword={keyword}\r\n                                        word={word}\r\n                                        mode={mode}\r\n                                        onEdit={onEdit}\r\n                                        onRemove={onRemove}\r\n                                        onBlur={onBlur}\r\n                                    />\r\n                            )\r\n\r\n        return (\r\n            <div\r\n                className={ cx( isAtive?['wordList','open']:['wordList','close'] )}\r\n            >\r\n                {wordList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default WordBoxList;","import {Map, List, fromJS, isImmutable} from 'immutable';\r\nimport shortid from 'shortid';\r\n\r\nconst defaultWord = {\r\n    means : [],\r\n    word : '',\r\n    id:'',\r\n    isComplete : false,\r\n    completeCount: -1\r\n};\r\n\r\nclass Word {\r\n    constructor( word ) {\r\n        const isImmu = isImmutable(word);\r\n\r\n        for ( let key in defaultWord ) {\r\n            this[key] = (isImmu ? word.get(key) : word[key] ) \r\n                            || defaultWord[key];\r\n        }\r\n    }\r\n\r\n    isEqual = ( word ) => {\r\n        let isEqual = true;\r\n        for (let key in defaultWord) {\r\n            isEqual = isEqual && this[key].toString() === word[key].toString();\r\n            if (!isEqual) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return isEqual;\r\n    }\r\n    fromModal = () => {\r\n        this.means = this.means.map( mean => mean.get('mean') );\r\n\r\n        return this;\r\n    }\r\n\r\n    toModal = () => {\r\n        //withImmutable\r\n        const word = fromJS( Map(this) )\r\n                    .set('means', List(\r\n                        this.means.map (\r\n                            mean => Map(\r\n                                { id:shortid.generate(), mean:mean, isEditMod:false}\r\n                            )\r\n                        )\r\n                    ));\r\n        return word;\r\n    }\r\n\r\n    toImmutable = () => {\r\n        return Map({\r\n            means : List(this.means),\r\n            word : this.word,\r\n            id : this.id,\r\n            isComplete : this.isComplete,\r\n            completeCount : this.completeCount\r\n        });\r\n    }\r\n\r\n    toTest = () => {\r\n        return this.toImmutable()\r\n                    .set('isCorrect', false)\r\n                    .set('answers', List([]))\r\n                    .set('means', List(this.means)\r\n                        .map(\r\n                            mean => mean.replace(/ /g,'')\r\n                        )\r\n                    );\r\n    }\r\n}\r\n\r\n\r\nexport default Word;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {List} from 'immutable';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as testActions from '../modules/test';\r\nimport * as modalActions from '../modules/modal';\r\nimport * as baseActions from '../modules/base';\r\n\r\nimport WordBoxList from '../components/WordBoxList';\r\nimport Word from '../class/Word';\r\n\r\nclass WordBoxListContainer extends Component {\r\n    \r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.words.toString() !== this.props.words.toString() ) {\r\n            localStorage.setItem('words', JSON.stringify(this.props.words));\r\n        }\r\n\r\n        if ( prevProps.mode !== 'TEST' && this.props.mode === 'TEST' ) {\r\n            const {TestActions, words} = this.props;\r\n            const testWords = List(words.toJS().map( word => new Word(word).toTest() ));\r\n\r\n            TestActions.initialize( testWords );\r\n        }\r\n    }\r\n\r\n    handleEdit = (id) => {\r\n        const {ModalActions, words} = this.props;\r\n        const index = words.findIndex( word => word.get('id') === id );\r\n        const word = new Word(words.get(index).toJS()).toModal();\r\n\r\n        ModalActions.show(word);\r\n    }\r\n\r\n    handleRemove = (id) => {\r\n        const {WordsActions} = this.props;\r\n\r\n        WordsActions.remove(id);\r\n    }\r\n\r\n    handleBlur = ( id, answer) => {\r\n        const {TestActions, testWords} = this.props;\r\n        const index = testWords.findIndex( word => word.get('id') === id );\r\n        const answers = answer.split(',').map( answer => answer.replace(/ /g,'') );\r\n\r\n        let isCorrect = false;\r\n\r\n        if ( testWords.getIn([index,'answers']).isEmpty() && answer === '' ) {\r\n            return;\r\n        }\r\n\r\n        if ( answers.length <= testWords.getIn([index,'means']).size ) {\r\n            isCorrect = List(answers).filter(\r\n                                answer => testWords.getIn([index,'means'])\r\n                                    .findIndex( mean => mean === answer ) < 0\r\n            ).size > 0 ? false : true;\r\n        }\r\n\r\n        TestActions.change({\r\n            index: index,\r\n            answers : List(answers),\r\n            isCorrect : isCorrect\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {words, keyword, mode} = this.props;\r\n        const {handleEdit, handleRemove, handleBlur} = this;\r\n\r\n        return (\r\n                <WordBoxList\r\n                    words={words}\r\n                    keyword={keyword}\r\n                    mode={mode}\r\n                    onEdit={handleEdit}\r\n                    onRemove={handleRemove}\r\n                    onBlur={handleBlur}\r\n                    isAtive={mode !== 'FILE FORM'}\r\n                />\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        keyword: state.base.get('keyword'),\r\n        words : state.words,\r\n        mode : state.base.get('mode'),\r\n        testWords : state.test.get('words')\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        ModalActions: bindActionCreators(modalActions, dispatch),\r\n        BaseActions: bindActionCreators(baseActions, dispatch),\r\n        TestActions: bindActionCreators(testActions, dispatch)\r\n    })\r\n) (WordBoxListContainer);","import React, {Component} from 'react';\r\nimport {InputWithButton} from './Input';\r\n\r\nimport styles from '../style/modal.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Button from './Button';\r\n\r\n//icon\r\nimport {MdDelete, MdEdit} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\n\r\nclass Mean extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.ref.current !== null) {\r\n            this.ref.current.focus();\r\n        }\r\n\r\n    }\r\n\r\n    handleMode = () => {\r\n        const {mean, toggleMode} = this.props;\r\n\r\n        toggleMode(mean.get('id'));\r\n    }\r\n\r\n    handleRemove = () => {\r\n        const {mean, onRemove} = this.props;\r\n        onRemove(mean.get('id'));\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {value} = e.target;\r\n        const {mean, onChange} = this.props;\r\n        onChange(mean.get('id'), value);\r\n    }\r\n\r\n    render() {\r\n        const {mean} = this.props;\r\n        const {handleMode, handleRemove, handleChange} = this;\r\n        const element = mean.get('isEditMode') ?\r\n                        (\r\n                            <InputWithButton\r\n                                defaultValue={mean.get('mean')}\r\n                                buttonClassName={'innerButton-right'}\r\n                                onBlur={handleChange}\r\n                                ref={this.ref}\r\n                            >\r\n                                <MdEdit/>\r\n                            </InputWithButton>\r\n                        )\r\n                        :\r\n                        (   \r\n                            <div  className={cx('mean')}>\r\n                                <div className={cx('text')}>{mean.get('mean')}</div>\r\n                                <div \r\n                                    className={cx('button')}\r\n                                >\r\n                                    <Button\r\n                                        className={'button'}\r\n                                        onClick={handleMode}\r\n                                        >\r\n                                        <MdEdit/>\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={'button'}\r\n                                        onClick={handleRemove}\r\n                                    >\r\n                                        <MdDelete/>\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n\r\n        return (\r\n            <div>\r\n                {element}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Mean;","import React, {Component} from 'react';\r\n\r\nimport styles from '../style/modal.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Mean from './Mean';\r\n\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass MeanList extends Component {\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.props.means.toString()\r\n                === nextProps.means.toString() ) {\r\n                    return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    handleBlur = (e) => {\r\n        const {value} = e.target;\r\n        const {onChangeMean, means } = this.props;\r\n        const findIndex = means.findIndex(mean => mean.get('mean').trim() === value.trim());\r\n        let mean = value;\r\n        onChangeMean( findIndex, mean );\r\n        \r\n    }\r\n    \r\n    handleKeyPress = (e) => {\r\n        if ( (e.keyCode === 13 || e.keyCode === 9 || e.key === 'Enter') && e.target.value !== '' ) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n    \r\n    handleRemove = (e) => {\r\n        const { onRemoveMean } = this.props;\r\n        const index = e.target.closest('div').getAttribute('index');\r\n        \r\n        onRemoveMean(index);\r\n    }\r\n    \r\n    render() {\r\n        const { means, onRemove, toggleMode, onChange } = this.props;\r\n\r\n        const meanList = means.map( \r\n            mean => (\r\n                <Mean\r\n                    key={mean.get('id')}\r\n                    mean={mean}\r\n                    toggleMode={toggleMode}\r\n                    onChange={onChange}\r\n                    onRemove={onRemove}\r\n                />\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div className={cx('meansList')}>\r\n                {meanList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MeanList;","import React, {Component} from 'react';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport styles from '../style/modal.module.scss';\r\n\r\nimport {InputWithButton} from './Input';\r\nimport MeanList from './MeanList';\r\n\r\nimport {MdAdd} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Modal extends Component {\r\n\r\n    handleBlur = ( e ) => {\r\n        const {onAddMean} = this.props;\r\n        const mean = e.target.value;\r\n\r\n        if (mean === '' || mean === null || typeof(mean) === 'undefined') {\r\n            return;\r\n        }\r\n        \r\n        e.target.value='';\r\n\r\n        onAddMean( mean );\r\n    }\r\n\r\n    handleKeyDown = (e) => {\r\n        if ( (e.keyCode === 13 || e.keyCode === 9) && e.target.value !== '' ) {\r\n            e.preventDefault();\r\n            e.target.blur();\r\n            e.target.focus();\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {onChange} =this.props;\r\n        onChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const { handleBlur, handleChange, handleKeyDown } = this;\r\n        const {modal, toggleMeanMode, onChangeMean, onRemoveMean, onAdd, onCancel, mode} = this.props;\r\n\r\n        let modeString = 'Add';\r\n\r\n        if (mode === 'change') {\r\n            modeString = 'Edit';\r\n        }\r\n\r\n        return (\r\n            <div className={cx('wrapper')}>\r\n                <div className={cx('box')}>\r\n                    <div className={cx('title')}> \r\n                        <p>Word {modeString}</p>\r\n                    </div>\r\n                    <div className={cx('contents')}>\r\n                        <div>\r\n                            <input\r\n                                placeholder='Word'\r\n                                defaultValue={modal.getIn(['word','word'])}\r\n                                onChange={handleChange}\r\n                                required='required'\r\n                            />\r\n                            <MeanList\r\n                                means = {modal.getIn(['word', 'means'])}\r\n                                onChange = {onChangeMean}\r\n                                onRemove = {onRemoveMean}\r\n                                toggleMode = {toggleMeanMode}\r\n                            />\r\n                            <InputWithButton\r\n                                className={'inputWrapper'}\r\n                                buttonClassName={'innerButton-right'}\r\n                                placeholder='Mean'\r\n                                onBlur={handleBlur}\r\n                                onKeyDown={handleKeyDown}\r\n                            >\r\n                                <MdAdd/>\r\n                            </InputWithButton>\r\n                        </div>\r\n                    </div>\r\n                    <div \r\n                        className={cx('add')}\r\n                        onClick={onAdd}\r\n                    >\r\n                        <span>{modeString}</span>\r\n                    </div>\r\n                    <div \r\n                        className={cx('cancel')}\r\n                        onClick={onCancel}\r\n                    >\r\n                        <span>Cancel</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, {Component} from 'react';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport * as styles from '../style/modal.module.scss';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Result extends Component {\r\n\r\n    render () {\r\n        const {correct, wrong, resultVisible, onClick} = this.props;\r\n        return ( \r\n            <div\r\n                className={cx(resultVisible?['result','open-wrapper']:'result')}\r\n                onClick={onClick}\r\n            >   \r\n                <div className={cx(resultVisible?['correct','open']:['correct','close'])} >\r\n                        {correct}\r\n                </div>\r\n                <div className={cx(['total'])}>\r\n                        /{correct+wrong}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Result;","import React, {Component} from 'react';\r\nimport {Map} from 'immutable';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport shortid from 'shortid';\r\n\r\nimport Word from '../class/Word';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as modalActions from '../modules/modal';\r\n\r\nimport Modal from '../components/Modal'\r\nimport Result from '../components/Result'\r\n\r\nclass WordModalContainer extends Component {\r\n    handleMean = {\r\n\r\n        add : ( mean ) => {\r\n            const {ModalActions, modal } = this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( item => item.get('mean').replace(/ /g,'') === mean.replace(/ /g,'') );\r\n            // 입력한 뜻이 존재 하지 않을 경우\r\n            if (index < 0 ) {\r\n                const meanObj = Map({\r\n                    id : shortid.generate(),\r\n                    mean :mean,\r\n                    isEditMode : false\r\n                });\r\n                ModalActions.addMean( meanObj );\r\n            } else {\r\n                alert('it is duplicate');\r\n            }\r\n\r\n        },\r\n\r\n        remove : (id) => {\r\n            const { ModalActions, modal }= this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id);\r\n\r\n            if (index >= 0 ){\r\n                ModalActions.removeMean(index);\r\n            }\r\n            \r\n        },\r\n\r\n        change: (id, value)=> {\r\n            const { ModalActions, modal }= this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id );\r\n            const otherMeans = modal.getIn(['word', 'means']).delete(index);\r\n\r\n            let mean = value;\r\n\r\n            if ( otherMeans.findIndex( mean => mean.get('mean').replace(/ /g,'') === value.replace(/ /g,'') ) > -1 ) {\r\n                alert('it is duplicate');\r\n                mean = modal.getIn(['word', 'means', index, 'mean']);\r\n            }\r\n\r\n            if (value === '' ) {\r\n                if ( window.confirm(\"you didn't enter anything. do you want remove this?\") ) {\r\n                    ModalActions.removeMean(index);\r\n                }\r\n                return;\r\n            }\r\n\r\n            ModalActions.changeMean( {index, mean} );\r\n        },\r\n        \r\n        toggleMode: (id) => {\r\n            const {ModalActions, modal} = this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id);\r\n\r\n            ModalActions.toggleMeanMode(index);\r\n        }\r\n\r\n    }\r\n\r\n    handleWord = {\r\n        add: () => {\r\n            const {WordsActions, ModalActions, modal} = this.props;\r\n            const word = modal.getIn(['word', 'word']);\r\n            const means = modal.getIn(['word', 'means']);\r\n\r\n            let msg = 'Please enter this:';\r\n            let validate = true;\r\n            if (word === '' ) {\r\n                validate = false;\r\n                msg += '\\n-Word'; \r\n            } \r\n            \r\n            if ( means.isEmpty() ) {\r\n                validate = false;\r\n                msg += '\\n-Means';\r\n            }\r\n\r\n            if ( !validate ) {\r\n                window.alert(msg);\r\n                return;\r\n            }\r\n            \r\n            WordsActions.create( \r\n                new Word (\r\n                    {\r\n                        word:word,\r\n                        means:means,\r\n                        id:shortid.generate()\r\n                    }\r\n                ).fromModal().toImmutable()\r\n            );\r\n            ModalActions.hide();\r\n        },\r\n        change: () => {\r\n            const {WordsActions, ModalActions, modal} =this.props;\r\n\r\n            const word = modal.getIn(['word', 'word']);\r\n            const means = modal.getIn(['word', 'means']);\r\n\r\n            let msg = 'Please enter this:';\r\n            let validate = true;\r\n            if (word === '' ) {\r\n                validate = false;\r\n                msg += '\\n-Word'; \r\n            } \r\n            \r\n            if ( means.isEmpty() ) {\r\n                validate = false;\r\n                msg += '\\n-Means';\r\n            }\r\n\r\n            if ( !validate ) {\r\n                window.alert(msg);\r\n                return;\r\n            }\r\n\r\n            WordsActions.update(\r\n                new Word( \r\n                    modal.get('word')\r\n                ).fromModal()\r\n            );\r\n            ModalActions.hide();\r\n        }\r\n    }\r\n\r\n    handleCancel = () => {\r\n        const {ModalActions} = this.props;\r\n        ModalActions.hide();\r\n    }\r\n\r\n    handleChange = (word) => {\r\n        const {ModalActions} = this.props;\r\n\r\n        const input = {\r\n            word : word,\r\n            mean : ''\r\n        }\r\n\r\n        ModalActions.change(\r\n            input\r\n        );\r\n    }\r\n\r\n    handleClick =()=> {\r\n        const {ModalActions} = this.props;\r\n        ModalActions.hideResult();\r\n    }\r\n\r\n    render () {\r\n        const {handleMean, handleChange, handleWord, handleCancel} = this;\r\n        const {modal, wrong, correct} = this.props;\r\n        const {resultVisible} = this.props;\r\n        const {handleClick} = this;\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    modal.get('visible') && (\r\n                                    <Modal\r\n                                        modal={modal}\r\n                                        mode={modal.get('mode')}\r\n                                        onChange={handleChange}\r\n                                        toggleMeanMode={handleMean['toggleMode']}\r\n                                        onAddMean={handleMean['add']}\r\n                                        onChangeMean={handleMean['change']}\r\n                                        onRemoveMean={handleMean['remove']}\r\n                                        onAdd={handleWord[modal.get('mode')]}\r\n                                        onCancel={handleCancel}\r\n                                    />\r\n                    )\r\n                }\r\n                <Result\r\n                    wrong={wrong}\r\n                    correct={correct}\r\n                    resultVisible={resultVisible}\r\n                    onClick={handleClick}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        modal:state.modal,\r\n        wrong:state.test.get('wrong'),\r\n        correct:state.test.get('correct'),\r\n        resultVisible: state.modal.get('resultVisible')\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        ModalActions : bindActionCreators(modalActions, dispatch)\r\n    })\r\n) (WordModalContainer);","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport {bindActionCreators} from 'redux';\nimport classNames from 'classnames/bind';\nimport {MdAdd, MdRemove} from 'react-icons/md';\nimport {List} from 'immutable';\n\nimport * as modalActions from '../modules/modal';\nimport * as wordsActions from '../modules/words';\nimport * as baseActions from '../modules/base';\nimport * as testActions from '../modules/test';\n\nimport * as styles from '../style/layout.module.scss';\n\nimport Button from '../components/Button';\n\nimport Word from '../class/Word';\n\nconst cx = classNames.bind(styles);\n\nclass FooterContainer extends Component {\n\n    handleShow = () => {\n        const {ModalActions} = this.props;\n        const input = document.createElement('input');\n        input.onchange = this.checkFile;\n        input.accept= 'application/json';\n        input.type='file';\n \n        if (window.confirm('Do you want add word from JSON file?')) {\n            input.click();\n            return;\n        }\n\n        ModalActions.show();\n    }\n\n    handleRemove = () => {\n        const {WordsActions} = this.props;\n        const idList = List(document.querySelectorAll('input[type=\"checkbox\"]:checked'))\n                            .map(element => element.id);\n                            \n        if ( idList.isEmpty() ) {\n            window.alert('Please select more than one!');\n            return;\n        }\n\n        if ( window.confirm('do you want remove?')) {\n            WordsActions.remove(idList);\n        }\n        \n    }\n\n    checkFile = (e) => {\n        const file = e.target.files[0];\n        const fr = new FileReader();\n\n        if (e.target.value === '' ) {\n            return;\n        }\n\n        if ( file.type !== e.target.accept ) {\n            window.alert('It is wrong file type!');\n            e.target.value='';\n            return;\n        }\n\n        fr.onload = (e) => {\n            const contents = e.target.result;\n            const {WordsActions} = this.props;\n\n            try {\n                const words = JSON.parse(contents);\n                words.map( word => WordsActions.create( new Word(word).toImmutable() ) );\n            } catch {\n                window.alert( 'Error of parsing. please check your file this site : https://jsonlint.com' );\n                return;\n            }\n        }\n        \n        fr.readAsText(file);\n\n\n    }\n\n    handleSubmit = () => {\n        const {TestActions,ModalActions,BaseActions} = this.props;\n\n        TestActions.submit();\n        BaseActions.setMode('WORDS');\n        ModalActions.showResult();\n    }\n\n    render () {\n        const {handleShow, handleRemove, handleSubmit} = this;\n        const {mode} = this.props;\n\n        const buttons = (mode !== 'TEST') ?\n        (\n            <div \n                className={cx('footer')}\n            >\n                <Button\n                    onClick={handleShow}\n                    >\n                    <MdAdd/>\n                </Button>\n                <Button\n                    onClick={handleRemove}\n                >\n                    <MdRemove/>\n                </Button>\n                \n            </div>\n        )\n        :\n        (\n            <div \n                className={cx('footer')}\n            >\n                <Button\n                    onClick={handleSubmit}\n                >\n                    SUBMIT\n                </Button>\n            </div>\n        )\n\n        return (\n            <div>\n                {buttons}\n            </div>\n        )\n    }\n};\n\nexport default connect(\n    (state) => ({\n        mode : state.base.get('mode')\n    }),\n    (dispatch) => ({\n        ModalActions : bindActionCreators(modalActions, dispatch),\n        WordsActions : bindActionCreators(wordsActions, dispatch),\n        BaseActions : bindActionCreators(baseActions, dispatch),\n        TestActions : bindActionCreators(testActions, dispatch)\n    })\n) (FooterContainer);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport Button from '../components/Button';\r\n\r\nimport * as baseActions from '../modules/base';\r\n\r\nimport {MdClose} from 'react-icons/md';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport * as styles from '../style/layout.module.scss';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass MenuContainer extends Component {\r\n\r\n    handleSwitchMenu = () => {\r\n        const {BaseActions} =this.props;\r\n        BaseActions.switchMenu();\r\n    }\r\n\r\n    handleSelectMenu = (e) => {\r\n        const {textContent} = e.target;\r\n        const {BaseActions} = this.props;\r\n\r\n        BaseActions.setMode(textContent);\r\n        BaseActions.switchMenu();\r\n    }\r\n    \r\n    render() {\r\n        const {isActiveMenu} = this.props;\r\n        const {handleSwitchMenu, handleSelectMenu} = this;\r\n        \r\n        const animetion = isActiveMenu ? 'open':'close';\r\n        return (\r\n            <div>\r\n            {\r\n                 (\r\n                    <div>\r\n                        <div className={cx('menuBase', 'wrapper-'+animetion)}\r\n                            onClick={handleSwitchMenu}\r\n                        >\r\n                        </div>\r\n                        <div className={cx('menuBar',animetion)}>\r\n                            <div className={cx('buttons')}>\r\n                                <Button\r\n                                    className={['fullButton','rotate']}\r\n                                    onClick={handleSwitchMenu}\r\n                                >\r\n                                    <MdClose/>\r\n                                </Button>\r\n                            </div>\r\n                            <div \r\n                                className={cx('menu')}\r\n                                onClick={handleSelectMenu}\r\n                                >\r\n                                WORDS\r\n                            </div>\r\n                            <div \r\n                                className={cx('menu')}\r\n                                onClick={handleSelectMenu}\r\n                                >\r\n                                TEST\r\n                            </div>\r\n                            <div\r\n                                className={cx('menu')}\r\n                                onClick={handleSelectMenu}\r\n                            >\r\n                                FILE FORM\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        isActiveMenu : state.base.get('isActiveMenu')\r\n    }),\r\n    (dispatch) => ({\r\n        BaseActions: bindActionCreators(baseActions, dispatch)\r\n    })\r\n) (MenuContainer);","import React, {Component} from 'react';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport * as styles from '../style/word.module.scss';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass FileForm extends Component{\r\n    handleClick = (e)=> {\r\n        const target = e.target.tagName === 'DIV'? e.target:e.target.parentElement;\r\n        let text = '';\r\n        for (let i=0; i<target.childElementCount; i++) { \r\n            let el = target.children[i];\r\n            let tab = el.className.charAt (\r\n                el.className.indexOf('tab') +3 \r\n                );\r\n                \r\n                for (let j=0; j<Number(tab); j++) {\r\n                text += '\\t';\r\n            }\r\n            text += el.textContent+'\\n';\r\n        }\r\n        \r\n        const textarea = document.createElement('textarea');\r\n        textarea.value = text;\r\n        document.body.appendChild(textarea);\r\n        textarea.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(textarea);\r\n\r\n        window.alert('copy complete this text!');\r\n    }\r\n    render () {\r\n        const {mode} = this.props;\r\n        const {handleClick} = this;\r\n\r\n        return (\r\n            <div className={ mode === 'FILE FORM' ? cx(['fileForm','open']) : cx(['fileForm','close']) }>\r\n                <h1>File is must be JSON. (*.json)</h1>\r\n                <div \r\n                    className={cx('text')}\r\n                    onClick={handleClick}\r\n                >\r\n                    <p>[</p>\r\n                    <p className={cx('tab1')}>{'{'}</p>\r\n                    <p className={cx('tab2')}>\"wrod\":\"enter your word to here\",</p>\r\n                    <p className={cx('tab2')}>\"means\": [</p>\r\n                    <p className={cx('tab3')}>\"enter your mean to here\", </p>\r\n                    <p className={cx('tab3')}>\"if you need more means. concat like this\",</p>\r\n                    <p className={cx('tab3')}>...</p>\r\n                    <p className={cx('tab2')}>]</p>\r\n                    <p className={cx('tab1')}>{'}'}</p>\r\n                    <p className={cx('tab1')}>{',{'}</p>\r\n                    <p className={cx('tab2')}>\"wrod\":\"if you need more words. concat like this\",</p>\r\n                    <p className={cx('tab2')}>\"means\": [</p>\r\n                    <p className={cx('tab3')}>\"enter your means to here\", </p>\r\n                    <p className={cx('tab3')}>...</p>\r\n                    <p className={cx('tab2')}>]</p>\r\n                    <p className={cx('tab1')}>{'}.....'}</p>\r\n                    <p>]</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileForm;","import React, { Component } from 'react';\nimport classNames from 'classnames/bind';\n\n//containers\nimport HeaderContainer from './containers/HeaderContainer';\nimport WordBoxListContainer from './containers/WordBoxListContainer';\nimport WordModalContainer from './containers/WordModalContainer';\nimport FooterContainer from './containers/FooterContainer';\nimport MenuContainer from './containers/MenuContainer';\n\nimport FileForm from './components/FileForm';\n\nimport * as wordsActions from './modules/words';\n\nimport * as layout from './style/layout.module.scss';\nimport { connect } from 'react-redux'\nimport {bindActionCreators} from 'redux';\n\nconst cx = classNames.bind(layout);\n\nclass App extends Component {\n  \n\n  componentDidMount() {\n\n    const words = localStorage.getItem('words');\n    if ( words !== null && typeof (words) !== 'undefined' ) {\n      const {WordsActions} = this.props;\n      WordsActions.loadWords(JSON.parse(words));\n    }\n\n  }\n\n  render() {\n    const {mode} = this.props;\n    return (\n      <div className={cx('wrapper')}>\n        <HeaderContainer/>\n        \n        <div className={cx('body')}>\n            <WordBoxListContainer/>\n            <FileForm\n              mode={mode}\n            />\n        </div>\n\n        <FooterContainer/>\n\n        <MenuContainer/>\n        <WordModalContainer/>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    mode : state.base.get('mode')\n  }),\n  (dispatch) => ({\n    WordsActions : bindActionCreators(wordsActions, dispatch)\n  })\n)(App);","import {combineReducers} from 'redux';\r\n\r\nimport words from './words';\r\nimport modal from './modal';\r\nimport base from './base';\r\nimport test from './test';\r\n\r\nexport default combineReducers({\r\n    words,modal,base,test\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {createStore} from 'redux';\nimport reducers from './modules';\nimport {Provider} from 'react-redux';\n\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <Provider store ={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root')\n);\n"],"sourceRoot":""}