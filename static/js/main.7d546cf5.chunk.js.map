{"version":3,"sources":["style/layout.module.scss","style/word.module.scss","style/modal.module.scss","style/index.module.scss","style/button.module.scss","components/Header.js","modules/words.js","modules/test.js","modules/modal.js","components/Word.js","components/TestForm.js","components/Means.js","components/Result.js","components/WordBox.js","components/WordBoxList.js","containers/WordBoxListContainer.js","components/MeanList.js","components/Modal.js","containers/WordModalContainer.js","components/Button.js","containers/FooterContainer.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["module","exports","header","wrapper","body","footer","container","word","mean","result","title","box","contents","meansList","button","text","submit","add","cancel","addButton","cx","classNames","bind","styles","Header","react_default","a","createElement","className","create","createAction","update","remove","loadWords","initialState","List","Map","means","id","isComplete","handleActions","_handleActions","Object","defineProperty","state","action","push","payload","index","findIndex","get","mergeIn","delete","fromJS","change","answers","answer","set","split","map","toUpperCase","trim","sort","show","hide","addMean","removeMean","changeMean","visible","mode","wrongCounter","modal_handleActions","getIn","input","setIn","isEditMode","_action$payload","Word","_this$props","this","props","Component","TestForm","handleChange","e","onChange","_this","target","value","keyword","onTest","placeholder","onClick","Means","components_TestForm","toJS","i","size","style","Result","handleSound","msg","SpeechSynthesisUtterance","lang","volume","rate","pitch","speechSynthesis","speak","onSound","io","WordBox","handleEdit","onEdit","tagName","closest","components_Word","components_Means","components_Result","WordBoxList","words","search","wordList","components_WordBox","key","WordBoxListContainer","ModalActions","_this$props2","components_WordBoxList","connect","dispatch","WordsActions","bindActionCreators","wordsActions","modalActions","TestActions","testActions","MeanList","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getAttribute","onChangeMean","handleBlur","handleKeyPress","keyCode","blur","handleRemove","onRemoveMean","meanRef","React","createRef","nextProps","nextState","toString","prevProps","prevState","snapshot","current","focus","_this2","meanList","ref","defaultValue","onBlur","onKeyPress","md","Modal","onAddMean","preventDefault","modal","onAdd","onCancel","components_MeanList","WordModalContainer","handleMean","check","idx","Number","_this$props3","handleAdd","_this$props4","shortid","generate","handleCancel","components_Modal","Button","_ref","children","rest","objectWithoutProperties","console","log","FooterContainer","handleShow","components_Button","layout","App","localStorage","getItem","components_Header","containers_WordBoxListContainer","containers_FooterContainer","containers_WordModalContainer","Boolean","window","location","hostname","match","combineReducers","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7d546cf5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"layout_header__1sSBx\",\"wrapper\":\"layout_wrapper__Gh19r\",\"body\":\"layout_body__3pUNW\",\"footer\":\"layout_footer__1ZPi4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"word_container__14hbr\",\"word\":\"word_word__1oIdx\",\"mean\":\"word_mean__hZYdF\",\"result\":\"word_result__Zdcg-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"modal_wrapper__MFLJt\",\"title\":\"modal_title__2czFJ\",\"box\":\"modal_box__45WXb\",\"contents\":\"modal_contents__2KNUX\",\"meansList\":\"modal_meansList__C5E-v\",\"mean\":\"modal_mean__EMkld\",\"button\":\"modal_button__Z3JfN\",\"text\":\"modal_text__1Vovw\",\"submit\":\"modal_submit__1yWPU\",\"add\":\"modal_add__2ltqx\",\"cancel\":\"modal_cancel__1yLS0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addButton\":\"style_addButton__2iZB5\",\"button\":\"style_button__3WSSe\",\"container\":\"style_container__24BwX\",\"word\":\"style_word__259OL\",\"mean\":\"style_mean__IykvA\",\"result\":\"style_result__20gFM\",\"wrapper\":\"style_wrapper__M0sMb\",\"title\":\"style_title__1WGSW\",\"box\":\"style_box__RD1Hh\",\"contents\":\"style_contents__104Ue\",\"meansList\":\"style_meansList__3CHdo\",\"text\":\"style_text__ZOTRB\",\"submit\":\"style_submit__32Lfd\",\"add\":\"style_add__3TTNQ\",\"cancel\":\"style_cancel__1psXg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addButton\":\"button_addButton__1xNIA\",\"button\":\"button_button__1jN1g\"};","import React from 'react';\n\nimport classNames from 'classnames/bind';\n\nimport * as styles from '../style/layout.module.scss'\n\nconst cx = classNames.bind(styles);\n\n\nconst Header = () => (\n    <div className={cx('header')}> 단어장 </div>\n);\n\nexport default Header;","import {Map, List, fromJS} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CREATE = 'word/CREATE';\r\nconst UPDATE = 'word/UPDATE';\r\nconst REMOVE = 'word/REMOVE';\r\nconst LOAD_WORDS = 'word/LOAD_WORDS';\r\n\r\nexport const create = createAction(CREATE); // {id, word, means[], isComplete, wrongCount }\r\nexport const update = createAction(UPDATE); // id, word{ word, means[], isComplete, wrongCount } \r\nexport const remove = createAction(REMOVE); // id\r\nexport const loadWords = createAction(LOAD_WORDS); \r\n\r\nconst initialState = List([\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"1\"]),\r\n        word : \"TEST_1\",\r\n        id : '1',\r\n        isComplete : false\r\n    })/*,\r\n   Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"2\"]),\r\n        word : \"TEST_2\",\r\n        id : 2,\r\n        isComplete : true\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"3\"]),\r\n        word : \"TEST_3\",\r\n        id : 3,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"4\"]),\r\n        word : \"TEST_4\",\r\n        id : 4,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"5\"]),\r\n        word : \"TEST_5\",\r\n        id : 5,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"6\"]),\r\n        word : \"TEST_6\",\r\n        id : 6,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"7\"]),\r\n        word : \"TEST_7\",\r\n        id : 7,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"8\"]),\r\n        word : \"TEST_8\",\r\n        id : 8,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"9\"]),\r\n        word : \"TEST_9\",\r\n        id : 9,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"10\"]),\r\n        word : \"TEST_10\",\r\n        id : 10,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"11\"]),\r\n        word : \"TEST_11\",\r\n        id : 11,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"12\"]),\r\n        word : \"TEST_12\",\r\n        id : 12,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"13\"]),\r\n        word : \"TEST_13\",\r\n        id : 13,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"14\"]),\r\n        word : \"TEST_14\",\r\n        id : 14,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"15\"]),\r\n        word : \"TEST_15\",\r\n        id : 15,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"16\"]),\r\n        word : \"TEST_16\",\r\n        id : 16,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"17\"]),\r\n        word : \"TEST_17\",\r\n        id : 17,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"18\"]),\r\n        word : \"TEST_18\",\r\n        id : 18,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"19\"]),\r\n        word : \"TEST_19\",\r\n        id : 19,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        means : List([\"T\",\"E\",\"S\",\"T\",\"20\"]),\r\n        word : \"TEST_20\",\r\n        id : 20,\r\n        isComplete : false\r\n    }),*/\r\n]);\r\n\r\nexport default handleActions({\r\n    [CREATE] : (state, action) => {\r\n        return state.push( Map(action.payload) );\r\n    },\r\n    [UPDATE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload.id );\r\n\r\n        return state.mergeIn([index], action.payload.word);\r\n\r\n    },\r\n    [REMOVE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload );\r\n        \r\n        return state.delete(index);\r\n    },\r\n    /*[SOUND] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload );\r\n        let msg = new SpeechSynthesisUtterance(state.getIn([index, 'word']));\r\n        msg.lang='en-us';\r\n        msg.volume=1;\r\n        msg.rate=1;\r\n        msg.pitch=1;\r\n\r\n        speechSynthesis.speak(msg);\r\n\r\n        return state;\r\n\r\n    },*/\r\n    [LOAD_WORDS] : (state, action) => {\r\n        return fromJS(action.payload);\r\n    }\r\n}, initialState);","import {Map, List, fromJS} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CHANGE = 'test/CHANGE';\r\n\r\nexport const change = createAction(CHANGE); // answer\r\n\r\nconst initialState = Map ({\r\n    answers : List([])\r\n})\r\n\r\nexport default handleActions({\r\n    [CHANGE]: (state, action) => {\r\n        const {answer} = action.payload;\r\n\r\n        return state.set('answers', List( answer.split(',')\r\n                                                .map(mean => mean.toUpperCase().trim())\r\n                                                .sort()\r\n                                        )\r\n                        )\r\n    }\r\n}, initialState);","import {Map,List} from  'immutable';\r\nimport {createAction, handleActions} from  'redux-actions';\r\nimport {Record} from 'immutable';\r\n\r\nconst SHOW = 'modal/SHOW';\r\nconst HIDE = 'modal/HIDE';\r\nconst CHANGE = 'modal/CHANGE';\r\nconst ADD_MEAN = 'modal/ADD_MEAN';\r\nconst REMOVE_MEAN = 'modal/REMOVE_MEAN';\r\nconst CHANGE_MEAN = 'modal/CHANGE_MEAN';\r\n\r\nexport const show = createAction(SHOW);\r\nexport const hide = createAction(HIDE);\r\nexport const change = createAction(CHANGE); // {word, mean}\r\nexport const addMean = createAction(ADD_MEAN); // mean\r\nexport const removeMean = createAction(REMOVE_MEAN); // index\r\nexport const changeMean = createAction(CHANGE_MEAN); // input{ index, mean}\r\n\r\n\r\nconst initialState = Map ( {\r\n    visible:false,\r\n    mode:null,\r\n    word: Map ( {\r\n        id : null,\r\n        word : '',\r\n        means: List([]), // means : [{mean:string, isEidtMode:boolean}]\r\n        wrongCounter : -1\r\n    })\r\n});\r\n\r\nexport default handleActions ({\r\n    [SHOW]: (state, action) => {\r\n        let word;\r\n        if ( typeof (action.payload) !== 'undefined') {\r\n            word = action.payload;\r\n        } else {\r\n            word = initialState.get('word');\r\n        }\r\n\r\n        return state.set('visible',true).set('word', word);\r\n    },\r\n    [HIDE]: (state, action) => {\r\n        return state.set('visible', false).set('word', Map ( {\r\n            id : null,\r\n            word : '',\r\n            means: List([]), // means : [{mean:string, isEidtMode:boolean}]\r\n            wrongCounter : -1\r\n        })); \r\n    },\r\n    [CHANGE]: (state, action) => {\r\n        const word = state.getIn(['word']);\r\n        const input = action.payload;\r\n\r\n        if ( word.get('word') !== input.word ) {\r\n            return state.setIn(['word', 'word'], input.word ); \r\n        }\r\n\r\n    },\r\n    [ADD_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n        const mean = Map ( {\r\n            mean : action.payload,\r\n            isEditMode : false\r\n        });\r\n\r\n        return state.setIn(['word','means'], means.push(mean));\r\n    },\r\n    [REMOVE_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n        const index = action.payload;\r\n    \r\n        return state.setIn(['word','means'], means.delete(index));\r\n    },\r\n    [CHANGE_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n        const {index, mean} = action.payload;\r\n\r\n        if ( means.getIn([index, 'isEditMode']) ) {\r\n            //to Apply == now EditMode\r\n            return state.setIn(['word', 'means', index], Map ({isEditMode:false, mean:mean}) );\r\n        } else {\r\n            //to Edit\r\n            return state.setIn(['word', 'means', index, 'isEditMode'], true);\r\n        }\r\n\r\n    }\r\n}, initialState);","import React, {Component} from 'react';\r\nimport {Map} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Word extends Component {\r\n    static propTypes = {\r\n        word : PropTypes.string,\r\n        id : PropTypes.string\r\n    }\r\n\r\n    render() {\r\n        const { word, id } = this.props;\r\n\r\n        return (\r\n            <span\r\n                className={cx('word')}\r\n            >\r\n                <p>{word}</p>\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Word;","import React, {Component} from 'react';\r\nimport {List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//Component\r\n//import Input from './Input';\r\n\r\nclass TestForm extends Component {\r\n\r\n    handleChange = (e) => {\r\n        const { onChange } = this.props;\r\n        onChange({\r\n            answer : e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { keyword, means, onTest } = this.props;\r\n\r\n        const {handleChange} = this;\r\n\r\n        return (\r\n\r\n            <div>\r\n                <form>\r\n                    <input \r\n                        value={keyword} \r\n                        placeholder=\"단어의 뜻을 입력하세요.\" \r\n                        onChange={handleChange}\r\n                    />\r\n                </form>\r\n                <button\r\n                    onClick={onTest}\r\n                >\r\n                CHECK\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TestForm;","import React, {Component} from 'react';\r\nimport {Map} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\n//Component\r\nimport TestForm from './TestForm';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Means extends Component {\r\n    static propTypes = {\r\n        means : ImmutablePropTypes.listOf(\r\n            PropTypes.string\r\n        ),\r\n        mode : PropTypes.string,\r\n        onChange : PropTypes.func,\r\n        onTest : PropTypes.func\r\n    }\r\n\r\n    render() {\r\n        const { means, mode, onChange, onTest } = this.props;\r\n        let contents;\r\n\r\n        if ( mode === 'test' ) {\r\n            contents = (\r\n                <TestForm\r\n                    means={means}\r\n                    onChange={onChange}\r\n                    onTest={onTest}\r\n                />\r\n            )\r\n        } else {\r\n            contents = means.toJS()[0];\r\n            for ( let i=1; i<means.size; i++ ) {\r\n                contents += (\", \"+means.toJS()[i]);\r\n            }\r\n\r\n            contents = (<p> {contents} </p>)\r\n        }\r\n        \r\n        return (\r\n            <span\r\n                className={cx('mean')}\r\n            >\r\n                {contents}\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Means;","import React, {Component} from 'react';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport style from '../style/index.module.scss';\r\n\r\n//icons\r\nimport {IoMdVolumeHigh} from 'react-icons/io';\r\n\r\nconst cx = classNames.bind(style);\r\n\r\nclass Result extends Component {\r\n    handleSound = (e) => {\r\n        const { word } = this.props;\r\n        // const index = state.findIndex( word => word.get('id') === action.payload );\r\n        let msg = new SpeechSynthesisUtterance(word);\r\n        msg.lang='en-us';\r\n        msg.volume=1;\r\n        msg.rate=1;\r\n        msg.pitch=1;\r\n\r\n        speechSynthesis.speak(msg);\r\n    }\r\n\r\n    render() {\r\n        const {isComplete, onSound, id} = this.props;\r\n        const {handleSound} = this;\r\n        \r\n        return (\r\n            <span className={cx('result')}>\r\n                <button className={cx('addButton')} onClick={handleSound}>\r\n                    <IoMdVolumeHigh />\r\n                </button>\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Result;","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport styles from '../style/word.module.scss';\r\n\r\nimport Word from './Word';\r\nimport Means from './Means';\r\nimport Result from './Result';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass WordBox extends Component {\r\n    \r\n    static propTypes = {\r\n        word: ImmutablePropTypes.mapContains({\r\n            means : ImmutablePropTypes.listOf(\r\n                PropTypes.string\r\n            ),\r\n            word : PropTypes.string,\r\n            id : PropTypes.string,\r\n            wrongCounter : PropTypes.number,\r\n            mode : PropTypes.string\r\n        })\r\n        // mode : PropTypes.string,\r\n        // onCheck : PropTypes.func,\r\n        // onGiveUp : PropTypes.func\r\n    }\r\n\r\n    handleEdit = (e) => {\r\n        const {onEdit} = this.props;\r\n        if ( e.target.tagName === 'DIV' || e.target.tagName === 'SPAN' ) {\r\n            \r\n            onEdit(e.target.closest('div').id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { word,mode, onEdit } = this.props;\r\n        const {handleEdit} = this;\r\n\r\n        return (\r\n            <div className={cx('container')}\r\n                id={word.get('id')}\r\n                onClick={handleEdit}\r\n            >\r\n                <Word \r\n                    word={word.get('word')} \r\n                    id={word.get('id')}\r\n                />\r\n                <Means\r\n                    means={word.get('means')}\r\n                    mode={mode}\r\n                />\r\n                <Result\r\n                    id={word.get('id')}\r\n                    word={word.get('word')}\r\n                    isComplete={word.get('isComplete')}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WordBox;","import React, {Component} from 'react';\r\n\r\nimport WordBox from './WordBox';\r\n\r\nclass WordBoxList extends Component {\r\n    \r\n    render() {\r\n        const { words, search, mode, onEdit } = this.props;\r\n        const wordList = words.\r\n                            map(\r\n                                word => (\r\n                                    <WordBox\r\n                                        key={word.get('id')}\r\n                                        word={word}\r\n                                        mode={mode}\r\n                                        onEdit={onEdit}\r\n                                    />\r\n                                )\r\n                            )\r\n\r\n        return (\r\n            <div>\r\n                {wordList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default WordBoxList;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Map, List} from 'immutable';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as testActions from '../modules/test';\r\nimport * as modalActions from '../modules/modal';\r\n\r\nimport WordBoxList from '../components/WordBoxList';\r\n\r\nimport classNames from 'classnames/bind';\r\n\r\nclass WordBoxListContainer extends Component {\r\n    handleEdit = (id) => {\r\n        const {ModalActions, words} = this.props;\r\n        const index = words.findIndex( word => word.get('id') === id );\r\n        const word = words.get(index).set('means' ,\r\n            words.get(index).get('means').map( \r\n                mean => Map({\r\n                mean : mean,\r\n                isEditMode : false\r\n        })));\r\n\r\n        ModalActions.show(word);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const {words, keyword, mode} = this.props;\r\n        const {handleEdit} = this;\r\n\r\n        return (\r\n            <WordBoxList\r\n                words={words}\r\n                search={keyword}\r\n                mode={mode}\r\n                onEdit={handleEdit}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n\r\n    (state) => ({\r\n        keyword: '',\r\n        //keyword: state.get('keyword'),\r\n        words : state.words,\r\n        mode : ''\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        ModalActions: bindActionCreators(modalActions, dispatch),\r\n        TestActions: bindActionCreators(testActions, dispatch)\r\n    })\r\n) (WordBoxListContainer);","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\n\r\nimport styles from '../style/modal.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\n//icon\r\nimport {MdDelete, MdEdit} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass MeanList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // create a ref to store the textInput DOM element\r\n        this.meanRef = React.createRef();\r\n      }\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.props.means.toString()\r\n                === nextProps.means.toString() ) {\r\n                    return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.meanRef.current !== null) {\r\n            this.meanRef.current.focus();\r\n        }\r\n        \r\n    }\r\n    \r\n    handleChange = (e) => {\r\n            const index = e.target.getAttribute('index');\r\n            const { onChangeMean } = this.props;\r\n            \r\n            onChangeMean( index );\r\n    }\r\n    \r\n    handleBlur = (e) => {\r\n        const {value} = e.target;\r\n        const index = e.target.getAttribute('index');\r\n        const {onChangeMean} = this.props;\r\n\r\n        onChangeMean( index, value );\r\n    }\r\n\r\n    handleKeyPress = (e) => {\r\n        if ( (e.keyCode === 13 || e.keyCode === 9 || e.key === 'Enter') && e.target.value !== '' ) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    handleRemove = (e) => {\r\n        const { onRemoveMean } = this.props;\r\n        const index = e.target.getAttribute('index');\r\n        \r\n        onRemoveMean(index);\r\n    }\r\n    \r\n    render() {\r\n        const { means } = this.props;\r\n        const { handleChange, handleRemove, handleBlur, handleKeyPress} = this;\r\n        let index = -1;\r\n        debugger;\r\n        const meanList = means.map( \r\n            mean => mean.get('isEditMode') ?\r\n            (\r\n                <div className={cx('mean')}\r\n                    key={++index}\r\n                >\r\n                    <div className={cx('text')} >\r\n                        <input \r\n                            index={index} \r\n                            ref={this.meanRef}\r\n                            defaultValue={mean.get('mean')}\r\n                            onBlur={handleBlur}\r\n                            onKeyPress={handleKeyPress}\r\n                        />\r\n                    </div>\r\n                    <MdEdit className={cx('submit')} />\r\n                </div>\r\n            ) \r\n            : \r\n            ( \r\n                <div className={cx('mean')}\r\n                    key={++index}\r\n                >\r\n                    <div className={cx('text')}>{mean.get('mean')}</div>\r\n                    <div className={cx('button')} >\r\n                        <MdEdit \r\n                            index={index}\r\n                            onClick={handleChange}\r\n                        />\r\n                        <MdDelete\r\n                            index={index}\r\n                            onClick={handleRemove}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div className={cx('meansList')}>\r\n                {meanList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MeanList;","import React, {Component} from 'react';\r\n\r\nimport WordBox from './WordBox';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport styles from '../style/modal.module.scss';\r\n\r\nimport MeanList from './MeanList';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Modal extends Component {\r\n\r\n    handleBlur = ( e ) => {\r\n        const {onAddMean} = this.props;\r\n        const mean = e.target.value;\r\n\r\n        if (mean === '' || mean === null || typeof(mean) === 'undefined') {\r\n            return;\r\n        }\r\n        \r\n        e.target.value='';\r\n\r\n        onAddMean( mean );\r\n    }\r\n\r\n    handleKeyPress = (e) => {\r\n        if ( (e.keyCode === 13 || e.keyCode === 9) && e.target.value !== '' ) {\r\n            e.preventDefault();\r\n            e.target.blur();\r\n            e.target.focus();\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {onChange} =this.props;\r\n        onChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const { handleBlur, handleChange, handleKeyPress } = this;\r\n        const {modal, onChangeMean, onRemoveMean, onAdd, onCancel} = this.props;\r\n        return (\r\n            <div className={cx('wrapper')}>\r\n                <div className={cx('box')}>\r\n                    <div className={cx('title')}> \r\n                        <p>단어 등록</p>\r\n                    </div>\r\n                    <div className={cx('contents')}>\r\n                        <div>\r\n                            <input\r\n                                placeholder='단어'\r\n                                defaultValue={modal.getIn(['word','word'])}\r\n                                onChange={handleChange}\r\n                                />\r\n                        <MeanList\r\n                            means = {modal.getIn(['word', 'means'])}\r\n                            onChangeMean = {onChangeMean}\r\n                            onRemoveMean = {onRemoveMean}\r\n                        />\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                placeholder='Mean'\r\n                                onBlur={handleBlur}\r\n                                onKeyPress={handleKeyPress}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div \r\n                        className={cx('add')}\r\n                        onClick={onAdd}\r\n                    >\r\n                        <span>ADD</span>\r\n                    </div>\r\n                    <div \r\n                        className={cx('cancel')}\r\n                        onClick={onCancel}\r\n                    >\r\n                        <span>CANCEL</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport shortid from 'shortid';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as modalActions from '../modules/modal';\r\n\r\nimport Modal from '../components/Modal'\r\n\r\nclass WordModalContainer extends Component {\r\n    handleMean = {\r\n\r\n        check: (mean) => {\r\n            const {modal} = this.props;\r\n            const index = modal.getIn(['word', 'means']).findIndex( value => value.get('mean') === mean);\r\n            \r\n            if (index < 0 || mean === '' || mean === null || typeof(mean) === 'undefined' ) {\r\n                return -1;\r\n            }\r\n\r\n            return index;\r\n        },\r\n\r\n        add : (mean) => {\r\n            const {ModalActions, modal } = this.props;\r\n            const isExist = this.handleMean.check(mean);\r\n\r\n            // 입력한 뜻이 존재 하지 않을 경우\r\n            if (isExist < 0 ) {\r\n                ModalActions.addMean( mean );\r\n            }\r\n\r\n        },\r\n\r\n        remove : (idx) => {\r\n            const { ModalActions, modal }= this.props;\r\n            const index = Number(idx);\r\n\r\n            if (index < modal.getIn(['word','means']).size ){\r\n                \r\n                ModalActions.removeMean(index);\r\n            }\r\n            \r\n        },\r\n\r\n        change: (idx, mean)=> {\r\n            const { ModalActions, modal }= this.props;\r\n            const index = Number(idx);\r\n\r\n            ModalActions.changeMean( {index, mean} );\r\n        }\r\n\r\n    }\r\n\r\n    handleAdd = () => {\r\n        const {WordsActions, ModalActions, modal} = this.props;\r\n        const word = Map({\r\n            word : modal.getIn(['word', 'word']),\r\n            means : modal.getIn(['word', 'means']).map(mean => mean.get('mean')),\r\n            isComplete : false,\r\n            id : shortid.generate()\r\n        });\r\n\r\n        WordsActions.create(word);\r\n        ModalActions.hide();\r\n    }\r\n\r\n    handleCancel = () => {\r\n        const {ModalActions} = this.props;\r\n        ModalActions.hide();\r\n    }\r\n\r\n    handleChange = (word) => {\r\n        const {ModalActions} = this.props;\r\n\r\n        const input = {\r\n            word : word,\r\n            mean : ''\r\n        }\r\n\r\n        ModalActions.change(\r\n            input\r\n        );\r\n    }\r\n\r\n    render () {\r\n        const {handleMean, handleChange, handleAdd, handleCancel} = this;\r\n        const {modal} = this.props;\r\n        return (\r\n            <div>\r\n                {\r\n                    modal.get('visible') && (\r\n                                    <Modal\r\n                                        modal={modal}\r\n                                        onChange={handleChange}\r\n                                        onAddMean={handleMean['add']}\r\n                                        onChangeMean={handleMean['change']}\r\n                                        onRemoveMean={handleMean['remove']}\r\n                                        onAdd={handleAdd}\r\n                                        onCancel={handleCancel}\r\n                                    />\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        modal:state.modal\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        ModalActions : bindActionCreators(modalActions, dispatch)\r\n    })\r\n) (WordModalContainer);","import React, {Component} from 'react';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport * as styles from '../style/button.module.scss';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst Button = ({children, ...rest}) => {\r\n\r\n    console.log(rest);\r\n    return (\r\n        <div \r\n            className={cx(rest.className)}\r\n            onClick={rest.onClick}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport {bindActionCreators} from 'redux';\nimport classNames from 'classnames/bind';\nimport {MdAdd} from 'react-icons/md';\nimport {Map, List} from 'immutable';\n\nimport * as modalActions from '../modules/modal'\nimport * as styles from '../style/layout.module.scss'\n\nimport Button from '../components/Button';\n\nconst cx = classNames.bind(styles);\n\nclass FooterContainer extends Component {\n\n    handleShow = () => {\n        const {ModalActions} = this.props;\n\n        ModalActions.show();\n    }\n\n    render () {\n        const {handleShow} = this;\n\n        return (\n            <div className={cx('footer')}>\n                <Button\n                    className={'button'}\n                    onClick={handleShow}\n                >\n                    <MdAdd/>\n                </Button>\n            </div>\n        )\n    }\n};\n\nexport default connect(\n    null,\n    (dispatch) => ({\n        ModalActions : bindActionCreators(modalActions, dispatch)\n    })\n) (FooterContainer);","import React, { Component } from 'react';\nimport classNames from 'classnames/bind';\n\n//components\nimport Header from './components/Header';\n\n//containers\nimport WordBoxListContainer from './containers/WordBoxListContainer';\nimport WordModalContainer from './containers/WordModalContainer';\nimport FooterContainer from './containers/FooterContainer';\n\nimport * as layout from './style/layout.module.scss';\nimport { connect } from 'react-redux'\n\nconst cx = classNames.bind(layout);\n\nclass App extends Component {\n\n  componentDidMount() {\n\n    const words = localStorage.getItem('words');\n    if ( words !== null && typeof (words) !== 'undefined' ) {\n      \n    } else {\n      \n    }\n\n  }\n\n  render() {\n    return (\n      <div className={cx('wrapper')}>\n        <Header/>\n        \n        <div className={cx('body')}>\n          <WordBoxListContainer />\n        </div>\n\n        <FooterContainer/>\n        <WordModalContainer/>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n  }),\n  (dispatch) => ({})\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux';\r\n\r\nimport words from './words';\r\nimport modal from './modal';\r\n\r\nexport default combineReducers({\r\n    words,modal\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from 'redux';\nimport reducers from './modules';\nimport {Provider} from 'react-redux';\n\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <Provider store ={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root')\n);\n"],"sourceRoot":""}