{"version":3,"sources":["style/word.module.scss","style/layout.module.scss","style/modal.module.scss","style/button.module.scss","components/Button.js","components/Input.js","modules/base.js","containers/HeaderContainer.js","modules/words.js","modules/test.js","modules/modal.js","components/Word.js","components/TestForm.js","components/Means.js","components/Etc.js","components/WordBox.js","components/WordBoxList.js","class/Word.js","containers/WordBoxListContainer.js","components/Mean.js","components/MeanList.js","components/Modal.js","containers/WordModalContainer.js","containers/FooterContainer.js","App.js","modules/index.js","index.js"],"names":["module","exports","container","show","overflowText","text-move","check","word","mean","etc","header","wrapper","body","footer","title","box","contents","meansList","button","text","submit","add","cancel","wordContainerButton","inputWrapper","innerButton-right","cx","classNames","bind","styles","Button","_ref","children","rest","Object","objectWithoutProperties","react_default","a","createElement","className","onClick","InputWithButton","React","forwardRef","props","ref","placeholder","defaultValue","onKeyDown","onChange","onBlur","components_Button","buttonClassName","search","createAction","setMode","initialState","Map","keyword","mode","handleActions","_handleActions","defineProperty","state","action","set","payload","HeaderContainer","handleChange","e","BaseActions","_this","value","target","this","index_esm","Component","connect","base","get","dispatch","bindActionCreators","baseActions","create","update","remove","loadWords","List","means","id","isComplete","words_handleActions","index","findIndex","push","window","confirm","_ret","getIn","toJS","editMeans","_loop","key","idx","replace","splice","v","setIn","concat","delete","alert","isEqual","toImmutable","mergeIn","filter","fromJS","change","answers","answer","split","map","toUpperCase","trim","sort","hide","toggleMeanMode","addMean","removeMean","changeMean","visible","wrongCounter","modal_handleActions","input","current","_action$payload","isEditMode","Word","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createRef","prevProps","prevState","snapshot","offsetWidth","parentElement","TestForm","_this$props","onTest","Means","onEdit","components_TestForm","i","size","wordStyle","Etc","handleSound","stopPropagation","msg","SpeechSynthesisUtterance","lang","volume","rate","pitch","speechSynthesis","speak","io_index_esm","WordBox","handleCheck","handleEdit","_this$props2","onRemove","type","htmlFor","fi_index_esm","components_Word","components_Means","components_Etc","WordBoxList","words","wordList","indexOf","components_WordBox","defaultWord","toString","fromModal","toModal","shortid","generate","isEditMod","WordBoxListContainer","ModalActions","handleRemove","WordsActions","localStorage","setItem","JSON","stringify","components_WordBoxList","wordsActions","modalActions","TestActions","testActions","Mean","handleMode","toggleMode","_this$props3","focus","element","md_index_esm","MeanList","handleBlur","onChangeMean","handleKeyPress","keyCode","blur","onRemoveMean","closest","getAttribute","nextProps","nextState","meanList","components_Mean","Modal","onAddMean","handleKeyDown","preventDefault","modal","onAdd","onCancel","modeString","required","components_MeanList","WordModalContainer","handleMean","item","meanObj","otherMeans","_this$props4","handleWord","_this$props5","validate","isEmpty","_this$props6","handleCancel","components_Modal","FooterContainer","handleShow","idList","document","querySelectorAll","layout","App","getItem","parse","containers_HeaderContainer","containers_WordBoxListContainer","containers_FooterContainer","containers_WordModalContainer","combineReducers","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","getElementById"],"mappings":"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","file":"static/js/main.b52a84c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"word_container__14hbr\",\"show\":\"word_show___CGe3\",\"overflowText\":\"word_overflowText__3NjVX\",\"text-move\":\"word_text-move__2Eupz\",\"check\":\"word_check__2I7jF\",\"word\":\"word_word__1oIdx\",\"mean\":\"word_mean__hZYdF\",\"etc\":\"word_etc__1aNuR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"layout_header__1sSBx\",\"wrapper\":\"layout_wrapper__Gh19r\",\"body\":\"layout_body__3pUNW\",\"footer\":\"layout_footer__1ZPi4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"modal_wrapper__MFLJt\",\"title\":\"modal_title__2czFJ\",\"box\":\"modal_box__45WXb\",\"contents\":\"modal_contents__2KNUX\",\"meansList\":\"modal_meansList__C5E-v\",\"mean\":\"modal_mean__EMkld\",\"button\":\"modal_button__Z3JfN\",\"text\":\"modal_text__1Vovw\",\"submit\":\"modal_submit__1yWPU\",\"add\":\"modal_add__2ltqx\",\"cancel\":\"modal_cancel__1yLS0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wordContainerButton\":\"button_wordContainerButton__2uaGW\",\"button\":\"button_button__1jN1g\",\"inputWrapper\":\"button_inputWrapper__2bo6T\",\"innerButton-right\":\"button_innerButton-right__37eJd\"};","import React from 'react';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport * as styles from '../style/button.module.scss';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst Button = ({children, ...rest}) => {\r\n\r\n    return (\r\n        <div \r\n            className={cx(rest.className)}\r\n            onClick={rest.onClick}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Button from './Button';\r\n\r\nimport * as button from '../style/button.module.scss';\r\n\r\nconst cx = classNames.bind(button);\r\n\r\nconst Input = ({children, ...rest}) => {\r\n    return (\r\n        <input\r\n            placeholder={rest.placeholder}\r\n            defaultValue={rest.defaultValue}\r\n            onChange={rest.onChange}\r\n            onBlur={rest.onBlur}\r\n        />\r\n    );\r\n}\r\n        \r\nconst InputWithButton = React.forwardRef( (props,ref) => (\r\n    <div className={cx('inputWrapper')}>\r\n            <input\r\n                ref={ref}\r\n                placeholder={props.placeholder}\r\n                defaultValue={props.defaultValue}\r\n                onKeyDown={props.onKeyDown}\r\n                onChange={props.onChange}\r\n                onBlur={props.onBlur}\r\n            />\r\n            <Button\r\n                className={cx(props.buttonClassName)}\r\n                placeholder={props.placeholder}\r\n                onClick={props.onClick}\r\n            >\r\n                {props.children}\r\n            </Button>\r\n        </div>\r\n));\r\n\r\n\r\nexport {Input, InputWithButton};","import {Map} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst SEARCH = 'base/SEARCH';\r\nconst SET_MODE = 'base/SET_MODE';\r\n\r\nexport const search = createAction(SEARCH); //keyword\r\nexport const setMode = createAction(SET_MODE); //mode\r\n\r\nconst initialState = Map({\r\n    keyword:'',\r\n    mode:''\r\n});\r\n\r\nexport default handleActions ({\r\n    [SEARCH] : (state, action) => \r\n        state.set('keyword', action.payload)\r\n    ,\r\n    [SET_MODE] : (state, action) => \r\n        state.set('mode', action.payload)\r\n}, initialState);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport {InputWithButton} from '../components/Input';\r\nimport {FaSearch} from 'react-icons/fa'\r\n\r\nimport * as baseActions from '../modules/base'\r\nimport * as styles from '../style/layout.module.scss'\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass HeaderContainer extends Component {\r\n    \r\n    handleChange = (e) => {\r\n        const {BaseActions} =this.props;\r\n        const {value} = e.target;\r\n        \r\n        BaseActions.search(value);\r\n    }\r\n\r\n    render () {\r\n        const {handleChange} = this;\r\n\r\n        return (\r\n            <div className={cx('header')}> \r\n                <span>\r\n                    Word Book \r\n                </span>\r\n                <div>\r\n                    <InputWithButton\r\n                        buttonClassName={'innerButton-right'}\r\n                        onChange={handleChange}\r\n                        placeholder={'Search...'}\r\n                    >\r\n                        <FaSearch/>\r\n                    </InputWithButton>\r\n                </div>\r\n            </div>  \r\n        )\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        mode : state.base.get('mode')\r\n    }),\r\n    (dispatch) => ({\r\n        BaseActions : bindActionCreators(baseActions, dispatch)\r\n    })\r\n) (HeaderContainer);","import {Map, List, fromJS} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CREATE = 'word/CREATE';\r\nconst UPDATE = 'word/UPDATE';\r\nconst REMOVE = 'word/REMOVE';\r\nconst LOAD_WORDS = 'word/LOAD_WORDS';\r\n\r\nexport const create = createAction(CREATE); // Map{id, word, List[means], isComplete, wrongCount }\r\nexport const update = createAction(UPDATE); // id, word{ word, List[means], isComplete, wrongCount } \r\nexport const remove = createAction(REMOVE); // List[id]\r\nexport const loadWords = createAction(LOAD_WORDS); \r\n\r\nconst initialState = List([\r\n    Map({\r\n        means : List([\"이곳을 클릭하면 수정이 가능해요!\"]),\r\n        word : \"단어가 없네요!\",\r\n        id : 'Default',\r\n        isComplete : false\r\n    })\r\n]);\r\n\r\nexport default handleActions({\r\n    [CREATE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('word') === action.payload.get('word') );\r\ndebugger;\r\n        if ( index < 0) {\r\n            return state.push( action.payload );\r\n        }\r\n\r\n        if ( window.confirm('Do you want Merge?') ) {\r\n            let means = state.getIn([index, 'means']).toJS();\r\n            const editMeans = action.payload.get('means').toJS();\r\n\r\n            for (let key in means) {                \r\n                let idx = editMeans.findIndex( mean => mean.replace(/ /g,'') === means[key].replace(/ /g,'') );\r\n                if (idx > -1) {\r\n                    means[key] = editMeans[idx];\r\n                    editMeans.splice(idx, 1);\r\n                }\r\n            }\r\n\r\n            return state.setIn([index,'means'], List(means.concat(editMeans)));\r\n\r\n        }\r\n\r\n        return state;\r\n    },\r\n    [UPDATE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload.id );\r\n        const isExist = state.delete(index).findIndex( word => word.get('word') === action.payload.word ) > -1;\r\n        \r\n        if ( isExist ) {\r\n            alert('it is dupplicate');\r\n            return state;\r\n        }\r\n\r\n        if ( !action.payload.isEqual( state.get(index).toJS() ) ) {\r\n            const word = action.payload.toImmutable();\r\n            return state.mergeIn([index],  word);\r\n        }\r\n\r\n    },\r\n    [REMOVE] : (state, action) => {\r\n        const result = state.filter (\r\n            word => action.payload.findIndex( id => word.get('id') === id ) <0\r\n        );\r\n\r\n        return result;\r\n\r\n    },\r\n    [LOAD_WORDS] : (state, action) => {\r\n        return fromJS(action.payload);\r\n    }\r\n}, initialState);","import {Map, List} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CHANGE = 'test/CHANGE';\r\n\r\nexport const change = createAction(CHANGE); // answer\r\n\r\nconst initialState = Map ({\r\n    answers : List([])\r\n})\r\n\r\nexport default handleActions({\r\n    [CHANGE]: (state, action) => {\r\n        const {answer} = action.payload;\r\n\r\n        return state.set('answers', List( answer.split(',')\r\n                                                .map(mean => mean.toUpperCase().trim())\r\n                                                .sort()\r\n                                        )\r\n                        )\r\n    }\r\n}, initialState);","import {Map,List} from  'immutable';\r\nimport {createAction, handleActions} from  'redux-actions';\r\n\r\nconst SHOW = 'modal/SHOW';\r\nconst HIDE = 'modal/HIDE';\r\nconst CHANGE = 'modal/CHANGE';\r\nconst TOGGLE_MEAN_MODE = 'modal/TOOGLE_MEAN_MODE';\r\nconst ADD_MEAN = 'modal/ADD_MEAN';\r\nconst REMOVE_MEAN = 'modal/REMOVE_MEAN';\r\nconst CHANGE_MEAN = 'modal/CHANGE_MEAN';\r\n\r\nexport const show = createAction(SHOW);\r\nexport const hide = createAction(HIDE);\r\nexport const change = createAction(CHANGE); // {word, mean}\r\nexport const toggleMeanMode = createAction(TOGGLE_MEAN_MODE); // index;\r\nexport const addMean = createAction(ADD_MEAN); // Map{ mean:string, id:string, isEditMode:boolean }\r\nexport const removeMean = createAction(REMOVE_MEAN); // index\r\nexport const changeMean = createAction(CHANGE_MEAN); // input{ index, mean}\r\n\r\n\r\nconst initialState = Map ( {\r\n    visible:false,\r\n    mode:'',\r\n    word: Map ( {\r\n        id : null,\r\n        word : '',\r\n        means: List([]), // means : [{id:string, mean:string, isEidtMode:boolean}]\r\n        wrongCounter : -1\r\n    })\r\n});\r\n\r\nexport default handleActions ({\r\n    [SHOW]: (state, action) => {\r\n        let word = initialState.get('word'), mode = 'add';\r\n        if ( typeof (action.payload) !== 'undefined') {\r\n            word = action.payload;\r\n            mode = 'change';\r\n        }\r\n\r\n        return state.set('visible',true).set('word', word).set('mode',mode);\r\n    },\r\n    [HIDE]: (state, action) => {\r\n        return state.set('visible', false).set('word', Map ( {\r\n            id : '',\r\n            word : '',\r\n            means: List([]), // means : [{mean:string, isEidtMode:boolean}]\r\n            wrongCounter : -1\r\n        })); \r\n    },\r\n    [CHANGE]: (state, action) => {\r\n        const word = state.getIn(['word']);\r\n        const input = action.payload;\r\n\r\n        if ( word.get('word') !== input.word ) {\r\n            return state.setIn(['word', 'word'], input.word ); \r\n        }\r\n\r\n    },\r\n    [TOGGLE_MEAN_MODE] : (state, action) => {\r\n        const index = action.payload;\r\n        const current = state.getIn(['word','means', index, 'isEditMode']);\r\n\r\n        return state.setIn(['word', 'means', index, 'isEditMode'], !current );\r\n    },\r\n    [ADD_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n\r\n        return state.setIn(['word','means'], means.push(action.payload));\r\n    },\r\n    [REMOVE_MEAN]: (state, action) => {\r\n        const means = state.getIn(['word', 'means']);\r\n        const index = action.payload;\r\n    \r\n        return state.setIn(['word','means'], means.delete(index));\r\n    },\r\n    [CHANGE_MEAN]: (state, action) => {\r\n        const {index, mean} = action.payload;\r\n        \r\n        return state.mergeIn(['word', 'means', index], Map ({isEditMode:false, mean:mean}) );\r\n\r\n    }\r\n}, initialState);","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Word extends Component {\r\n    static propTypes = {\r\n        word : PropTypes.string\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidMount(prevProps, prevState, snapshot) {\r\n        const current = this.ref.current;\r\n        \r\n        if (current.offsetWidth > current.parentElement.offsetWidth ) {\r\n            current.className = cx('overflowText');\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { word } = this.props;\r\n\r\n        return (\r\n            <div\r\n                className={cx('word')}\r\n            >\r\n                <span\r\n                    ref={this.ref}\r\n                >\r\n                    {word}\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Word;","import React, {Component} from 'react';\r\n\r\n//Component\r\n//import Input from './Input';\r\n\r\nclass TestForm extends Component {\r\n\r\n    handleChange = (e) => {\r\n        const { onChange } = this.props;\r\n        onChange({\r\n            answer : e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { keyword, onTest } = this.props;\r\n\r\n        const {handleChange} = this;\r\n\r\n        return (\r\n\r\n            <div>\r\n                <form>\r\n                    <input \r\n                        value={keyword} \r\n                        placeholder=\"단어의 뜻을 입력하세요.\" \r\n                        onChange={handleChange}\r\n                    />\r\n                </form>\r\n                <button\r\n                    onClick={onTest}\r\n                >\r\n                CHECK\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TestForm;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\n//Component\r\nimport TestForm from './TestForm';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Means extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidMount(prevProps, prevState, snapshot) {\r\n        const current = this.ref.current;\r\n        \r\n        if (current.offsetWidth > current.parentElement.offsetWidth ) {\r\n            current.className = cx('overflowText');\r\n        }\r\n\r\n    }\r\n\r\n    static propTypes = {\r\n        means : ImmutablePropTypes.listOf(\r\n            PropTypes.string\r\n        ),\r\n        mode : PropTypes.string,\r\n        onChange : PropTypes.func,\r\n        onTest : PropTypes.func\r\n    }\r\n\r\n    render() {\r\n        const { means, mode, onChange, onTest, onEdit } = this.props;\r\n        let contents;\r\n\r\n        if ( mode === 'test' ) {\r\n            contents = (\r\n                <TestForm\r\n                    means={means}\r\n                    onChange={onChange}\r\n                    onTest={onTest}\r\n                />\r\n            )\r\n        } else {\r\n            contents = means.toJS()[0];\r\n            for ( let i=1; i<means.size; i++ ) {\r\n                contents += (\", \"+means.toJS()[i]);\r\n            }\r\n        }\r\n        \r\n        return (\r\n            <div\r\n                onClick={onEdit}\r\n                className={cx('mean')}\r\n            >\r\n                <span\r\n                    ref={this.ref}\r\n                >\r\n                    {contents}\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Means;","import React, {Component} from 'react';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport wordStyle from '../style/word.module.scss';\r\n\r\nimport Button from './Button';\r\n\r\n//icons\r\nimport {IoMdVolumeHigh} from 'react-icons/io';\r\n\r\nconst cx = classNames.bind(wordStyle);\r\n\r\nclass Etc extends Component {\r\n    handleSound = (e) => {\r\n        e.stopPropagation();\r\n        const { word } = this.props;\r\n        let msg = new SpeechSynthesisUtterance(word);\r\n        msg.lang='en-us';\r\n        msg.volume=1;\r\n        msg.rate=1;\r\n        msg.pitch=1;\r\n        \r\n        speechSynthesis.speak(msg);\r\n    }\r\n    \r\n    render() {\r\n        const {handleSound} = this;\r\n        \r\n        return (\r\n            <div className={cx('etc')}>\r\n                <Button \r\n                    className={'wordContainerButton'} \r\n                    onClick={handleSound}\r\n                >\r\n                    <IoMdVolumeHigh />\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Etc;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport styles from '../style/word.module.scss';\r\n\r\nimport Word from './Word';\r\nimport Means from './Means';\r\nimport Etc from './Etc';\r\n\r\nimport { FiSquare, FiCheckSquare} from 'react-icons/fi';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass WordBox extends Component {\r\n    \r\n    static propTypes = {\r\n        word: ImmutablePropTypes.mapContains({\r\n            means : ImmutablePropTypes.listOf(\r\n                PropTypes.string\r\n            ),\r\n            id : PropTypes.string,\r\n            word : PropTypes.string,\r\n            mode : PropTypes.string\r\n        })\r\n        // mode : PropTypes.string,\r\n        // onCheck : PropTypes.func,\r\n        // onGiveUp : PropTypes.func\r\n    }\r\n\r\n    handleCheck = (e) => {\r\n        e.stopPropagation();\r\n\r\n    }\r\n\r\n    handleEdit = (e) => {\r\n        const {onEdit, word} = this.props;\r\n        onEdit(word.get('id'));\r\n    }\r\n\r\n    render() {\r\n        const { word,mode, onRemove } = this.props;\r\n        const {handleEdit, handleCheck} = this;\r\n        return (\r\n            <div className={cx('container')}\r\n                key={word.get('id')}\r\n                onClick={handleEdit}\r\n            >   \r\n                <div\r\n                    className={cx('check')}\r\n                    >\r\n                    <input\r\n                        id={word.get('id')}\r\n                        onClick={handleCheck}\r\n                        type={'checkbox'}\r\n                        />\r\n                    <label \r\n                        onClick={handleCheck}\r\n                        htmlFor={word.get('id')}\r\n                    >\r\n                        <FiSquare/><FiCheckSquare/>\r\n                    </label>\r\n                </div>\r\n                <Word \r\n                    word={word.get('word')} \r\n                    />\r\n                <Means\r\n                    means={word.get('means')}\r\n                    mode={mode}\r\n                />\r\n                <Etc\r\n                    id={word.get('id')}\r\n                    word={word.get('word')}\r\n                    onRemove={onRemove}\r\n                    isComplete={word.get('isComplete')}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WordBox;","import React, {Component} from 'react';\r\n\r\nimport WordBox from './WordBox';\r\n\r\nclass WordBoxList extends Component {\r\n\r\n    render() {\r\n        const { words, mode, onEdit, onRemove, keyword } = this.props;\r\n        const wordList = words\r\n                            .filter(\r\n                                word => word.get('means').filter( mean => mean.indexOf(keyword) !== -1 ).size > 0\r\n                                        || word.get('word').indexOf(keyword) !== -1\r\n                            )\r\n                            .map (\r\n                                word => \r\n                                    <WordBox\r\n                                        key={word.get('id')}\r\n                                        keyword={keyword}\r\n                                        word={word}\r\n                                        mode={mode}\r\n                                        onEdit={onEdit}\r\n                                        onRemove={onRemove}\r\n                                    />\r\n                            )\r\n\r\n        return (\r\n            <div\r\n            >\r\n                {wordList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default WordBoxList;","import {Map, List, fromJS} from 'immutable';\r\nimport shortid from 'shortid';\r\n\r\nconst defaultWord = {\r\n    means : [],\r\n    word : '',\r\n    id : '',\r\n    isComplete : false\r\n};\r\n\r\nclass Word {\r\n    constructor( word ) {\r\n        for ( let key in defaultWord ) {\r\n            this[key] = word[key] || defaultWord[key];\r\n        }\r\n    }\r\n\r\n    isEqual = ( word ) => {\r\n        let isEqual = true;\r\n        for (let key in defaultWord) {\r\n            isEqual = isEqual && this[key].toString() === word[key].toString();\r\n            if (!isEqual) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return isEqual;\r\n    }\r\n\r\n    fromModal = () => {\r\n        debugger;\r\n        this.means = this.means.map( mean => mean.get('mean') );\r\n\r\n        return this;\r\n    }\r\n\r\n    toModal = () => {\r\n        //withImmutable\r\n        const word = fromJS( Map(this) )\r\n                    .set('means', List(\r\n                        this.means.map (\r\n                            mean => Map(\r\n                                { id:shortid.generate(), mean:mean, isEditMod:false}\r\n                            )\r\n                        )\r\n                    ));\r\n        return word;\r\n    }\r\n\r\n    toImmutable = () => {\r\n        debugger;\r\n        return Map({\r\n            means : List(this.means),\r\n            word : this.word,\r\n            id : this.id,\r\n            isComplete : this.isComplete\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport default Word;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as testActions from '../modules/test';\r\nimport * as modalActions from '../modules/modal';\r\nimport * as baseActions from '../modules/base';\r\n\r\nimport WordBoxList from '../components/WordBoxList';\r\nimport Word from '../class/Word';\r\n\r\nclass WordBoxListContainer extends Component {\r\n    \r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.words.toString() !== this.props.words.toString() ) {\r\n            localStorage.setItem('words', JSON.stringify(this.props.words));\r\n        }\r\n    }\r\n\r\n    handleEdit = (id) => {\r\n        const {ModalActions, words} = this.props;\r\n        const index = words.findIndex( word => word.get('id') === id );\r\n        const word = new Word(words.get(index).toJS()).toModal();\r\n\r\n        ModalActions.show(word);\r\n    }\r\n\r\n    handleRemove = (id) => {\r\n        const {WordsActions} = this.props;\r\n\r\n        WordsActions.remove(id);\r\n    }\r\n\r\n    render() {\r\n        const {words, keyword, mode} = this.props;\r\n        const {handleEdit, handleRemove} = this;\r\n\r\n        return (\r\n            <WordBoxList\r\n                words={words}\r\n                keyword={keyword}\r\n                mode={mode}\r\n                onEdit={handleEdit}\r\n                onRemove={handleRemove}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        keyword: state.base.get('keyword'),\r\n        words : state.words,\r\n        mode : state.base.get('mode')\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        ModalActions: bindActionCreators(modalActions, dispatch),\r\n        BaseActions: bindActionCreators(baseActions, dispatch),\r\n        TestActions: bindActionCreators(testActions, dispatch)\r\n    })\r\n) (WordBoxListContainer);","import React, {Component} from 'react';\r\nimport {InputWithButton} from './Input';\r\n\r\nimport styles from '../style/modal.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Button from './Button';\r\n\r\n//icon\r\nimport {MdDelete, MdEdit} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\n\r\nclass Mean extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.ref.current !== null) {\r\n            this.ref.current.focus();\r\n        }\r\n\r\n    }\r\n\r\n    handleMode = () => {\r\n        const {mean, toggleMode} = this.props;\r\n\r\n        toggleMode(mean.get('id'));\r\n    }\r\n\r\n    handleRemove = () => {\r\n        const {mean, onRemove} = this.props;\r\n        onRemove(mean.get('id'));\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {value} = e.target;\r\n        const {mean, onChange} = this.props;\r\n        onChange(mean.get('id'), value);\r\n    }\r\n\r\n    render() {\r\n        const {mean} = this.props;\r\n        const {handleMode, handleRemove, handleChange} = this;\r\n        const element = mean.get('isEditMode') ?\r\n                        (\r\n                            <InputWithButton\r\n                                defaultValue={mean.get('mean')}\r\n                                buttonClassName={'innerButton-right'}\r\n                                onBlur={handleChange}\r\n                                ref={this.ref}\r\n                            >\r\n                                <MdEdit/>\r\n                            </InputWithButton>\r\n                        )\r\n                        :\r\n                        (   \r\n                            <div  className={cx('mean')}>\r\n                                <div className={cx('text')}>{mean.get('mean')}</div>\r\n                                <div \r\n                                    className={cx('button')}\r\n                                >\r\n                                    <Button\r\n                                        className={'button'}\r\n                                        onClick={handleMode}\r\n                                        >\r\n                                        <MdEdit/>\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={'button'}\r\n                                        onClick={handleRemove}\r\n                                    >\r\n                                        <MdDelete/>\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n\r\n        return (\r\n            <div>\r\n                {element}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Mean;","import React, {Component} from 'react';\r\n\r\nimport styles from '../style/modal.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport Mean from './Mean';\r\n\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass MeanList extends Component {\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.props.means.toString()\r\n                === nextProps.means.toString() ) {\r\n                    return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    handleBlur = (e) => {\r\n        const {value} = e.target;\r\n        const {onChangeMean, means } = this.props;\r\n        const findIndex = means.findIndex(mean => mean.get('mean').trim() === value.trim());\r\n        let mean = value;\r\n        onChangeMean( findIndex, mean );\r\n        \r\n    }\r\n    \r\n    handleKeyPress = (e) => {\r\n        if ( (e.keyCode === 13 || e.keyCode === 9 || e.key === 'Enter') && e.target.value !== '' ) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n    \r\n    handleRemove = (e) => {\r\n        const { onRemoveMean } = this.props;\r\n        const index = e.target.closest('div').getAttribute('index');\r\n        \r\n        onRemoveMean(index);\r\n    }\r\n    \r\n    render() {\r\n        const { means, onRemove, toggleMode, onChange } = this.props;\r\n\r\n        const meanList = means.map( \r\n            mean => (\r\n                <Mean\r\n                    key={mean.get('id')}\r\n                    mean={mean}\r\n                    toggleMode={toggleMode}\r\n                    onChange={onChange}\r\n                    onRemove={onRemove}\r\n                />\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div className={cx('meansList')}>\r\n                {meanList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MeanList;","import React, {Component} from 'react';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport styles from '../style/modal.module.scss';\r\n\r\nimport {InputWithButton} from './Input';\r\nimport MeanList from './MeanList';\r\n\r\nimport {MdAdd} from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Modal extends Component {\r\n\r\n    handleBlur = ( e ) => {\r\n        const {onAddMean} = this.props;\r\n        const mean = e.target.value;\r\n\r\n        if (mean === '' || mean === null || typeof(mean) === 'undefined') {\r\n            return;\r\n        }\r\n        \r\n        e.target.value='';\r\n\r\n        onAddMean( mean );\r\n    }\r\n\r\n    handleKeyDown = (e) => {\r\n        if ( (e.keyCode === 13 || e.keyCode === 9) && e.target.value !== '' ) {\r\n            e.preventDefault();\r\n            e.target.blur();\r\n            e.target.focus();\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {onChange} =this.props;\r\n        onChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const { handleBlur, handleChange, handleKeyDown } = this;\r\n        const {modal, toggleMeanMode, onChangeMean, onRemoveMean, onAdd, onCancel, mode} = this.props;\r\n\r\n        let modeString = 'Add';\r\n\r\n        if (mode === 'change') {\r\n            modeString = 'Edit';\r\n        }\r\n\r\n        return (\r\n            <div className={cx('wrapper')}>\r\n                <div className={cx('box')}>\r\n                    <div className={cx('title')}> \r\n                        <p>Word {modeString}</p>\r\n                    </div>\r\n                    <div className={cx('contents')}>\r\n                        <div>\r\n                            <input\r\n                                placeholder='Word'\r\n                                defaultValue={modal.getIn(['word','word'])}\r\n                                onChange={handleChange}\r\n                                required='required'\r\n                            />\r\n                            <MeanList\r\n                                means = {modal.getIn(['word', 'means'])}\r\n                                onChange = {onChangeMean}\r\n                                onRemove = {onRemoveMean}\r\n                                toggleMode = {toggleMeanMode}\r\n                            />\r\n                            <InputWithButton\r\n                                className={'inputWrapper'}\r\n                                buttonClassName={'innerButton-right'}\r\n                                placeholder='Mean'\r\n                                onBlur={handleBlur}\r\n                                onKeyDown={handleKeyDown}\r\n                            >\r\n                                <MdAdd/>\r\n                            </InputWithButton>\r\n                        </div>\r\n                    </div>\r\n                    <div \r\n                        className={cx('add')}\r\n                        onClick={onAdd}\r\n                    >\r\n                        <span>{modeString}</span>\r\n                    </div>\r\n                    <div \r\n                        className={cx('cancel')}\r\n                        onClick={onCancel}\r\n                    >\r\n                        <span>Cancel</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, {Component} from 'react';\r\nimport {Map} from 'immutable';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport shortid from 'shortid';\r\n\r\nimport Word from '../class/Word';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as modalActions from '../modules/modal';\r\n\r\nimport Modal from '../components/Modal'\r\n\r\nclass WordModalContainer extends Component {\r\n    handleMean = {\r\n\r\n        add : ( mean ) => {\r\n            const {ModalActions, modal } = this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( item => item.get('mean').replace(/ /g,'') === mean.replace(/ /g,'') );\r\n            // 입력한 뜻이 존재 하지 않을 경우\r\n            if (index < 0 ) {\r\n                const meanObj = Map({\r\n                    id : shortid.generate(),\r\n                    mean :mean,\r\n                    isEditMode : false\r\n                });\r\n                ModalActions.addMean( meanObj );\r\n            } else {\r\n                alert('it is duplicate');\r\n            }\r\n\r\n        },\r\n\r\n        remove : (id) => {\r\n            const { ModalActions, modal }= this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id);\r\n\r\n            if (index >= 0 ){\r\n                ModalActions.removeMean(index);\r\n            }\r\n            \r\n        },\r\n\r\n        change: (id, value)=> {\r\n            const { ModalActions, modal }= this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id );\r\n            const otherMeans = modal.getIn(['word', 'means']).delete(index);\r\n\r\n            let mean = value;\r\n\r\n            if ( otherMeans.findIndex( mean => mean.get('mean').replace(/ /g,'') === value.replace(/ /g,'') ) > -1 ) {\r\n                alert('it is duplicate');\r\n                mean = modal.getIn(['word', 'means', index, 'mean']);\r\n            }\r\n\r\n            if (value === '' ) {\r\n                if ( window.confirm(\"you didn't enter anything. do you want remove this?\") ) {\r\n                    ModalActions.removeMean(index);\r\n                }\r\n                return;\r\n            }\r\n\r\n            ModalActions.changeMean( {index, mean} );\r\n        },\r\n        \r\n        toggleMode: (id) => {\r\n            const {ModalActions, modal} = this.props;\r\n            const index = modal.getIn( ['word', 'means'] ).findIndex( mean => mean.get('id') === id);\r\n\r\n            ModalActions.toggleMeanMode(index);\r\n        }\r\n\r\n    }\r\n\r\n    handleWord = {\r\n        add: () => {\r\n            const {WordsActions, ModalActions, modal} = this.props;\r\n            const word = modal.getIn(['word', 'word']);\r\n            const means = modal.getIn(['word', 'means']);\r\n\r\n            let msg = 'Please enter this:';\r\n            let validate = true;\r\n            if (word === '' ) {\r\n                validate = false;\r\n                msg += '\\n-Word'; \r\n            } \r\n            \r\n            if ( means.isEmpty() ) {\r\n                validate = false;\r\n                msg += '\\n-Means';\r\n            }\r\n\r\n            if ( !validate ) {\r\n                window.alert(msg);\r\n                return;\r\n            }\r\n\r\n            WordsActions.create( \r\n                new Word (\r\n                    {\r\n                        word:word,\r\n                        means:means,\r\n                        id:shortid.generate()\r\n                    }\r\n                ).fromModal().toImmutable()\r\n            );\r\n            ModalActions.hide();\r\n        },\r\n        change: () => {\r\n            const {WordsActions, ModalActions, modal} =this.props;\r\n\r\n            const word = modal.getIn(['word', 'word']);\r\n            const means = modal.getIn(['word', 'means']);\r\n\r\n            let msg = 'Please enter this:';\r\n            let validate = true;\r\n            if (word === '' ) {\r\n                validate = false;\r\n                msg += '\\n-Word'; \r\n            } \r\n            \r\n            if ( means.isEmpty() ) {\r\n                validate = false;\r\n                msg += '\\n-Means';\r\n            }\r\n\r\n            if ( !validate ) {\r\n                window.alert(msg);\r\n                return;\r\n            }\r\n            \r\n            WordsActions.update(\r\n                new Word( \r\n                    modal.get('word').toJS() \r\n                ).fromModal()\r\n            );\r\n            ModalActions.hide();\r\n        }\r\n    }\r\n\r\n    handleCancel = () => {\r\n        const {ModalActions} = this.props;\r\n        ModalActions.hide();\r\n    }\r\n\r\n    handleChange = (word) => {\r\n        const {ModalActions} = this.props;\r\n\r\n        const input = {\r\n            word : word,\r\n            mean : ''\r\n        }\r\n\r\n        ModalActions.change(\r\n            input\r\n        );\r\n    }\r\n\r\n    render () {\r\n        const {handleMean, handleChange, handleWord, handleCancel} = this;\r\n        const {modal} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    modal.get('visible') && (\r\n                                    <Modal\r\n                                        modal={modal}\r\n                                        mode={modal.get('mode')}\r\n                                        onChange={handleChange}\r\n                                        toggleMeanMode={handleMean['toggleMode']}\r\n                                        onAddMean={handleMean['add']}\r\n                                        onChangeMean={handleMean['change']}\r\n                                        onRemoveMean={handleMean['remove']}\r\n                                        onAdd={handleWord[modal.get('mode')]}\r\n                                        onCancel={handleCancel}\r\n                                    />\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        modal:state.modal\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        ModalActions : bindActionCreators(modalActions, dispatch)\r\n    })\r\n) (WordModalContainer);","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport {bindActionCreators} from 'redux';\nimport classNames from 'classnames/bind';\nimport {MdAdd, MdRemove} from 'react-icons/md';\nimport {List} from 'immutable';\n\nimport * as modalActions from '../modules/modal'\nimport * as wordsActions from '../modules/words'\nimport * as styles from '../style/layout.module.scss'\n\nimport Button from '../components/Button';\n\nconst cx = classNames.bind(styles);\n\nclass FooterContainer extends Component {\n\n    handleShow = () => {\n        const {ModalActions} = this.props;\n\n        ModalActions.show();\n    }\n\n    handleRemove = () => {\n        const {WordsActions} = this.props;\n        const idList = List(document.querySelectorAll('input[type=\"checkbox\"]:checked'))\n                            .map(element => element.id);\n                            \n        if ( idList.isEmpty() ) {\n            window.alert('Please select more than one!');\n            return;\n        }\n\n        if ( window.confirm('do you want remove?')) {\n            WordsActions.remove(idList);\n        }\n        \n    }\n\n    render () {\n        const {handleShow, handleRemove} = this;\n\n        return (\n            <div \n                className={cx('footer')}\n            >\n                <Button\n                    onClick={handleShow}\n                >\n                    <MdAdd/>\n                </Button>\n                <Button\n                    onClick={handleRemove}\n                >\n                    <MdRemove/>\n                </Button>\n            </div>\n        )\n    }\n};\n\nexport default connect(\n    null,\n    (dispatch) => ({\n        ModalActions : bindActionCreators(modalActions, dispatch),\n        WordsActions : bindActionCreators(wordsActions, dispatch)\n    })\n) (FooterContainer);","import React, { Component } from 'react';\nimport classNames from 'classnames/bind';\n\n//containers\nimport HeaderContainer from './containers/HeaderContainer';\nimport WordBoxListContainer from './containers/WordBoxListContainer';\nimport WordModalContainer from './containers/WordModalContainer';\nimport FooterContainer from './containers/FooterContainer';\n\nimport * as wordsActions from './modules/words';\n\nimport * as layout from './style/layout.module.scss';\nimport { connect } from 'react-redux'\nimport {bindActionCreators} from 'redux';\n\nconst cx = classNames.bind(layout);\n\nclass App extends Component {\n  \n\n  componentDidMount() {\n\n    const words = localStorage.getItem('words');\n    if ( words !== null && typeof (words) !== 'undefined' ) {\n      const {WordsActions} = this.props;\n      WordsActions.loadWords(JSON.parse(words));\n    }\n\n  }\n\n  render() {\n    return (\n      <div className={cx('wrapper')}>\n        <HeaderContainer/>\n        \n        <div className={cx('body')}>\n          <WordBoxListContainer />\n        </div>\n\n        <FooterContainer/>\n        <WordModalContainer/>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n  }),\n  (dispatch) => ({\n    WordsActions : bindActionCreators(wordsActions, dispatch)\n  })\n)(App);","import {combineReducers} from 'redux';\r\n\r\nimport words from './words';\r\nimport modal from './modal';\r\nimport base from './base';\r\n\r\nexport default combineReducers({\r\n    words,modal,base\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {createStore} from 'redux';\nimport reducers from './modules';\nimport {Provider} from 'react-redux';\n\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <Provider store ={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root')\n);\n"],"sourceRoot":""}