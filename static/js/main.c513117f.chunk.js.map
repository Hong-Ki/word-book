{"version":3,"sources":["style/word.module.scss","style/index.module.scss","modules/words.js","modules/test.js","components/Word.js","components/TestForm.js","components/Means.js","components/Result.js","components/WordBox.js","components/WordBoxList.js","containers/WordBoxListContainer.js","modules/modal.js","components/Modal.js","containers/WordModalContainer.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["module","exports","container","word","mean","result","addButton","wrapper","box","meansList","create","createAction","update","remove","sound","loadWords","initialState","List","Map","id","isComplete","handleActions","_handleActions","Object","defineProperty","state","action","push","payload","index","findIndex","get","mergeIn","delete","msg","SpeechSynthesisUtterance","getIn","lang","volume","rate","pitch","speechSynthesis","speak","fromJS","change","answers","answer","set","split","map","toUpperCase","trim","sort","cx","classNames","bind","styles","Word","_this$props","this","props","react_default","a","createElement","className","Component","TestForm","handleChange","e","onChange","_this","target","value","keyword","onTest","means","placeholder","onClick","Means","contents","mode","components_TestForm","toJS","i","size","style","Result","onSound","io","WordBox","handleSound","_this$props2","handleTest","components_Word","components_Means","components_Result","WordBoxList","words","search","wordList","components_WordBox","key","WordBoxListContainer","WordsActions","components_WordBoxList","connect","dispatch","bindActionCreators","wordsActions","TestActions","testActions","show","hide","addMean","removeMean","changeMean","visible","wrongCounter","modal_handleActions","_action$payload","input","setIn","Modal","handleBlur","onBlur","focus","handleKeyPress","keyCode","preventDefault","blur","modal","console","log","idx","meanList","onKeyDown","WordModalContainer","handleBulr","ModalActions","components_Modal","modalActions","App","localStorage","getItem","containers_WordBoxListContainer","containers_WordModalContainer","Boolean","window","location","hostname","match","combineReducers","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.c513117f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"word_container__14hbr\",\"word\":\"word_word__1oIdx\",\"mean\":\"word_mean__hZYdF\",\"result\":\"word_result__Zdcg-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addButton\":\"style_addButton__2iZB5\",\"container\":\"style_container__24BwX\",\"word\":\"style_word__259OL\",\"mean\":\"style_mean__IykvA\",\"result\":\"style_result__20gFM\",\"wrapper\":\"style_wrapper__M0sMb\",\"box\":\"style_box__RD1Hh\",\"meansList\":\"style_meansList__3CHdo\"};","import {Map, List, fromJS} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CREATE = 'word/CREATE';\r\nconst UPDATE = 'word/UPDATE';\r\nconst REMOVE = 'word/REMOVE';\r\nconst SOUND = 'word/SOUND';\r\nconst LOAD_WORDS = 'word/LOAD_WORDS';\r\n\r\nexport const create = createAction(CREATE); // {id, word, means[], isComplete, wrongCount }\r\nexport const update = createAction(UPDATE); // id, word{ word, means[], isComplete, wrongCount } \r\nexport const remove = createAction(REMOVE); // id\r\nexport const sound = createAction(SOUND); // id\r\nexport const loadWords = createAction(LOAD_WORDS); \r\n\r\nconst initialState = List([\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"1\"]),\r\n        word : \"TEST_1\",\r\n        id : 1,\r\n        isComplete : false\r\n    }),\r\n   Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"2\"]),\r\n        word : \"TEST_2\",\r\n        id : 2,\r\n        isComplete : true\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"3\"]),\r\n        word : \"TEST_3\",\r\n        id : 3,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"4\"]),\r\n        word : \"TEST_4\",\r\n        id : 4,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"5\"]),\r\n        word : \"TEST_5\",\r\n        id : 5,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"6\"]),\r\n        word : \"TEST_6\",\r\n        id : 6,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"7\"]),\r\n        word : \"TEST_7\",\r\n        id : 7,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"8\"]),\r\n        word : \"TEST_8\",\r\n        id : 8,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"9\"]),\r\n        word : \"TEST_9\",\r\n        id : 9,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"10\"]),\r\n        word : \"TEST_10\",\r\n        id : 10,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"11\"]),\r\n        word : \"TEST_11\",\r\n        id : 11,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"12\"]),\r\n        word : \"TEST_12\",\r\n        id : 12,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"13\"]),\r\n        word : \"TEST_13\",\r\n        id : 13,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"14\"]),\r\n        word : \"TEST_14\",\r\n        id : 14,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"15\"]),\r\n        word : \"TEST_15\",\r\n        id : 15,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"16\"]),\r\n        word : \"TEST_16\",\r\n        id : 16,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"17\"]),\r\n        word : \"TEST_17\",\r\n        id : 17,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"18\"]),\r\n        word : \"TEST_18\",\r\n        id : 18,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"19\"]),\r\n        word : \"TEST_19\",\r\n        id : 19,\r\n        isComplete : false\r\n    }),\r\n    Map({\r\n        mean : List([\"T\",\"E\",\"S\",\"T\",\"20\"]),\r\n        word : \"TEST_20\",\r\n        id : 20,\r\n        isComplete : false\r\n    }),\r\n]);\r\n\r\nexport default handleActions({\r\n    [CREATE] : (state, action) => {\r\n        return state.push( Map(action.payload) );\r\n    },\r\n    [UPDATE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload.id );\r\n\r\n        return state.mergeIn([index], action.payload.word);\r\n\r\n    },\r\n    [REMOVE] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload );\r\n        \r\n        return state.delete(index);\r\n    },\r\n    [SOUND] : (state, action) => {\r\n        const index = state.findIndex( word => word.get('id') === action.payload );\r\n        let msg = new SpeechSynthesisUtterance(state.getIn([index, 'word']));\r\n        msg.lang='en-us';\r\n        msg.volume=1;\r\n        msg.rate=1;\r\n        msg.pitch=1;\r\n\r\n        speechSynthesis.speak(msg);\r\n\r\n    },\r\n    [LOAD_WORDS] : (state, action) => {\r\n        return fromJS(action.payload);\r\n    }\r\n}, initialState);","import {Map, List, fromJS} from 'immutable';\r\nimport {createAction, handleActions} from 'redux-actions';\r\n\r\nconst CHANGE = 'test/CHANGE';\r\n\r\nexport const change = createAction(CHANGE); // answer\r\n\r\nconst initialState = Map ({\r\n    answers : List([])\r\n})\r\n\r\nexport default handleActions({\r\n    [CHANGE]: (state, action) => {\r\n        const {answer} = action.payload;\r\n\r\n        return state.set('answers', List( answer.split(',')\r\n                                                .map(mean => mean.toUpperCase().trim())\r\n                                                .sort()\r\n                                        )\r\n                        )\r\n    }\r\n}, initialState);","import React, {Component} from 'react';\r\nimport {Map} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Word extends Component {\r\n    static propTypes = {\r\n        word : PropTypes.string,\r\n        id : PropTypes.number\r\n    }\r\n\r\n    render() {\r\n        const { word, id } = this.props;\r\n\r\n        return (\r\n            <span\r\n                className={cx('word')}\r\n            >\r\n                <p>{word}</p>\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Word;","import React, {Component} from 'react';\r\nimport {List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//Component\r\n//import Input from './Input';\r\n\r\nclass TestForm extends Component {\r\n\r\n    handleChange = (e) => {\r\n        const { onChange } = this.props;\r\n        onChange({\r\n            answer : e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { keyword, means, onTest } = this.props;\r\n\r\n        const {handleChange} = this;\r\n\r\n        return (\r\n\r\n            <div>\r\n                <form>\r\n                    <input \r\n                        value={keyword} \r\n                        placeholder=\"단어의 뜻을 입력하세요.\" \r\n                        onChange={handleChange}\r\n                    />\r\n                </form>\r\n                <button\r\n                    onClick={onTest}\r\n                >\r\n                CHECK\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TestForm;","import React, {Component} from 'react';\r\nimport {Map} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\n\r\n//style\r\nimport styles from '../style/word.module.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\n//Component\r\nimport TestForm from './TestForm';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Means extends Component {\r\n    static propTypes = {\r\n        means : ImmutablePropTypes.listOf(\r\n            PropTypes.string\r\n        ),\r\n        mode : PropTypes.string,\r\n        onChange : PropTypes.func,\r\n        onTest : PropTypes.func\r\n    }\r\n\r\n    render() {\r\n        const { means, mode, onChange, onTest } = this.props;\r\n        let contents;\r\n\r\n        if ( mode === 'test' ) {\r\n            contents = (\r\n                <TestForm\r\n                    means={means}\r\n                    onChange={onChange}\r\n                    onTest={onTest}\r\n                />\r\n            )\r\n        } else {\r\n            contents = means.toJS()[0];\r\n            for ( let i=1; i<means.size; i++ ) {\r\n                contents += (\", \"+means.toJS()[i]);\r\n            }\r\n\r\n            contents = (<p> {contents} </p>)\r\n        }\r\n        \r\n        return (\r\n            <span\r\n                className={cx('mean')}\r\n            >\r\n                {contents}\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Means;","import React, {Component} from 'react';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport style from '../style/index.module.scss';\r\n\r\n//icons\r\nimport {IoMdVolumeHigh} from 'react-icons/io';\r\n\r\nconst cx = classNames.bind(style);\r\n\r\nclass Result extends Component {\r\n\r\n    render() {\r\n        const {isComplete, onSound, id} = this.props;\r\n\r\n        return (\r\n            <span className={cx('result')}>\r\n                <button className={cx('addButton')} onClick={onSound}>\r\n                    <IoMdVolumeHigh />\r\n                </button>\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Result;","import React, {Component} from 'react';\r\nimport {Map, List} from 'immutable';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport styles from '../style/word.module.scss';\r\n\r\nimport Word from './Word';\r\nimport Means from './Means';\r\nimport Result from './Result';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass WordBox extends Component {\r\n    \r\n    static propTypes = {\r\n        word: ImmutablePropTypes.mapContains({\r\n            mean : ImmutablePropTypes.listOf(\r\n                PropTypes.string\r\n            ),\r\n            word : PropTypes.string,\r\n            id : PropTypes.number,\r\n            wrongCounter : PropTypes.number,\r\n            mode : PropTypes.string\r\n        })\r\n        // mode : PropTypes.string,\r\n        // onCheck : PropTypes.func,\r\n        // onGiveUp : PropTypes.func\r\n    }\r\n\r\n    handleSound = () => {\r\n        const {onSound, word} = this.props;\r\n        onSound(word.get('id'));\r\n    }\r\n\r\n    render() {\r\n        const { word,mode } = this.props;\r\n        const { handleChange, handleTest, handleSound } = this;\r\n\r\n        return (\r\n            <div className={cx('container')}>\r\n                <Word \r\n                    word={word.get('word')} \r\n                    id={word.get('id')}\r\n                />\r\n                <Means\r\n                    means={word.get('mean')}\r\n                    mode={mode}\r\n                />\r\n                <Result\r\n                    id={word.get('id')}\r\n                    isComplete={word.get('isComplete')}\r\n                    onSound={handleSound}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WordBox;","import React, {Component} from 'react';\r\n\r\nimport WordBox from './WordBox';\r\n\r\nclass WordBoxList extends Component {\r\n    \r\n    render() {\r\n        const { words, search, mode, onSound } = this.props;\r\n\r\n        const wordList = words.\r\n                            map(\r\n                                word => (\r\n                                    <WordBox\r\n                                        key={word.get('id')}\r\n                                        word={word}\r\n                                        mode={mode}\r\n                                        onSound={onSound}\r\n                                    />\r\n                                )\r\n                            )\r\n\r\n        return (\r\n            <div>\r\n                {wordList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default WordBoxList;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Map, List} from 'immutable';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as testActions from '../modules/test';\r\n\r\nimport WordBoxList from '../components/WordBoxList';\r\n\r\nimport classNames from 'classnames/bind';\r\n\r\nclass WordBoxListContainer extends Component {\r\n\r\n    handleSound = (id) => {\r\n        const {WordsActions} = this.props;\r\n        WordsActions.sound(id);\r\n    }\r\n\r\n    render() {\r\n        const {words, keyword, mode} = this.props;\r\n        const {handleSound} = this;\r\n\r\n        return (\r\n            <WordBoxList\r\n                words={words}\r\n                search={keyword}\r\n                mode={mode}\r\n                onSound={handleSound}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n\r\n    (state) => ({\r\n        keyword: '',\r\n        //keyword: state.get('keyword'),\r\n        words : state.words,\r\n        mode : ''\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        TestActions: bindActionCreators(testActions, dispatch)\r\n    })\r\n) (WordBoxListContainer);","import {Map,List} from  'immutable';\r\nimport {createAction, handleActions} from  'redux-actions';\r\nimport {Record} from 'immutable';\r\n\r\nconst SHOW = 'modal/SHOW';\r\nconst HIDE = 'modal/HIDE';\r\nconst CHANGE = 'modal/CHANGE';\r\nconst ADD_MEAN = 'modal/ADD_MEAN';\r\nconst REMOVE_MEAN = 'modal/REMOVE_MEAN';\r\nconst CHANGE_MEAN = 'modal/CHANGE_MEAN';\r\n\r\nexport const show = createAction(SHOW);\r\nexport const hide = createAction(HIDE);\r\nexport const change = createAction(CHANGE); // {word, mean}\r\nexport const addMean = createAction(ADD_MEAN); // mean\r\nexport const removeMean = createAction(REMOVE_MEAN);\r\nexport const changeMean = createAction(CHANGE_MEAN);\r\n\r\n\r\nconst initialState = Map ( {\r\n    visible:false,\r\n    mode:null,\r\n    word: Map ( {\r\n        id : null,\r\n        word : '',\r\n        means: List([]),\r\n        wrongCounter : -1\r\n    })\r\n});\r\n\r\nexport default handleActions ({\r\n    [SHOW]: (state, action) => {\r\n        const {mode, word} = action.payload;\r\n        \r\n        return state.set('visible', true)\r\n        .set('mode', mode)\r\n        .set('word', Map(word))\r\n        \r\n    },\r\n    [HIDE]: (state, action) => {\r\n        state.set('visible', true);\r\n        \r\n    },\r\n    [CHANGE]: (state, action) => {\r\n        const word = state.getIn(['word']);\r\n        const input = action.payload;\r\n\r\n        if ( word.get('word') !== input.word ) {\r\n            return state.setIn(['word', 'word'], input.word ); \r\n        }\r\n\r\n        if ( word.get('means').findIndex( mean => mean === input.mean ) < 0 \r\n                && input.mean !== '' ) {\r\n            return state.setIn(['word','means'], word.get('means').push(input.mean) );\r\n        }\r\n\r\n        return state;\r\n    },\r\n    [ADD_MEAN]: (state, action) => {\r\n        const mean = action.payload;\r\n\r\n    },\r\n    [REMOVE_MEAN]: (state, action) => {\r\n    },\r\n    [CHANGE_MEAN]: (state, action) => {\r\n    }\r\n}, initialState);","import React, {Component} from 'react';\r\n\r\nimport WordBox from './WordBox';\r\n\r\nimport classNames from 'classnames/bind';\r\nimport styles from '../style/index.module.scss';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nclass Modal extends Component {\r\n\r\n    handleBlur = ( e ) => {\r\n        const {onBlur} = this.props;\r\n        const mean = e.target.value;\r\n        e.target.value='';\r\n        e.target.focus();\r\n        onBlur( mean );\r\n    }\r\n\r\n    handleKeyPress = (e) => {\r\n        if (e.keyCode === 13 || e.keyCode === 9) {\r\n            e.preventDefault();\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {onChange} =this.props;\r\n        onChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const { handleBlur, handleChange, handleKeyPress } = this;\r\n        const {modal} = this.props;\r\n\r\n        console.log( modal.toJS() )\r\n        let idx =0;\r\n        const meanList = modal.getIn(['word', 'means']).map( mean => (\r\n            <div\r\n                key={idx++}\r\n            >\r\n                {mean}\r\n            </div>\r\n        )) \r\n\r\n        return (\r\n            <div className={cx('wrapper')}>\r\n                <div className={cx('box')}>\r\n                    <div>\r\n                        <input\r\n                            placeholder='단어'\r\n                            onChange={handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className={cx('meansList')}>\r\n                        {meanList}\r\n                    </div>\r\n                    <input\r\n                        placeholder='Mean'\r\n                        onBlur={handleBlur}\r\n                        onKeyDown={handleKeyPress}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ImmutablePropTypes from 'react-immutable-proptypes';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nimport * as wordsActions from '../modules/words';\r\nimport * as modalActions from '../modules/modal';\r\n\r\nimport Modal from '../components/Modal'\r\n\r\nclass WordModalContainer extends Component {\r\n    handleBulr = (mean) => {\r\n        const {ModalActions, modal } = this.props;\r\n\r\n        const input = {\r\n            word : modal.getIn(['word', 'word']),\r\n            mean : mean\r\n        }\r\n\r\n        ModalActions.change(\r\n            input\r\n        );\r\n\r\n    }\r\n\r\n    handleChange = (word) => {\r\n        const {ModalActions} = this.props;\r\n\r\n        const input = {\r\n            word : word,\r\n            mean : ''\r\n        }\r\n\r\n        ModalActions.change(\r\n            input\r\n        );\r\n    }\r\n\r\n    render () {\r\n        const {handleBulr, handleChange} = this;\r\n        const {modal} = this.props;\r\n        return (\r\n            <Modal\r\n                modal={modal}\r\n                onBlur={handleBulr}\r\n                onChange={handleChange}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        modal:state.modal\r\n    }),\r\n    (dispatch) => ({\r\n        WordsActions: bindActionCreators(wordsActions, dispatch),\r\n        ModalActions : bindActionCreators(modalActions, dispatch)\r\n    })\r\n) (WordModalContainer);","import React, { Component } from 'react';\nimport WordBoxListContainer from './containers/WordBoxListContainer';\nimport WordModalContainer from './containers/WordModalContainer';\nimport './App.scss';\n\nclass App extends Component {\n\n  componentDidMount() {\n\n    const words = localStorage.getItem('words');\n    if ( words !== null && typeof (words) !== 'undefined' ) {\n      \n    } else {\n      \n    }\n\n  }\n\n  render() {\n    return (\n      <div>\n        <WordBoxListContainer />\n        <WordModalContainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux';\r\n\r\nimport words from './words';\r\nimport modal from './modal';\r\n\r\nexport default combineReducers({\r\n    words,modal\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from 'redux';\nimport reducers from './modules';\nimport {Provider} from 'react-redux';\n\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <Provider store ={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root')\n);\n"],"sourceRoot":""}